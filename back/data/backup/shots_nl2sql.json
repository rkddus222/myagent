[
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240116'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240116\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20240116')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240723'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240723\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 열(bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 동작이 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd <> 'KRW' AND reg_dt = '20240523'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240523\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240829'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240829\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20240829')과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240622'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240622\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('증권', 'KRW', '20240622')과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt, SUM(real_amt) AS total_real_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250113' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"acct_bal_amt\",\n            \"label\": \"total_acct_bal_amt\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": \"real_amt\",\n            \"label\": \"total_real_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250113\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt, sum(aicfo_get_all_amt.real_amt) AS total_real_amt \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `bank_nm`으로 그룹화하고, `acct_bal_amt`와 `real_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240928'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240928\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20240928')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20221206'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20221206\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20221206')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND due_dt < '20180227' AND reg_dt = '20171127'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"due_dt\",\n            \"op\": \"lt\",\n            \"value\": \"20180227\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20171127\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.due_dt < :due_dt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, due_dt, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240704'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240704\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd <> 'KRW' AND reg_dt = '20211109'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20211109\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20211109')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240831'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240831\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20240831')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '신한은행' AND reg_dt = '20240313'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"신한은행\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240313\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :bank_nm_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('수시', 'KRW', '신한은행', '20240313')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_dv LIKE '%당좌%' AND reg_dt = '20240413'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_dv\",\n            \"op\": \"like\",\n            \"value\": \"%당좌%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240413\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_dv, reg_dt)을 사용하여 동일한 컬럼(bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 동작이 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%0220%' AND reg_dt = '20240513'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%0220%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240513\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 동일한 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 일치하는 조건을 나타내므로 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240613'  ORDER BY acct_bal_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240613\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"acct_bal_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND real_amt >= POWER(10,8) AND reg_dt = '20240713'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"real_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"10^8\"\n            }\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240713\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.real_amt >= :real_amt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240103'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240103\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'USD' AND reg_dt = '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"USD\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241231\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241231\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20241231')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND bank_nm = '신한은행' AND reg_dt = '20240701'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"신한은행\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240701\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :bank_nm_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '신한은행', '20240701')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND reg_dt = '20241212'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%12065128558451%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241212\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240708'  ORDER BY open_dt ASC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240708\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"open_dt\",\n            \"direction\": \"asc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.open_dt ASC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택된 컬럼과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20240708')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_bal_amt >= POWER(10,8) AND reg_dt = '20240516'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240516\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_amt` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND intr_rate >= 3 AND reg_dt = '20240603'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"intr_rate\",\n            \"op\": \"ge\",\n            \"value\": 3\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240603\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate >= :intr_rate_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, intr_rate, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금'AND curr_cd = 'USD' AND reg_dt = '20240629'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"USD\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240629\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'USD', '20240629')과 동일한 역할을 하므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241231\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20241231')과 동일한 역할을 하므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND reg_dt = '20241119'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"기업은행\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241119\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, bank_nm, reg_dt)을 사용하여 동일한 열(bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%1314%' AND reg_dt = '20240909'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%1314%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240909\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 동일한 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240727'  ORDER BY acct_bal_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240727\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"acct_bal_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240919'  ORDER BY open_dt ASC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240919\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"open_dt\",\n            \"direction\": \"asc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.open_dt ASC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택된 컬럼과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND intr_rate = 3 AND reg_dt = '20241009'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"intr_rate\",\n            \"op\": \"eq\",\n            \"value\": 3\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241009\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate = :intr_rate_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, intr_rate, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND intr_rate >= 3 AND intr_rate < 4 AND reg_dt = '20241009'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"intr_rate\",\n            \"op\": \"ge\",\n            \"value\": 3\n        },\n        {\n            \"column\": \"intr_rate\",\n            \"op\": \"lt\",\n            \"value\": 4\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241009\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate >= :intr_rate_1 AND aicfo_get_all_amt.intr_rate < :intr_rate_2 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_amt` 테이블에서 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND intr_rate >= 3 AND intr_rate < 4 AND reg_dt = '20241009'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"intr_rate\",\n            \"op\": \"ge\",\n            \"value\": 3\n        },\n        {\n            \"column\": \"intr_rate\",\n            \"op\": \"lt\",\n            \"value\": 4\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241009\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate >= :intr_rate_1 AND aicfo_get_all_amt.intr_rate < :intr_rate_2 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_amt` 테이블에서 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 조건을 나타내므로 결과가 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd <> 'KRW' AND reg_dt = '20240726'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240726\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'USD' AND reg_dt = '20240409'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"USD\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240409\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 필터링하고 있습니다. 변환된 SQL에서는 바인드 변수를 사용하고 있지만, 이는 실행 시점에 값이 대입되므로 결과적으로 동일한 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241231\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('증권', 'KRW', '20241231')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND bank_nm = '삼성증권' AND reg_dt = '20240113'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성증권\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240113\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, bank_nm, reg_dt)을 사용하여 동일한 컬럼(bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 동작이 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND (acct_dv LIKE 'ELS%' OR acct_dv LIKE 'DLS%') AND reg_dt = '20240707'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_dv\",\n            \"op\": \"like\",\n            \"value\": \"ELS%\"\n        },\n        {\n            \"column\": \"acct_dv\",\n            \"op\": \"like\",\n            \"value\": \"DLS%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240707\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_2 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `acct_dv` 조건이 `LIKE :acct_dv_1 AND :acct_dv_2`로 되어 있어, 원본 SQL의 `acct_dv LIKE 'ELS%' OR acct_dv LIKE 'DLS%'` 조건과 일치하지 않습니다. 원본 쿼리는 두 조건 중 하나라도 만족하면 결과를 반환하지만, 변환된 쿼리는 두 조건을 모두 만족해야 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND reg_dt = '20240325'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%12065128558451%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240325\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240905'  ORDER BY deposit_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240905\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"deposit_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.deposit_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 조회하고 있으며, 선택된 컬럼과 정렬 기준도 동일하므로 같은 동작을 합니다. SQLAlchemy에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값과 동일한 역할을 하므로 결과에 영향을 미치지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_bal_amt >= POWER(10,8) AND reg_dt = '20240814'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240814\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'trsc_dt' not found in AccountAmount",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'trsc_dt' 컬럼이 'AccountAmount' 테이블에 존재하지 않기 때문에 원본 SQL과 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250105'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250105\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20250105')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240425'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240425\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 열을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20240425')과 동일한 역할을 하므로 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240328'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240328\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 동일한 컬럼을 선택하고 있으며, SQLAlchemy에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240331'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240331\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, SQLAlchemy 변환 후에도 원본 SQL의 의미를 그대로 유지하고 있습니다. 단지 변수 바인딩 방식이 사용되었을 뿐입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240224'  ORDER BY intr_rate DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240224\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"intr_rate\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.intr_rate DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 사용하고 있으며, 조건절과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND due_dt < '20250405' AND reg_dt = '20250105'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"due_dt\",\n            \"op\": \"lt\",\n            \"value\": \"20250405\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250105\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.due_dt < :due_dt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, due_dt, reg_dt)을 사용하여 데이터를 조회하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :due_dt_1, :reg_dt_1)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_dv LIKE '%예금%' AND reg_dt = '20250114'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_dv\",\n            \"op\": \"like\",\n            \"value\": \"%예금%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250114\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE  curr_cd = 'KRW' AND AND bank_nm LIKE '%기업은행%' reg_dt = '20250108'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"like\",\n            \"value\": \"%기업은행%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250108\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm LIKE :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "아니오",
      "의견": "원본 SQL 쿼리에서 `AND`가 두 번 사용되었고, `bank_nm LIKE '%기업은행%'` 조건 뒤에 `AND`가 잘못 포함되어 있습니다. 또한, `reg_dt = '20250108'` 조건이 `AND` 없이 나열되어 있어 문법적으로 오류가 있습니다. 변환된 SQL 쿼리는 이러한 오류를 수정하고, 바인딩 변수를 사용하여 조건을 명확히 하고 있습니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt, SUM(real_amt) AS total_real_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250113' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"acct_bal_amt\",\n            \"label\": \"total_acct_bal_amt\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": \"real_amt\",\n            \"label\": \"total_real_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250113\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt, sum(aicfo_get_all_amt.real_amt) AS total_real_amt \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `bank_nm`으로 그룹화하고, `acct_bal_amt`와 `real_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241231\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 같은 데이터를 선택하고 있으며, SQLAlchemy 변환 후에도 원본 SQL의 조건과 필드가 일치합니다. 단지 변수 바인딩 방식이 다를 뿐, 결과는 동일합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240727'  ORDER BY cntrct_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240727\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"cntrct_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.cntrct_amt DESC",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `ORDER BY` 절에 사용된 `cntrct_amt` 컬럼이 원본 SQL 쿼리와 다릅니다. 원본 쿼리에서는 `cntrct_amt`가 사용되었지만, 변환된 쿼리에서는 이 컬럼이 명시되지 않았거나 잘못된 컬럼으로 보입니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20250105'  ORDER BY due_dt ASC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250105\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"due_dt\",\n            \"direction\": \"asc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.due_dt ASC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, deposit_foreign, total_appr_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권'  and curr_cd = 'USD' AND reg_dt = '20240301'  ORDER BY deposit_amt DESC LIMIT 1 ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"deposit_foreign\",\n        \"total_appr_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"USD\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240301\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"deposit_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.deposit_foreign, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.deposit_amt DESC",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `LIMIT 1`이 누락되어 있어 결과의 개수가 다를 수 있습니다. 원본 SQL은 결과를 1개로 제한하지만, 변환된 SQL은 제한이 없으므로 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250116'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250116\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20250116')과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT reg_dt, bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt BETWEEN '20241230' AND '20250105'   ",
    "answer": "{\n    \"select\": [\n        \"reg_dt\",\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241230\", \"20250105\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.reg_dt, aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt BETWEEN :reg_dt_1 AND :reg_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%2105%' AND reg_dt = '20241219'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%2105%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241219\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 일치하는 값을 대체하는 것으로, 쿼리의 동작에 영향을 미치지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%4651%' AND reg_dt = '20240909'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%4651%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240909\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND acct_no LIKE '%4415%' AND reg_dt = '20241016'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%4415%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241016\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 갖습니다. 따라서 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%4898%' AND reg_dt = '20241017'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%4898%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241017\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 동일한 열(bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%2105%' AND reg_dt = '20240921'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%2105%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240921\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 일치하는 값으로 설정될 수 있으므로 동작이 동일합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%5868%' AND reg_dt = '20241101'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%5868%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241101\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 동일한 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND acct_no LIKE '%5465%' AND reg_dt = '20241003'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%5465%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241003\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%58878%' AND reg_dt = '20241210'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%58878%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241210\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20241004' AND acct_bal_amt <> 0   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241004\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ne\",\n            \"value\": 0\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20241130' AND acct_bal_amt <> 0   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241130\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ne\",\n            \"value\": 0\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20241109' AND acct_bal_amt <> 0   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241109\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ne\",\n            \"value\": 0\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20241023' AND acct_bal_amt <> 0   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241023\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ne\",\n            \"value\": 0\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%100037340220%' AND reg_dt = '20241023'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%100037340220%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241023\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%28491002652105%' AND reg_dt = '20240915'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%28491002652105%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240915\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 값과 일치하는 조건을 나타내므로 동작이 동일합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%11791003586905%' AND reg_dt = '20240206'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%11791003586905%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240206\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND acct_no LIKE '%1005404208279%' AND reg_dt = '20240218'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%1005404208279%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240218\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택하는 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%100037589692%' AND reg_dt = '20250105'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%100037589692%\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250105\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 조건을 나타내므로, 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250205' AND acct_bal_amt >= POWER(10,8)   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250205\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240722' AND acct_bal_amt >= POWER(10,8)   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240722\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt, acct_bal_amt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240713' AND acct_bal_amt >= POWER(10,8)   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240713\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240713' AND acct_bal_amt >= POWER(10,8)   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240713\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240706' AND acct_bal_amt >= POWER(10,8)   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240706\"\n        },\n        {\n            \"column\": \"acct_bal_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20241202'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241202\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20241202')과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240715'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240715\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 열을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20240715')과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240707'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240707\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240225'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240225\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('증권', 'KRW', '20240225')과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250122' GROUP BY bank_nm ORDER BY account_count DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"acct_no\",\n            \"label\": \"account_count\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250122\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"account_count\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 무시되고 있습니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20250113' GROUP BY bank_nm ORDER BY account_count DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"acct_no\",\n            \"label\": \"account_count\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250113\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"account_count\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 내림차순 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 무시되는 상태입니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '외화' AND curr_cd = 'KRW' AND reg_dt = '20240723' GROUP BY bank_nm ORDER BY account_count DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"acct_no\",\n            \"label\": \"account_count\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"외화\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240723\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"account_count\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 NULL로 설정되어 있어 결과가 다를 수 있습니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240815' GROUP BY bank_nm ORDER BY account_count DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"acct_no\",\n            \"label\": \"account_count\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240815\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"account_count\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 명시되지 않아 결과가 다를 수 있습니다."
    }
  },
  {
    "question": "SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240917' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"acct_bal_amt\",\n            \"label\": \"total_acct_bal_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240917\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `bank_nm`별로 `acct_bal_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 동일하게 유지되고 있습니다. 단지 변환된 SQL에서 파라미터 바인딩을 사용하고 있을 뿐, 쿼리의 논리적 동작은 동일합니다."
    }
  },
  {
    "question": "SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20241012' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"acct_bal_amt\",\n            \"label\": \"total_acct_bal_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241012\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `bank_nm`별로 `acct_bal_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 동일하게 설정되어 있습니다. 단지 변환된 SQL에서 변수 바인딩을 사용하고 있을 뿐, 쿼리의 논리적 구조는 동일합니다."
    }
  },
  {
    "question": "SELECT bank_nm, curr_cd, SUM(acct_bal_amt) AS total_acct_bal_amt, SUM(real_amt) AS total_real_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20241202' GROUP BY bank_nm, curr_cd  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"curr_cd\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"acct_bal_amt\",\n            \"label\": \"total_acct_bal_amt\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": \"real_amt\",\n            \"label\": \"total_real_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241202\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\",\n        \"curr_cd\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.curr_cd, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt, sum(aicfo_get_all_amt.real_amt) AS total_real_amt \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.curr_cd",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건과 집계 함수를 사용하고 있으며, GROUP BY 절도 동일하게 구성되어 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20241223' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"acct_bal_amt\",\n            \"label\": \"total_acct_bal_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241223\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `bank_nm`별로 `acct_bal_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240123'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240123\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20240123')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND reg_dt = '20250112' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"acct_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"기업은행\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250112\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "Error: Column '*' not found in AccountAmount",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용하려고 했지만, SQLAlchemy에서 '*'를 사용할 수 없다는 오류가 발생했습니다. 이는 원본 SQL 쿼리와 변환된 쿼리가 동일한 동작을 하지 않음을 나타냅니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND bank_nm = '신한은행' AND reg_dt = '20250113' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"acct_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"신한은행\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250113\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "Error: Column '*' not found in AccountAmount",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 `COUNT(*)`를 사용하려고 했지만, `Column '*' not found in AccountAmount`라는 오류가 발생하여 쿼리가 제대로 변환되지 않았습니다. 원본 SQL의 동작을 수행하지 못하고 있습니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND bank_nm = '하나은행' AND reg_dt = '20240723' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"acct_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"하나은행\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240723\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "Error: Column '*' not found in AccountAmount",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 `COUNT(*)`를 사용하려고 했지만, SQLAlchemy에서 `*`를 사용할 수 없어서 오류가 발생했습니다. 원본 SQL의 의도와 다르게 동작하고 있습니다."
    }
  },
  {
    "question": "SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND bank_nm = '삼성증권' AND reg_dt = '20241012' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"acct_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성증권\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241012\"\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "Error: Column '*' not found in AccountAmount",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 COUNT(*)를 사용하려고 했지만, '*'가 존재하지 않는 열로 인식되어 오류가 발생했습니다. 원본 SQL의 COUNT(*)와 동일한 동작을 하지 않기 때문에 두 쿼리는 일치하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240123'  ORDER BY acct_bal_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240123\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"acct_bal_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('예적금', 'KRW', '20240123')을 대체하는 것으로, 실행 시 동일한 값을 제공하면 결과는 동일합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240202'  ORDER BY acct_bal_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"acct_bal_amt\",\n        \"open_dt\",\n        \"due_dt\",\n        \"intr_rate\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240202\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"acct_bal_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 조회하고 있으며, 선택된 컬럼과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240723'  ORDER BY acct_bal_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_dv\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"acct_bal_amt\",\n        \"real_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240723\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"acct_bal_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고, 동일한 컬럼을 선택하며, 결과를 동일한 기준으로 정렬하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240516'  ORDER BY acct_bal_amt DESC",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"deposit_amt\",\n        \"total_appr_amt\",\n        \"acct_bal_amt\",\n        \"acct_bal_upd_dtm\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240516\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"acct_bal_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm \nFROM aicfo_get_all_amt \nWHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240606' AND '20240706'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240606\", \"20240706\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv='예적금' and curr_cd <> 'KRW' AND trsc_dt BETWEEN '20231213' AND '20240113'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231213\", \"20240113\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240916' AND '20241016'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240916\", \"20241016\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 열도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv='대출' and curr_cd <> 'KRW' and trsc_dt BETWEEN '20231213' AND '20240113'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231213\", \"20240113\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20231213' AND '20240113'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231213\", \"20240113\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND trsc_dt BETWEEN '20241027' AND '20241127'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241027\", \"20241127\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_amt >= POWER(10,8) AND trsc_dt BETWEEN '20231223' AND '20240123'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_amt\",\n            \"op\": \"ge\",\n            \"value\": 100000000\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231223\", \"20240123\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 필드와 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT note1, SUM(trsc_amt) AS total_in_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20250101' AND '20250113' GROUP BY note1 ORDER BY total_in_amt DESC LIMIT 1",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_in_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20250101\", \"20250113\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"total_in_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'total_in_amt' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'total_in_amt'라는 별칭을 사용하고 있지만, SQLAlchemy에서 해당 별칭이 정의되지 않아 오류가 발생했습니다. 원본 SQL 쿼리는 'total_in_amt'를 SUM(trsc_amt)로 정의하고 사용하고 있으므로, 변환된 쿼리는 원본 쿼리와 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT TO_CHAR(DATE_TRUNC('month', trsc_dt::timestamp), 'YYYYMM') AS trsc_month, SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_outgoing_amount FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241201' AND '20250113' GROUP BY trsc_month  ",
    "answer": "{\n    \"select\": [\n        {\n            \"func\": \"TO_CHAR\",\n            \"column\": {\n                \"func\": \"DATE_TRUNC\",\n                \"column\": \"trsc_dt\",\n                \"filter\": {\n                    \"column\": \"trsc_dt\",\n                    \"op\": \"eq\",\n                    \"value\": \"timestamp\"\n                }\n            },\n            \"label\": \"trsc_month\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"CASE\",\n                \"column\": \"in_out_dv\",\n                \"filter\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241201\", \"20250113\"]\n        }\n    ],\n    \"group_by\": [\n        \"trsc_month\"\n    ]\n}",
    "converted_question": "Error: attribute name must be string, not 'dict'",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 오류가 발생하여 쿼리가 제대로 변환되지 않았습니다. 원본 SQL의 구조와 논리를 유지하지 못하고 있으며, 따라서 두 쿼리가 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND note1 LIKE '%웹케시%' AND trsc_dt BETWEEN '20240118' AND '20240218'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%웹케시%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240118\", \"20240218\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.note1 LIKE :note1_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20190412' AND '20190512'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20190412\", \"20190512\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT TO_CHAR(DATE_TRUNC('month', trsc_dt::timestamp), 'YYYYMM') AS trsc_month, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW'AND in_out_dv = '출금' AND note1 LIKE '%인건비%' AND trsc_dt BETWEEN '20180505' AND '20190505'  GROUP BY trsc_month  ",
    "answer": "{\n    \"select\": [\n        {\n            \"func\": \"TO_CHAR\",\n            \"column\": {\n                \"func\": \"DATE_TRUNC\",\n                \"column\": \"trsc_dt::timestamp\",\n                \"label\": \"trsc_month\"\n            },\n            \"label\": \"trsc_month\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%인건비%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20180505\", \"20190505\"]\n        }\n    ],\n    \"group_by\": [\n        \"trsc_month\"\n    ]\n}",
    "converted_question": "Error: attribute name must be string, not 'dict'",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 오류가 발생하였으며, 이는 SQLAlchemy에서 쿼리를 작성하는 과정에서 잘못된 형식의 속성 이름이 사용되었음을 나타냅니다. 원본 SQL 쿼리는 정상적으로 작동하지만, 변환된 SQL은 실행할 수 없는 상태입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '출금'  AND trsc_amt >= POWER(10,8) AND trsc_dt BETWEEN '20241001' AND '20241101'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"10^8\"\n            }\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241001\", \"20241101\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240520' AND '20240620'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240520\", \"20240620\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240301' AND '20240331'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240301\", \"20240331\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240419' AND '20240519'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240419\", \"20240519\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND trsc_dt BETWEEN '20241011' AND '20241111'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"기업은행\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241011\", \"20241111\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, bank_nm, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금'  AND trsc_dt BETWEEN '20241102' AND '20241202'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241102\", \"20241202\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 동일한 컬럼을 선택하고 있으며, WHERE 절의 조건도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240212' AND '20240312'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240212\", \"20240312\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, in_out_dv, trsc_dt)으로 데이터를 조회하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240120' AND '20240220'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240120\", \"20240220\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값('수시', 'KRW', '20240120', '20240220')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND trsc_dt BETWEEN '20240913' AND '20241013'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%12065128558451%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240913\", \"20241013\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240405' AND '20240505' GROUP BY bank_nm, acct_no ORDER BY in_cnt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"in_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240405\", \"20240505\"]\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\",\n        \"acct_no\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"in_cnt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용한 부분이 잘못 처리되어 \"Column '*' not found in Transaction\" 오류가 발생했습니다. 이는 원본 SQL의 집계 함수 사용 방식과 변환된 SQL의 구조가 일치하지 않음을 나타냅니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금'AND trsc_dt BETWEEN '20240718' AND '20240818' AND trsc_amt >= POWER(10,8)     ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240718\", \"20240818\"]\n        },\n        {\n            \"column\": \"trsc_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND trsc_dt BETWEEN '20241127' AND '20241227'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241127\", \"20241227\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'USD' AND trsc_dt = '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"USD\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241231\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt = :trsc_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240101' AND '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240101\", \"20241231\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW ' AND note1 LIKE '%웹케시%' AND trsc_dt BETWEEN '20231231' AND '20240131'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW \"\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%웹케시%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231231\", \"20240131\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.note1 LIKE :note1_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND trsc_dt BETWEEN '20231220' AND '20240120'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"기업은행\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231220\", \"20240120\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240819' AND '20240919'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240819\", \"20240919\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20231213' AND '20240113'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231213\", \"20240113\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_dv LIKE '%정기적금%'  AND trsc_dt BETWEEN '20240617' AND '20240717'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_dv\",\n            \"op\": \"like\",\n            \"value\": \"%정기적금%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240617\", \"20240717\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%'  AND trsc_dt BETWEEN '20240530' AND '20240630'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%12065128558451%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240530\", \"20240630\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금'  AND trsc_dt BETWEEN '20240112' AND '20240212' GROUP BY curr_cd, bank_nm, acct_no ORDER BY in_cnt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"in_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240112\", \"20240212\"]\n        }\n    ],\n    \"group_by\": [\n        \"curr_cd\",\n        \"bank_nm\",\n        \"acct_no\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"in_cnt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용한 부분이 SQLAlchemy에서 적절하게 변환되지 않아 오류가 발생했습니다. 원본 SQL 쿼리는 정상적으로 작동하지만, 변환된 쿼리는 컬럼을 찾지 못하는 오류가 발생하여 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv='예적금' and curr_cd = 'USD' AND trsc_dt BETWEEN '20241118' AND '20241218'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"USD\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241118\", \"20241218\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN ' 20241201' AND ' 20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241201\", \"20241231\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240827' AND '20240927' AND note1 LIKE '%웹케시%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240827\", \"20240927\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%웹케시%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt  AND bank_nm = '기업은행'  BETWEEN '20241119' AND '20241219'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241119\", \"20241219\"]\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"기업은행\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1",
    "result": {
      "일치여부": "아니오",
      "의견": "원본 SQL 쿼리에서 `trsc_dt` 조건이 잘못 작성되어 있습니다. `trsc_dt`가 `BETWEEN` 절에 포함되어야 하는데, 원본 쿼리에서는 `trsc_dt`가 단독으로 존재하고 있습니다. 이로 인해 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%120301230%'  AND trsc_dt BETWEEN '20240809' AND '20240909'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%120301230%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240809\", \"20240909\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT curr_cd, bank_nm, acct_no, COUNT(*) AS trsc_cnt FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240916' AND '20241016' GROUP BY curr_cd, bank_nm, acct_no ORDER BY trsc_cnt DESC ",
    "answer": "{\n    \"select\": [\n        \"curr_cd\",\n        \"bank_nm\",\n        \"acct_no\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"trsc_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240916\", \"20241016\"]\n        }\n    ],\n    \"group_by\": [\n        \"curr_cd\",\n        \"bank_nm\",\n        \"acct_no\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"trsc_cnt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용한 부분이 오류를 발생시키고 있으며, 이는 원본 SQL의 의도와 다릅니다. 원본 SQL은 특정 조건에 따라 그룹화된 결과를 반환하는 반면, 변환된 SQL은 올바르게 구성되지 않아 실행할 수 없습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240917' AND '20241017' AND loan_trsc_amt >= POWER(10,8)   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240917\", \"20241017\"]\n        },\n        {\n            \"column\": \"loan_trsc_amt\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"8\"\n            }\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.loan_trsc_amt >= :loan_trsc_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv='대출' and curr_cd = 'USD' AND trsc_dt BETWEEN '20240821' AND '20240921'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"curr_cd\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"loan_trsc_amt\",\n        \"loan_intr_amt\",\n        \"trsc_bal\",\n        \"intr_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"대출\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"USD\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240821\", \"20240921\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241001' AND '20241031'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241001\", \"20241031\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권'  AND curr_cd = 'KRW'AND trsc_dt BETWEEN '20240903' AND '20241003' AND note1 LIKE '%웹케시%'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240903\", \"20241003\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%웹케시%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND bank_nm = 'NH투자증권' AND trsc_dt BETWEEN '20241110' AND '20241210'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"NH투자증권\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241110\", \"20241210\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, bank_nm, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240904' AND '20241004'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240904\", \"20241004\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, in_out_dv, trsc_dt)을 사용하여 동일한 컬럼(bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt)을 선택하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241030' AND '20241130'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241030\", \"20241130\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, in_out_dv, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_dv like '%신탁%' AND trsc_dt BETWEEN '20241009' AND '20241109'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_dv\",\n            \"op\": \"like\",\n            \"value\": \"%신탁%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241009\", \"20241109\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND trsc_dt BETWEEN '20240923' AND '20241023'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%12065128558451%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240923\", \"20241023\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, COUNT(*) AS trsc_cnt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240923' AND '20241023' GROUP BY curr_cd, bank_nm, acct_no ORDER BY trsc_cnt DESC ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"trsc_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240923\", \"20241023\"]\n        }\n    ],\n    \"group_by\": [\n        \"curr_cd\",\n        \"bank_nm\",\n        \"acct_no\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"trsc_cnt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용한 부분이 잘못 처리되어 \"Column '*' not found in Transaction\" 오류가 발생하였기 때문에 원본 SQL과 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW'  AND trsc_dt BETWEEN '20240815' AND '20240915' AND trsc_amt >= (2*POWER(10,8))   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"stock_trsc_type\",\n        \"stock_nm\",\n        \"trsc_amt\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"증권\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240815\", \"20240915\"]\n        },\n        {\n            \"column\": \"trsc_amt\",\n            \"op\": \"ge\",\n            \"value\": \"(2*POWER(10,8))\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND  bank_nm LIKE '%기업은행%' AND trsc_dt BETWEEN '20240106' AND '20240206'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"like\",\n            \"value\": \"%기업은행%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240106\", \"20240206\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm LIKE :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240118' AND '20240218' AND note1 LIKE '%쿠콘%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240118\", \"20240218\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%쿠콘%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건절도 동일한 논리를 따릅니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240101' AND '20240131' AND note1 LIKE '%인건비%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240101\", \"20240131\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%인건비%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT SUM(CASE WHEN in_out_dv = '입금' THEN trsc_amt ELSE 0 END) AS total_incoming_amount, SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_outgoing_amount, SUM(CASE WHEN in_out_dv = '입금' THEN trsc_amt ELSE 0 END) - SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_net_profit FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20250101' AND '20250131'   ",
    "answer": "{\n    \"select\": [\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"입금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_incoming_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"입금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_incoming_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"입금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_incoming_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"입금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_incoming_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"입금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_incoming_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"입금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_incoming_amount\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20250101\", \"20250131\"]\n        }\n    ]\n}",
    "converted_question": "Error: attribute name must be string, not 'dict'",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 오류가 발생하여 쿼리가 제대로 변환되지 않았습니다. 원본 SQL의 논리와 구조가 유지되지 않았기 때문에 두 쿼리가 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT note1, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20250101' AND '20250113' GROUP BY note1 ORDER BY in_cnt DESC LIMIT 1",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"in_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20250101\", \"20250113\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"in_cnt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"Column '*' not found in Transaction\" 오류가 발생하여 쿼리가 정상적으로 실행되지 않으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT SUM(trsc_amt) AS total_trsc_amt, SUM(CASE WHEN note1 LIKE '%연구비%' THEN trsc_amt ELSE 0 END) AS note_amt, (SUM(CASE WHEN note1 LIKE '%연구비%' THEN trsc_amt ELSE 0 END) / SUM(trsc_amt))*100 as note_ratio FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20250101' AND '20250113'   ",
    "answer": "{\n    \"select\": [\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        },\n        {\n            \"func\": \"sum\",\n            \"filter\": {\n                \"column\": \"note1\",\n                \"op\": \"like\",\n                \"value\": \"%연구비%\"\n            },\n            \"column\": \"trsc_amt\",\n            \"label\": \"note_amt\"\n        },\n        {\n            \"func\": \"sum\",\n            \"filter\": {\n                \"column\": \"note1\",\n                \"op\": \"like\",\n                \"value\": \"%연구비%\"\n            },\n            \"column\": \"trsc_amt\",\n            \"label\": \"note_amt\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\"\n        },\n        \"note_ratio\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20250101\", \"20250113\"]\n        }\n    ]\n}",
    "converted_question": "Error: Column 'note_ratio' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'note_ratio' 컬럼이 정의되지 않았거나 참조되지 않아 오류가 발생했습니다. 원본 SQL에서는 'note_ratio'가 SUM 함수의 결과를 기반으로 계산되지만, 변환된 SQL에서는 이를 제대로 처리하지 못하고 있습니다."
    }
  },
  {
    "question": "SELECT SUM(CASE WHEN in_out_dv = '입금' THEN trsc_amt ELSE 0 END) AS total_incoming, SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_outgoing_amount FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241201' AND '20241231'   ",
    "answer": "{\n    \"select\": [\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"입금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_incoming\"\n        },\n        {\n            \"func\": \"sum\",\n            \"column\": {\n                \"func\": \"case\",\n                \"when\": {\n                    \"column\": \"in_out_dv\",\n                    \"op\": \"eq\",\n                    \"value\": \"출금\"\n                },\n                \"then\": \"trsc_amt\",\n                \"else\": 0\n            },\n            \"label\": \"total_outgoing_amount\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241201\", \"20241231\"]\n        }\n    ]\n}",
    "converted_question": "Error: attribute name must be string, not 'dict'",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 오류가 발생하여 쿼리가 제대로 실행되지 않으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20241102' AND '20241202' AND note1 LIKE '%웹케시%'    ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241102\", \"20241202\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%웹케시%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240715' AND '20250115' GROUP BY curr_cd, bank_nm, acct_no ORDER BY in_cnt DESC LIMIT 1",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"in_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240715\", \"20250115\"]\n        }\n    ],\n    \"group_by\": [\n        \"curr_cd\",\n        \"bank_nm\",\n        \"acct_no\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"in_cnt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"Column '*' not found in Transaction\" 오류가 발생하여 쿼리가 실행되지 않으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240107' AND '20250107' AND note1 LIKE '%쿠콘%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240107\", \"20250107\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%쿠콘%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '농협' AND acct_no LIKE '%329912%' AND trsc_dt BETWEEN '20241225' AND '20241231'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"농협\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%329912%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241225\", \"20241231\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, SQLAlchemy에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20250109' AND '20250115'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20250109\", \"20250115\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값('수시', 'KRW', '20250109', '20250115')을 대체하는 것으로, 쿼리의 논리적 동작은 동일합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240125' AND '20240131'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240125\", \"20240131\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값('수시', 'KRW', '20240125', '20240131')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241201' AND '20241218'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241201\", \"20241218\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '농협' AND trsc_dt BETWEEN '20200101' AND '20200131' GROUP BY bank_nm  ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"농협\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20200101\", \"20200131\"]\n        }\n    ],\n    \"group_by\": [\n        \"bank_nm\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.bank_nm",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `bank_nm`을 기준으로 `trsc_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 동일하게 유지되고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT acct_no, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%329912%' AND trsc_dt BETWEEN '20231216' AND '20231223' GROUP BY acct_no, in_out_dv  ",
    "answer": "{\n    \"select\": [\n        \"acct_no\",\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"acct_no\",\n            \"op\": \"like\",\n            \"value\": \"%329912%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231216\", \"20231223\"]\n        }\n    ],\n    \"group_by\": [\n        \"acct_no\",\n        \"in_out_dv\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.in_out_dv, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.in_out_dv",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, GROUP BY 절과 SUM 함수의 사용도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20180416' AND '20180516' GROUP BY in_out_dv  ",
    "answer": "{\n    \"select\": [\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20180416\", \"20180516\"]\n        }\n    ],\n    \"group_by\": [\n        \"in_out_dv\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.in_out_dv, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.in_out_dv",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `in_out_dv`로 그룹화하고 `trsc_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20250111'AND '20250211' GROUP BY in_out_dv  ",
    "answer": "{\n    \"select\": [\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20250111\", \"20250211\"]\n        }\n    ],\n    \"group_by\": [\n        \"in_out_dv\"\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.in_out_dv, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.in_out_dv",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `in_out_dv`로 그룹화하고 `trsc_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240126' AND '20240226' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240126\", \"20240226\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"total_trsc_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'total_trsc_amt' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의되지 않았기 때문에 해당 컬럼을 찾을 수 없다는 오류가 발생합니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 있지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240218' AND '20240318' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240218\", \"20240318\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"total_trsc_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'total_trsc_amt' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240317' AND '20240417' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240317\", \"20240417\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"total_trsc_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'total_trsc_amt' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241122' AND '20241222' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241122\", \"20241222\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"total_trsc_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'total_trsc_amt' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240915' AND '20241015' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"sum\",\n            \"column\": \"trsc_amt\",\n            \"label\": \"total_trsc_amt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240915\", \"20241015\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"total_trsc_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'total_trsc_amt' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이 별칭을 찾을 수 없기 때문에 쿼리가 일치하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240403' AND '20240503' AND trsc_amt = 1000000   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240403\", \"20240503\"]\n        },\n        {\n            \"column\": \"trsc_amt\",\n            \"op\": \"eq\",\n            \"value\": 1000000\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.trsc_amt = :trsc_amt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SQLAlchemy에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241124' AND '20241224' AND note1 LIKE '%세금%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241124\", \"20241224\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%세금%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건절도 동일한 논리를 따릅니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240301' AND '20240303' AND note1 LIKE '%법인세%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240301\", \"20240303\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%법인세%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240201' AND '20240229' AND note1 LIKE '%부가세%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240201\", \"20240229\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%부가세%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240216' AND '20240316' AND note1 LIKE '%급여%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240216\", \"20240316\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%급여%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240301' AND '20240321' AND note1 LIKE '%4대보험%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240301\", \"20240321\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%4대보험%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240302' AND '20240402' AND note1 LIKE '%퇴직금%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240302\", \"20240402\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%퇴직금%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240401' AND '20240417' AND note1 LIKE '%성과급%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240401\", \"20240417\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%성과급%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240501' AND '20240504' AND note1 LIKE '%임대료%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240501\", \"20240504\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%임대료%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240701' AND '20240713' AND note1 LIKE '%IT서비스%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240701\", \"20240713\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%IT서비스%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 갖기 때문에 결과가 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240801' AND '20240808' AND note1 LIKE '%외주용역비%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240801\", \"20240808\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%외주용역비%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_trsc` 테이블에서 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241001' AND '20241027' AND note1 LIKE '%삼성SDS%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241001\", \"20241027\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%삼성SDS%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건문도 동일하게 설정되어 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT note1, COUNT(*) AS out_cnt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240224' AND '20240524' GROUP BY note1 ORDER BY out_cnt DESC LIMIT 1",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"out_cnt\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240224\", \"20240524\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"out_cnt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용할 수 없다는 오류가 발생하였으며, 이는 원본 SQL 쿼리의 동작을 제대로 반영하지 못하고 있음을 나타냅니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND bank_nm = '기업은행' AND trsc_dt BETWEEN '20240726' AND '20240826' AND note1 LIKE '%세금%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"bank_nm\",\n            \"op\": \"eq\",\n            \"value\": \"기업은행\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240726\", \"20240826\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%세금%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240201' AND '20240211' AND note1 LIKE '%해외출장비%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240201\", \"20240211\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%해외출장비%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건절도 동일한 논리를 따릅니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241128' AND '20241228' AND note1 LIKE '%직원교육비%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241128\", \"20241228\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%직원교육비%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240801' AND '20240825' AND note1 LIKE '%네이버클라우드%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240801\", \"20240825\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%네이버클라우드%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240601' AND '20240630' AND note1 LIKE '%기부금%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240601\", \"20240630\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%기부금%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN BETWEEN '20241009' AND '20241109' AND note1 LIKE '%보험료%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241009\", \"20241109\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%보험료%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리에서 `BETWEEN` 키워드가 두 번 사용된 원본 SQL 쿼리의 문법 오류가 수정되지 않았습니다. 원본 SQL 쿼리에서 `BETWEEN`이 두 번 반복되어 있으며, 이는 문법적으로 잘못된 표현입니다. 이 외에도 변환된 SQL 쿼리는 바인드 변수를 사용하고 있어 원본 SQL 쿼리와는 다소 차이가 있습니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240701' AND '20240729' AND note1 LIKE '%회식%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240701\", \"20240729\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%회식%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241213' AND '20250113' AND note1 LIKE '%광고%'  ORDER BY trsc_amt DESC LIMIT 1",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20241213\", \"20250113\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%광고%\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"trsc_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1 ORDER BY aicfo_get_all_trsc.trsc_amt DESC",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 정렬하며, 결과적으로 동일한 결과를 반환합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 쿼리의 동작은 일치합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240101' AND '20241231' AND note1 LIKE '%현대오토에버%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"출금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240101\", \"20241231\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%현대오토에버%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20231201' AND '20240101' AND note1 LIKE '%이자%'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"예적금\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"in_out_dv\",\n            \"op\": \"eq\",\n            \"value\": \"입금\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231201\", \"20240101\"]\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%이자%\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, COUNT(*) AS transaction_count FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240101' AND '20240107' GROUP BY note1, in_out_dv ORDER BY transaction_count DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"transaction_count\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240101\", \"20240107\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"transaction_count\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용할 수 없다는 오류가 발생하였으며, 이는 원본 SQL의 집계 함수와 그룹화 기능이 제대로 구현되지 않았음을 나타냅니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, COUNT(*) AS transaction_count FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20231214' AND '20240114' GROUP BY note1, in_out_dv ORDER BY transaction_count DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"transaction_count\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20231214\", \"20240114\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"transaction_count\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용한 부분이 \"Column '*' not found in Transaction\" 오류를 발생시키고 있어, 원본 SQL과 동일한 동작을 하지 않기 때문입니다."
    }
  },
  {
    "question": "SELECT note1, in_out_dv, COUNT(*) AS transaction_count FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240715' AND '20240717' GROUP BY note1, in_out_dv ORDER BY transaction_count DESC ",
    "answer": "{\n    \"select\": [\n        \"note1\",\n        \"in_out_dv\",\n        {\n            \"func\": \"count\",\n            \"column\": \"*\",\n            \"label\": \"transaction_count\"\n        }\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240715\", \"20240717\"]\n        }\n    ],\n    \"group_by\": [\n        \"note1\",\n        \"in_out_dv\"\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"transaction_count\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "Error: Column '*' not found in Transaction",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 \"COUNT(*)\"를 사용하려고 했지만, \"Column '*' not found in Transaction\" 오류가 발생하여 원본 SQL과 동일한 결과를 생성하지 못합니다."
    }
  },
  {
    "question": "SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND note1 LIKE '%박서정%' AND trsc_dt BETWEEN '20240405' AND '20240505'   ",
    "answer": "{\n    \"select\": [\n        \"bank_nm\",\n        \"acct_no\",\n        \"trsc_dt\",\n        \"trsc_tm\",\n        \"note1\",\n        \"in_out_dv\",\n        \"trsc_amt\",\n        \"trsc_bal\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"view_dv\",\n            \"op\": \"eq\",\n            \"value\": \"수시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"note1\",\n            \"op\": \"like\",\n            \"value\": \"%박서정%\"\n        },\n        {\n            \"column\": \"trsc_dt\",\n            \"op\": \"between\",\n            \"value\": [\"20240405\", \"20240505\"]\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal \nFROM aicfo_get_all_trsc \nWHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.note1 LIKE :note1_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성전자' AND curr_cd = 'KRW' AND reg_dt = '20240516'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성전자\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240516\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('삼성전자', 'KRW', '20240516')과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'SK하이닉스' AND curr_cd = 'KRW' AND reg_dt = '20240112'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"SK하이닉스\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240112\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('SK하이닉스', 'KRW', '20240112')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG에너지솔루션' AND curr_cd = 'KRW' AND reg_dt = '20240919'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"LG에너지솔루션\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240919\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('LG에너지솔루션', 'KRW', '20240919')과 동일한 의미를 가지므로, 쿼리의 동작은 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성바이오로직스' AND curr_cd = 'KRW' AND reg_dt = '20240613'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성바이오로직스\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240613\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('삼성바이오로직스', 'KRW', '20240613')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대차' AND curr_cd = 'KRW' AND reg_dt = '20240901'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"현대차\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240901\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('현대차', 'KRW', '20240901')과 같은 역할을 하므로, 쿼리의 동작은 동일합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '기아' AND curr_cd = 'KRW' AND reg_dt = '20240411'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"기아\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240411\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서는 바인딩 변수를 사용하고 있지만, 이는 실행 시점에 값이 대입되므로 원본 SQL과 동일한 결과를 생성합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG화학' AND curr_cd = 'KRW' AND reg_dt = '20250113'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"LG화학\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250113\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('LG화학', 'KRW', '20250113')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'NAVER' AND curr_cd = 'KRW' AND reg_dt = '20250113'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"NAVER\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250113\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('NAVER', 'KRW', '20250113')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '카카오' AND curr_cd = 'KRW' AND reg_dt = '20250113'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"카카오\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20250113\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('카카오', 'KRW', '20250113')과 동일한 역할을 하므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '포스코홀딩스' AND curr_cd = 'KRW' AND reg_dt = '20240101'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"포스코홀딩스\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240101\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('포스코홀딩스', 'KRW', '20240101')과 동일한 역할을 하므로, 쿼리의 동작은 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '셀트리온' AND curr_cd = 'KRW' AND reg_dt = '20240131'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"셀트리온\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240131\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('셀트리온', 'KRW', '20240131')과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'KB금융' AND curr_cd = 'KRW' AND reg_dt = '20240308'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"KB금융\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240308\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('KB금융', 'KRW', '20240308')과 같은 값을 대체할 수 있으므로, 쿼리의 동작은 동일합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '신한지주' AND curr_cd = 'KRW' AND reg_dt = '20240405'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"신한지주\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240405\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('신한지주', 'KRW', '20240405')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '한국전력' AND curr_cd = 'KRW' AND reg_dt = '20241001'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"한국전력\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241001\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('한국전력', 'KRW', '20241001')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '한화솔루션' AND curr_cd = 'KRW' AND reg_dt = '20241110'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"한화솔루션\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241110\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('한화솔루션', 'KRW', '20241110')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '두산에너빌리티' AND curr_cd = 'KRW' AND reg_dt = '20240108'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"두산에너빌리티\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240108\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 컬럼을 참조하고 있으며, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성SDI' AND curr_cd = 'KRW' AND reg_dt = '20240114'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성SDI\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240114\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('삼성SDI', 'KRW', '20240114')과 동일한 역할을 하므로, 쿼리의 동작은 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'HMM' AND curr_cd = 'KRW' AND reg_dt = '20240717'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"HMM\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240717\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서는 바인딩 변수를 사용하고 있지만, 이는 실행 시점에 값이 대입되므로 원본 SQL과 동일한 결과를 생성합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대모비스' AND curr_cd = 'KRW' AND reg_dt = '20240619'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"현대모비스\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240619\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('현대모비스', 'KRW', '20240619')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG전자' AND curr_cd = 'KRW' AND reg_dt = '20240928'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"LG전자\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240928\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('LG전자', 'KRW', '20240928')과 같은 역할을 하므로, 결과는 동일합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_cd = 'KRW' AND reg_dt = '20240505' AND bal_qunt >= 100   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240505\"\n        },\n        {\n            \"column\": \"bal_qunt\",\n            \"op\": \"ge\",\n            \"value\": 100\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(curr_cd, reg_dt, bal_qunt)을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:curr_cd_1, :reg_dt_1, :bal_qunt_1)는 원본 SQL의 상수 값('KRW', '20240505', 100)과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성전자' AND curr_cd = 'KRW' AND reg_dt = '20241119' AND bal_qunt > 50   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성전자\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241119\"\n        },\n        {\n            \"column\": \"bal_qunt\",\n            \"op\": \"gt\",\n            \"value\": 50\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.bal_qunt > :bal_qunt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_cd = 'KRW' AND reg_dt = '20240214' AND bal_qunt >= 100   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240214\"\n        },\n        {\n            \"column\": \"bal_qunt\",\n            \"op\": \"ge\",\n            \"value\": 100\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(curr_cd, reg_dt, bal_qunt)을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과도 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'NAVER' AND curr_cd = 'KRW' AND bal_qunt >= 150 AND reg_dt = '20241202'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"NAVER\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"bal_qunt\",\n            \"op\": \"ge\",\n            \"value\": 150\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241202\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_cd = 'KRW' AND trsc_amt >= (5*POWER(10,7)) AND reg_dt = '20240303'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"trsc_amt\",\n            \"op\": \"ge\",\n            \"value\": \"(5*POWER(10,7))\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240303\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'trsc_amt' not found in Stock",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'trsc_amt' 컬럼이 Stock 테이블에 존재하지 않기 때문에 원본 SQL 쿼리와 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (2*POWER(10,6)) AND curr_cd = 'KRW' AND reg_dt = '20240303'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"prchs_amt\",\n            \"op\": \"ge\",\n            \"value\": [2000000]\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240303\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG화학' AND curr_cd = 'KRW' AND prchs_amt > (5*POWER(10,6)) AND reg_dt = '20240316'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"LG화학\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"prchs_amt\",\n            \"op\": \"gt\",\n            \"value\": 5000000\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240316\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.prchs_amt > :prchs_amt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (3*POWER(10,6)) AND curr_cd = 'KRW' AND reg_dt = '20240321'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"prchs_amt\",\n            \"op\": \"ge\",\n            \"value\": [3000000]\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240321\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= POWER(10,7) AND curr_cd = 'KRW' AND return_rate > 10 AND reg_dt = '20240402'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"prchs_amt\",\n            \"op\": \"ge\",\n            \"value\": 10000000\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"gt\",\n            \"value\": 10\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240402\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대차' AND curr_cd = 'KRW' AND reg_dt = '20240417'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"현대차\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240417\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('현대차', 'KRW', '20240417')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate >= 5 AND curr_cd = 'KRW' AND reg_dt = '20240504'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"ge\",\n            \"value\": 5\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240504\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate >= 5, curr_cd = 'KRW', reg_dt = '20240504')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으며, SQLAlchemy에서 사용된 바인드 변수는 원본 쿼리의 상수 값과 동일한 의미를 가집니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성전자' AND curr_cd = 'KRW' AND return_rate >= 15 AND reg_dt = '20240713'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성전자\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"ge\",\n            \"value\": 15\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240713\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate <= -10 AND curr_cd = 'KRW' AND reg_dt = '20240808'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"le\",\n            \"value\": -10\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240808\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.return_rate <= :return_rate_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate <= -10, curr_cd = 'KRW', reg_dt = '20240808')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate >= 10 AND reg_dt = '20241027' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"ge\",\n            \"value\": 10\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241027\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate >= 10, reg_dt = '20241027', curr_cd = 'KRW')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate > 20 AND reg_dt = '20240524' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"gt\",\n            \"value\": 20\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240524\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate > 20, reg_dt = '20240524', curr_cd = 'KRW')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price >= POWER(10,7) AND reg_dt = '20240826' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_price\",\n            \"op\": \"ge\",\n            \"value\": {\n                \"func\": \"POWER\",\n                \"column\": \"10\",\n                \"label\": \"10^7\"\n            }\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240826\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(curr_price, reg_dt, curr_cd)을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:curr_price_1, :reg_dt_1, :curr_cd_1)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price > (2*POWER(10,7)) AND reg_dt = '20240211' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_price\",\n            \"op\": \"gt\",\n            \"value\": {\n                \"func\": \"multiply\",\n                \"args\": [\n                    2,\n                    {\n                        \"func\": \"power\",\n                        \"args\": [\n                            10,\n                            7\n                        ]\n                    }\n                ]\n            }\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240211\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.curr_price > :curr_price_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 열도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성바이오로직스' AND curr_price >= (5*POWER(10,7)) AND reg_dt = '20241228' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"삼성바이오로직스\"\n        },\n        {\n            \"column\": \"curr_price\",\n            \"op\": \"ge\",\n            \"value\": 50000000\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241228\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price >= (3*POWER(10,7)) AND prchs_amt <= (2*POWER(10,7)) AND reg_dt = '20240125' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_price\",\n            \"op\": \"ge\",\n            \"value\": \"(3*POWER(10,7))\"\n        },\n        {\n            \"column\": \"prchs_amt\",\n            \"op\": \"le\",\n            \"value\": \"(2*POWER(10,7))\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240125\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.prchs_amt <= :prchs_amt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대모비스' AND reg_dt = '20240630' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"현대모비스\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240630\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :reg_dt_1, :curr_cd_1)는 원본 SQL의 하드코딩된 값('현대모비스', '20240630', 'KRW')과 동일한 역할을 하므로, 쿼리의 동작은 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate >= 10 AND bal_qunt >= 50 AND reg_dt = '20241109' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"ge\",\n            \"value\": 10\n        },\n        {\n            \"column\": \"bal_qunt\",\n            \"op\": \"ge\",\n            \"value\": 50\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241109\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (5*POWER(10,6)) AND return_rate <= -5 AND reg_dt = '20240729' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"prchs_amt\",\n            \"op\": \"ge\",\n            \"value\": 5000000\n        },\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"le\",\n            \"value\": -5\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240729\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.return_rate <= :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price >= (2*POWER(10,7)) AND return_rate > 15 AND reg_dt = '20241016' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"curr_price\",\n            \"op\": \"ge\",\n            \"value\": \"(2*POWER(10,7))\"\n        },\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"gt\",\n            \"value\": 15\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241016\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG전자' AND bal_qunt >= 100 AND valu_gain_loss >= (5*POWER(10,6)) AND reg_dt = '20241016' AND curr_cd = 'KRW'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"LG전자\"\n        },\n        {\n            \"column\": \"bal_qunt\",\n            \"op\": \"ge\",\n            \"value\": 100\n        },\n        {\n            \"column\": \"valu_gain_loss\",\n            \"op\": \"ge\",\n            \"value\": [5000000]\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241016\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1 AND aicfo_get_all_stock.valu_gain_loss >= :valu_gain_loss_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (3*POWER(10,6)) AND return_rate > 20 AND reg_dt = '20240209' AND curr_cd = 'KRW'  ORDER BY appr_amt DESC LIMIT 1",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"prchs_amt\",\n            \"op\": \"ge\",\n            \"value\": [3000000]\n        },\n        {\n            \"column\": \"return_rate\",\n            \"op\": \"gt\",\n            \"value\": 20\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240209\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        }\n    ],\n    \"order_by\": [\n        {\n            \"column\": \"appr_amt\",\n            \"direction\": \"desc\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 ORDER BY aicfo_get_all_stock.appr_amt DESC",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL 쿼리는 LIMIT 1이 누락되어 있어 결과의 개수가 다를 수 있습니다. 원본 쿼리는 조건에 맞는 결과 중에서 가장 높은 appr_amt를 가진 한 개의 결과만 반환하지만, 변환된 쿼리는 해당 조건을 만족하는 모든 결과를 반환할 수 있습니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE item_name LIKE '%주식%' AND curr_cd = 'KRW' AND reg_dt = '20241228'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"item_name\",\n            \"op\": \"like\",\n            \"value\": \"%주식%\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241228\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.item_name LIKE :item_name_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수(:item_name_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 리터럴 값('%주식%', 'KRW', '20241228')과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm= '웹케시' AND curr_cd = 'KRW' AND reg_dt = '20240125'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"웹케시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240125\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(stock_nm, curr_cd, reg_dt)을 사용하여 동일한 열(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로 결과는 일치합니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE item_name LIKE '%펀드%' AND curr_cd = 'KRW' AND reg_dt = '20240630'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchs_amt\",\n        \"appr_amt\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"item_name\",\n            \"op\": \"like\",\n            \"value\": \"%펀드%\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"eq\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20240630\"\n        }\n    ]\n}",
    "converted_question": "SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate \nFROM aicfo_get_all_stock \nWHERE aicfo_get_all_stock.item_name LIKE :item_name_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",
    "result": {
      "일치여부": "예",
      "의견": "두 쿼리는 동일한 조건을 사용하여 같은 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 조건과 일치하는 값을 참조하고 있습니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchase_amt_foreign, evaluation_amt_foreign, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE item_name LIKE '%주식%' AND curr_cd <> 'KRW' AND reg_dt = '20170317'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchase_amt_foreign\",\n        \"evaluation_amt_foreign\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"item_name\",\n            \"op\": \"like\",\n            \"value\": \"%주식%\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20170317\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'prchase_amt_foreign' not found in Stock",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'prchase_amt_foreign' 컬럼이 Stock 테이블에 존재하지 않아 오류가 발생하였으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
    }
  },
  {
    "question": "SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchase_amt_foreign, evaluation_amt_foreign, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm= '웹케시' AND curr_cd <> 'KRW' AND reg_dt = '20241007'   ",
    "answer": "{\n    \"select\": [\n        \"item_name\",\n        \"stock_nm\",\n        \"bal_qunt\",\n        \"prchs_price\",\n        \"curr_price\",\n        \"prchase_amt_foreign\",\n        \"evaluation_amt_foreign\",\n        \"valu_gain_loss\",\n        \"return_rate\"\n    ],\n    \"where\": [\n        {\n            \"column\": \"stock_nm\",\n            \"op\": \"eq\",\n            \"value\": \"웹케시\"\n        },\n        {\n            \"column\": \"curr_cd\",\n            \"op\": \"ne\",\n            \"value\": \"KRW\"\n        },\n        {\n            \"column\": \"reg_dt\",\n            \"op\": \"eq\",\n            \"value\": \"20241007\"\n        }\n    ]\n}",
    "converted_question": "Error: Column 'prchase_amt_foreign' not found in Stock",
    "result": {
      "일치여부": "아니오",
      "의견": "변환된 SQL에서 'prchase_amt_foreign' 컬럼이 'Stock' 테이블에 존재하지 않아 오류가 발생하였으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
    }
  }
]