[
  {
    "question": "24년 12월, 25년 1월, 25년 2월의 특수합금 재고 중 대강종이 특수합금이면서 실수요가명이 Space X, Ram Alloys, SPHERE POWER INC., United Performance Metals에 하나라도 해당되는 대상을 월별로 제품, 재공 중량은 톤, 금액은 억원 단위로 알려줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TYPE AS stock_type, ROUND(SUM(WGT) / POWER(10,3), 3) AS total_wgt_ton, ROUND(SUM(AMT) / POWER(10,8), 2) AS total_amt_billion FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28') AND IRN_LARGE_NM = '특수합금' AND REAL_CUST_NM IN ('Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals') GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TYPE.label('stock_type')",
        "func.round(func.sum(Table.WGT) / func.power(10, 3), 3).label('total_wgt_ton')",
        "func.round(func.sum(Table.AMT) / func.power(10, 8), 2).label('total_amt_billion')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])",
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.REAL_CUST_NM.in_(['Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "25년 1월, 25년 2월에 대한 대강종이 특수합금이고 R-order인 대상의 제품의 중량, 금액을 월별로 각각 알려줘. 중량은 톤, 금액은 억원 단위로 알려줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE IRN_LARGE_NM = '특수합금' AND R_ORDER = 'Y' AND BASE_YMD IN (DATE '2025-01-31', DATE '2025-02-28')GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT) / 1000.0.label('total_weight_ton')",
        "func.sum(Table.AMT) / 100000000.0.label('total_amount_won')"
      ],
      "conditions": [
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.R_ORDER == 'Y'",
        "Table.BASE_YMD.in_([func.date('2025-01-31'), func.date('2025-02-28')])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 9월 기준으로 SAP 대분류별 자재 중량을 중량이 큰 순으로 나열하세요.",
    "answer": "SELECT CAT_L1 AS `sap_category_l1`, SUM(WGT) AS `total_weight` FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' GROUP BY 1 ORDER BY `total_weight` DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.CAT_L1.label('sap_category_l1')",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09'"
      ],
      "group_by": [
        "Table.CAT_L1"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 달 자재 유형별 자재 중량과 금액을 원료 중량이 큰 순으로 표시하세요.",
    "answer": "SELECT MATL_TYPE_NM AS material_type_name, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) GROUP BY 1 ORDER BY total_weight DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.MATL_TYPE_NM.label('material_type_name')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))"
      ],
      "group_by": [
        "Table.MATL_TYPE_NM"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 재고 각각의 금액이 몇 원에서 몇 원으로 얼마나 줄었어? 제품, 재공, 원료 별로 증감을 보여줘",
    "answer": " SELECT TYPE AS category, SUM(CASE WHEN BASE_YMD = '2024-12-31' THEN AMT ELSE 0 END) AS amount_2024_12, SUM(CASE WHEN BASE_YMD = '2025-02-28' THEN AMT ELSE 0 END) AS amount_2025_02, SUM(CASE WHEN BASE_YMD = '2025-02-28' THEN AMT ELSE 0 END) - SUM(CASE WHEN BASE_YMD = '2024-12-31' THEN AMT ELSE 0 END) AS change_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-02-28') GROUP BY TYPE UNION ALL SELECT '원료' AS category, SUM(CASE WHEN BASE_YMD = '2024-12-31' THEN AMT ELSE 0 END) AS amount_2024_12, SUM(CASE WHEN BASE_YMD = '2025-02-28' THEN AMT ELSE 0 END) AS amount_2025_02, SUM(CASE WHEN BASE_YMD = '2025-02-28' THEN AMT ELSE 0 END) - SUM(CASE WHEN BASE_YMD = '2024-12-31' THEN AMT ELSE 0 END) AS change_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-02-28')",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE.label('category')",
        "func.sum(func.case([(Table.BASE_YMD == '2024-12-31', Table.AMT)], else_=0)).label('amount_2024_12')",
        "func.sum(func.case([(Table.BASE_YMD == '2025-02-28', Table.AMT)], else_=0)).label('amount_2025_02')",
        "func.sum(func.case([(Table.BASE_YMD == '2025-02-28', Table.AMT)], else_=0)) - func.sum(func.case([(Table.BASE_YMD == '2024-12-31', Table.AMT)], else_=0)).label('change_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-02-28'])"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 R-order 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) AND R_ORDER = 'Y' GROUP BY MONTH) SELECT MONTH, total_weight, total_amount FROM monthly_data ORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.current_date(), func.interval(6, 'MONTH'))",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 W-order 재고의 제품, 재공별 총 중량과 금액은?",
    "answer": "SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD = DATE '2025-02-28' AND PREQ_NO LIKE 'W%'GROUP BY TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.PREQ_NO.like('W%')"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 제품 중량이 몇 kg에서 몇 kg으로 얼마나 줄었어?",
    "answer": "SELECT '2024-12-31' AS base_date, SUM(WGT) AS total_weight_dec FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE TYPE = '제품' AND BASE_YMD = '2024-12-31' UNION ALL SELECT '2025-02-28' AS base_date, SUM(WGT) AS total_weight_feb FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE TYPE = '제품' AND BASE_YMD = '2025-02-28' ORDER BY base_date",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD.label('base_date')",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "Table.TYPE == '제품'",
        "Table.BASE_YMD.in_(['2024-12-31', '2025-02-28'])"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월 주여구분별, 대강종별 재고 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, ORD_TYPE, IRN_LARGE_NM, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD >= DATE_SUB(DATE '2025-05-11', INTERVAL 3 MONTH)GROUP BY MONTH, ORD_TYPE, IRN_LARGE_NMORDER BY MONTH, ORD_TYPE, IRN_LARGE_NM;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.ORD_TYPE",
        "Table.IRN_LARGE_NM",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-11'), func.interval(3, 'MONTH'))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ORD_TYPE",
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ORD_TYPE",
        "Table.IRN_LARGE_NM"
      ],
      "transformations": [
        {
          "column": "BASE_YMD",
          "transformation": "FORMAT_DATE('%Y-%m', BASE_YMD)"
        }
      ]
    }
  },
  {
    "question": "지난 6개월간 장기 제품 재고 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) AND TYPE = '제품' AND LONG_TYPE IN ('장기', '일몰') GROUP BY BASE_YMD)SELECT BASE_YMD, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-05'), func.interval(6, 'MONTH'))",
        "Table.TYPE == '제품'",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 6월 영업부문에 대해 영업본부별 장기재고의 중량과 금액을 보여주세요.",
    "answer": "SELECT (CASE WHEN TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트') THEN '영업1본부' WHEN TEAM_CUST_TY_NM IN ('봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀') THEN '영업2본부' WHEN TEAM_CUST_TY_NM IN ('STS수출영업팀', '공구강수출영업팀') THEN '영업3본부' WHEN TEAM_CUST_TY_NM IN ('탄합영업실') THEN '탄합영업실' END) AS team_headquarters, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-06' AND LONG_TYPE IN ('장기', '일몰') AND TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실') GROUP BY 1 ORDER BY 1"
  },
  {
    "question": "24년 9월 기준으로 팀별 제품 재고 중량을 중량이 큰 순으로 나열하세요.",
    "answer": "SELECT TEAM_CUST_TY_NM AS sales_team, SUM(WGT) AS total_weight FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' AND TYPE = '제품' GROUP BY 1 ORDER BY `합계_중량` DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TEAM_CUST_GRP_NM.label('sales_team')",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09'",
        "Table.TYPE == '제품'"
      ],
      "group_by": [
        "Table.TEAM_CUST_GRP_NM"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "소형압연 재공 중에서 STS 대강종에 대한 24년 5월 중량, 금액을 알려주세요.",
    "answer": "SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-05' AND FACTORY_TY = '소형압연' AND TYPE = '재공' AND SUBSTR(IRN_CODE, 1, 1) = 'S'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-05'",
        "Table.FACTORY_TY == '소형압연'",
        "Table.TYPE == '재공'",
        "Table.IRN_CODE.startswith('S')"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 합금철, 자가철스크랩, 구입스크랩 중량과 전월 대비 증감은?",
    "answer": "WITH current_month AS (SELECT GBN_L1, SUM(WGT) AS total_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND GBN_L1 IN ('합금철', '자가철', '구입 스크랩') GROUP BY GBN_L1), previous_month AS (SELECT GBN_L1, SUM(WGT) AS total_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND GBN_L1 IN ('합금철', '자가철', '구입 스크랩') GROUP BY GBN_L1)SELECT cm.GBN_L1, cm.total_weight AS current_weight, COALESCE(pm.total_weight, 0) AS previous_weight, cm.total_weight - COALESCE(pm.total_weight, 0) AS weight_changeFROM current_month cmLEFT JOIN previous_month pm ON cm.GBN_L1 = pm.GBN_L1ORDER BY cm.GBN_L1;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.GBN_L1",
        "func.sum(Table.WGT).label('current_weight')",
        "func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0).label('previous_weight')",
        "(func.sum(Table.WGT) - func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('weight_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.GBN_L1.in_(['합금철', '자가철', '구입 스크랩'])"
      ],
      "group_by": [
        "Table.GBN_L1"
      ],
      "order_by": [
        "Table.GBN_L1"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 연구소 요청 재고 중량 및 전월 대비 증감은?",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND R_ORDER = 'Y' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND R_ORDER = 'Y' GROUP BY TYPE)SELECT COALESCE(c.TYPE, p.TYPE) AS TYPE, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(p.total_weight, 0) AS previous_weight, (COALESCE(c.total_weight, 0) - COALESCE(p.total_weight, 0)) AS weight_changeFROM current_month_data cFULL OUTER JOIN previous_month_data p ON c.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, p.TYPE).label('TYPE')",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(p.total_weight, 0).label('previous_weight')",
        "(func.coalesce(c.total_weight, 0) - func.coalesce(p.total_weight, 0)).label('weight_change')"
      ],
      "conditions": [],
      "group_by": [],
      "order_by": [],
      "transformations": [
        {
          "column": "current_month_data",
          "transformation": "SELECT TYPE, SUM(WGT) AS total_weight FROM Table WHERE BASE_YMD == '2025-02-28' AND R_ORDER == 'Y' GROUP BY TYPE"
        },
        {
          "column": "previous_month_data",
          "transformation": "SELECT TYPE, SUM(WGT) AS total_weight FROM Table WHERE BASE_YMD == '2025-01-31' AND R_ORDER == 'Y' GROUP BY TYPE"
        }
      ]
    }
  },
  {
    "question": "제품 재고 기준으로 팀의 부문별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, (CASE WHEN TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실') THEN '영업부문' WHEN TEAM_CUST_TY_NM IN ('스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹', '메탈공정연구그룹', '스틸공정연구그룹', '타이타늄연구그룹') THEN '기술연구소' ELSE '기타' END) AS team_division, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) AND TYPE = '제품' GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "case().when(Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실']), '영업부문').when(Table.TEAM_CUST_TY_NM.in_(['스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹', '메탈공정연구그룹', '스틸공정연구그룹', '타이타늄연구그룹']), '기술연구소').otherwise('기타').label('team_division')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH')))",
        "Table.TYPE == '제품'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "case().when(Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실']), '영업부문').when(Table.TEAM_CUST_TY_NM.in_(['스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹', '메탈공정연구그룹', '스틸공정연구그룹', '타이타늄연구그룹']), '기술연구소').otherwise('기타')"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "case().when(Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실']), '영업부문').when(Table.TEAM_CUST_TY_NM.in_(['스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹', '메탈공정연구그룹', '스틸공정연구그룹', '타이타늄연구그룹']), '기술연구소').otherwise('기타')"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월의 총 자재 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY 1 ORDER BY 1",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "가장 최근의 제품 재고량을 팀별로 구분하여 비율로 알려주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TEAM_CUST_TY_NM AS sales_team, ROUND(SUM(WGT) / SUM(SUM(WGT)) OVER () * 100, 2) AS weight_ratio FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', (SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`)) AND TYPE = '제품' GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TEAM_CUST_GRP_NM.label('sales_team')",
        "func.round(func.sum(Table.WGT) / func.sum(func.sum(Table.WGT)).over() * 100, 2).label('weight_ratio')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.select(func.max(Table.BASE_YMD)).select_from(Table))",
        "Table.TYPE == '제품'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_GRP_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_GRP_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "합금철에 대해 일반합금철, 특수합금강으로 구분하여 3개월의 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, GBN_L2, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 = '합금철' AND FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH))GROUP BY MONTH, GBN_L2ORDER BY MONTH, GBN_L2;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.GBN_L2",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.GBN_L1 == '합금철'",
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.GBN_L2"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.GBN_L2"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7, 8, 9월의 원부원료 중량을 자재 아이템 별로 조회하세요. 월을 컬럼으로 전환한 후 아이템 별로 8월, 9월 기준 전월 대비 증감을 계산해 표시해주세요.",
    "answer": "WITH TEMP_INVEN AS ( SELECT MATL_NAME AS material_detail, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' THEN WGT ELSE 0 END) AS total_weight_2407, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN WGT ELSE 0 END) AS total_weight_2408, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' THEN WGT ELSE 0 END) AS total_weight_2409 FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' AND CAST(FORMAT_DATE('%m', BASE_YMD) AS INT64) BETWEEN 7 AND 9 GROUP BY 1)SELECT *, (`합계_중량_2408` - `합계_중량_2407`) AS weight_diff_2408, (`합계_중량_2409` - `합계_중량_2408`) AS weight_diff_2409, FROM TEMP_INVEN ORDER BY `자재내역`",
    "sqlalchemy": {
      "selected_columns": [
        "Table.MATL_NAME.label('material_detail')",
        "func.sum(case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.WGT).otherwise(0)).label('total_weight_2407')",
        "func.sum(case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT).otherwise(0)).label('total_weight_2408')",
        "func.sum(case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09', Table.WGT).otherwise(0)).label('total_weight_2409')",
        "(func.sum(case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT).otherwise(0)) - func.sum(case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.WGT).otherwise(0))).label('weight_diff_2408')",
        "(func.sum(case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09', Table.WGT).otherwise(0)) - func.sum(case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT).otherwise(0))).label('weight_diff_2409')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'",
        "func.cast(func.format_date('%m', Table.BASE_YMD), 'INT64').between(7, 9)"
      ],
      "group_by": [
        "Table.MATL_NAME"
      ],
      "order_by": [
        "Table.MATL_NAME"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월의 특수합금 합금철에 대해 자재의 중량과 금액을 표시해 주세요. 톤과 억원 단위로 표시해주세요.",
    "answer": "SELECT BASE_YMD, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_eonFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 = '합금철' AND GBN_SP = '특수합금' AND FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH))GROUP BY BASE_YMDORDER BY BASE_YMD DESC;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.WGT) / func.power(10, 3).label('total_weight_ton')",
        "func.sum(Table.AMT) / func.power(10, 8).label('total_amount_eon')"
      ],
      "conditions": [
        "Table.GBN_L1 == '합금철'",
        "Table.GBN_SP == '특수합금'",
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [
        "Table.BASE_YMD.desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 합금철, 자가철스크랩, 구입스크랩 중량과 전월 대비 증감은?",
    "answer": "WITH current_month AS (SELECT GBN_L1, GBN_L2, SUM(WGT) AS total_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND GBN_L1 IN ('합금철', '자가철', '구입 스크랩') GROUP BY GBN_L1,GBN_L2), previous_month AS (SELECT GBN_L1, GBN_L2, SUM(WGT) AS total_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND GBN_L1 IN ('합금철', '자가철', '구입 스크랩') GROUP BY GBN_L1,GBN_L2)SELECT COALESCE(c.GBN_L1, p.GBN_L1) AS GBN_L1, COALESCE(c.GBN_L2, p.GBN_L2) AS GBN_L2, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(p.total_weight, 0) AS previous_weight, COALESCE(c.total_weight, 0) - COALESCE(p.total_weight, 0) AS weight_changeFROM current_month cFULL OUTER JOIN previous_month p ON c.GBN_L1 = p.GBN_L1AND c.GBN_L2 = p.GBN_L2ORDER BY GBN_L1, GBN_L2;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.GBN_L1, p.GBN_L1).label('GBN_L1')",
        "func.coalesce(c.GBN_L2, p.GBN_L2).label('GBN_L2')",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(p.total_weight, 0).label('previous_weight')",
        "func.coalesce(c.total_weight, 0) - func.coalesce(p.total_weight, 0).label('weight_change')"
      ],
      "conditions": [
        "c.BASE_YMD == '2025-02-28'",
        "p.BASE_YMD == '2025-01-31'",
        "c.GBN_L1.in_(['합금철', '자가철', '구입 스크랩'])",
        "p.GBN_L1.in_(['합금철', '자가철', '구입 스크랩'])"
      ],
      "group_by": [
        "c.GBN_L1",
        "c.GBN_L2",
        "p.GBN_L1",
        "p.GBN_L2"
      ],
      "order_by": [
        "GBN_L1",
        "GBN_L2"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 재공 중량이 몇 kg에서 몇 kg으로 얼마나 줄었어?",
    "answer": "SELECT '2024-12-31' AS base_date, SUM(WGT) AS total_weight_dec FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE TYPE = '재공' AND BASE_YMD = '2024-12-31' UNION ALL SELECT '2025-02-28' AS base_date, SUM(WGT) AS total_weight_feb FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE TYPE = '재공' AND BASE_YMD = '2025-02-28' ORDER BY base_date"
  },
  {
    "question": "24년 8월 전체 재공을 대강종과 형상으로 구분하여 중량, 금액을 표시해주세요.",
    "answer": "SELECT IRN_LARGE_NM AS large_grade, SHAPE_TY AS shape_type, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '재공' AND BASE_YMD = DATE '2024-08-31'GROUP BY IRN_LARGE_NM, SHAPE_TYORDER BY large_grade, shape_type;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.IRN_LARGE_NM.label('large_grade')",
        "Table.SHAPE_TY.label('shape_type')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "Table.BASE_YMD == '2024-08-31'"
      ],
      "group_by": [
        "Table.IRN_LARGE_NM",
        "Table.SHAPE_TY"
      ],
      "order_by": [
        "Table.IRN_LARGE_NM",
        "Table.SHAPE_TY"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월에 재공품의 중량과 금액을 대강종별로 각각 보여줘.",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, IRN_CODE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28') AND TYPE = '재공' GROUP BY BASE_YMD,IRN_CODE)SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, CASE WHEN IRN_CODE LIKE 'S%' THEN '스테인레스강' WHEN IRN_CODE LIKE 'T%' THEN '공구강' WHEN IRN_CODE LIKE 'V%' THEN '특수합금강' WHEN IRN_CODE LIKE 'A%' THEN '탄소강' WHEN IRN_CODE LIKE 'B%' THEN '합금강' WHEN IRN_CODE LIKE 'C%' THEN '소입성보증강' WHEN IRN_CODE LIKE 'K%' THEN '베어링강' WHEN IRN_CODE LIKE 'M%' THEN '특수용도강' ELSE '기타' END AS GRADE, SUM(total_weight) AS total_weight, SUM(total_amount) AS total_amountFROM monthly_dataGROUP BY BASE_YMD, GRADEORDER BY BASE_YMD, GRADE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "case().when(Table.IRN_CODE.like('S%'), '스테인레스강')",
        "case().when(Table.IRN_CODE.like('T%'), '공구강')",
        "case().when(Table.IRN_CODE.like('V%'), '특수합금강')",
        "case().when(Table.IRN_CODE.like('A%'), '탄소강')",
        "case().when(Table.IRN_CODE.like('B%'), '합금강')",
        "case().when(Table.IRN_CODE.like('C%'), '소입성보증강')",
        "case().when(Table.IRN_CODE.like('K%'), '베어링강')",
        "case().when(Table.IRN_CODE.like('M%'), '특수용도강')",
        "case().otherwise('기타').label('GRADE')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "GRADE"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "GRADE"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 제품, 재공품, 원료 재고 중량과 금액 추이를 보여주세요",
    "answer": "WITH monthly_data AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD BETWEEN DATE '2024-11-01' AND DATE '2025-04-30' GROUP BY MONTH,TYPE UNION ALL SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, NULL AS TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD BETWEEN DATE '2024-11-01' AND DATE '2025-04-30' GROUP BY MONTH)SELECT MONTH, COALESCE(SUM(CASEWHEN TYPE = '제품' THEN total_weight END), 0) AS product_weight, COALESCE(SUM(CASEWHEN TYPE = '제품' THEN total_amount END), 0) AS product_amount, COALESCE(SUM(CASEWHEN TYPE = '재공' THEN total_weight END), 0) AS wip_weight, COALESCE(SUM(CASEWHEN TYPE = '재공' THEN total_amount END), 0) AS wip_amount, COALESCE(SUM(CASEWHEN TYPE IS NULL THEN total_weight END), 0) AS raw_material_weight, COALESCE(SUM(CASEWHEN TYPE IS NULL THEN total_amount END), 0) AS raw_material_amountFROM monthly_dataGROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.coalesce(func.sum(func.case().when(Table.DATA_TYPE == '제품', Table.WGT).label('product_weight')), 0)",
        "func.coalesce(func.sum(func.case().when(Table.DATA_TYPE == '제품', Table.AMT).label('product_amount')), 0)",
        "func.coalesce(func.sum(func.case().when(Table.DATA_TYPE == '재공', Table.WGT).label('wip_weight')), 0)",
        "func.coalesce(func.sum(func.case().when(Table.DATA_TYPE == '재공', Table.AMT).label('wip_amount')), 0)",
        "func.coalesce(func.sum(func.case().when(Table.DATA_TYPE == None, Table.WGT).label('raw_material_weight')), 0)",
        "func.coalesce(func.sum(func.case().when(Table.DATA_TYPE == None, Table.AMT).label('raw_material_amount')), 0)"
      ],
      "conditions": [
        "Table.BASE_YMD.between('2024-11-01', '2025-04-30')"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "R- ORDER를 재공과 제품으로 분류를 한 후 팀별로 24년 7월, 8월의 중량과 금액을 조회하세요. 월을 컬럼으로 표시하고 8월 기준으로 전월비를 계산해 표시하세요. 전월비 감소폭이 큰 순으로 팀을 나열해주세요.",
    "answer": "WITH TEMP_INVEN AS ( SELECT TYPE AS product_wip_type, TEAM_CUST_TY_NM AS sales_team, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' THEN WGT ELSE 0 END) AS 합계_중량_2407, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN WGT ELSE 0 END) AS 합계_중량_2408, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' THEN AMT ELSE 0 END) AS 합계_금액_2407, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN AMT ELSE 0 END) AS 합계_금액_2408 FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' AND CAST(FORMAT_DATE('%m', BASE_YMD) AS INT64) BETWEEN 7 AND 8 AND R_ ORDER = 'Y' GROUP BY 1, 2)SELECT *, (`합계_중량_2408` - `합계_중량_2407`) AS 중량_전월비, (`합계_금액_2408` - `합계_금액_2407`) AS 금액_전월비 FROM TEMP_INVEN ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE.label('product_wip_type')",
        "Table.TEAM_CUST_TY_NM.label('sales_team')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.WGT)], else_=0)).label('합계_중량_2407')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT)], else_=0)).label('합계_중량_2408')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.AMT)], else_=0)).label('합계_금액_2407')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.AMT)], else_=0)).label('합계_금액_2408')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'",
        "func.cast(func.format_date('%m', Table.BASE_YMD), Integer) >= 7",
        "func.cast(func.format_date('%m', Table.BASE_YMD), Integer) <= 8",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "Table.TYPE",
        "Table.TEAM_CUST_TY_NM"
      ],
      "order_by": [
        "Table.TYPE",
        "Table.TEAM_CUST_TY_NM"
      ],
      "transformations": [
        {
          "column": "합계_중량_2408",
          "transformation": "합계_중량_2408 - 합계_중량_2407"
        },
        {
          "column": "합계_금액_2408",
          "transformation": "합계_금액_2408 - 합계_금액_2407"
        }
      ]
    }
  },
  {
    "question": "24년 12월, 25년 1월, 2월의 총 재고자산 금액은 얼마인가요?",
    "answer": "SELECT BASE_YMD, SUM(AMT) AS total_amountFROM (SELECT BASE_YMD, AMT FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28') UNION ALL SELECT BASE_YMD, AMT FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28'))GROUP BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 8월 전체 합금철 자재를 중분류와 소분류로 구분하여 중량, 금액을 표시해주세요.",
    "answer": "SELECT GBN_L2 AS middle_class, GBN_L3 AS sub_class, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD = DATE '2024-08-31' AND GBN_L1 = '합금철'GROUP BY GBN_L2, GBN_L3ORDER BY middle_class, sub_class;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.GBN_L2.label('middle_class')",
        "Table.GBN_L3.label('sub_class')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2024-08-31'",
        "Table.GBN_L1 == '합금철'"
      ],
      "group_by": [
        "Table.GBN_L2",
        "Table.GBN_L3"
      ],
      "order_by": [
        "Table.GBN_L2",
        "Table.GBN_L3"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월 R-order 재고를 월별로 보여줘. 여기서 재고란 재공, 제품, 원료를 모두 포함이야.",
    "answer": "WITH product_wip_data AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(CASEWHEN R_ORDER = 'Y' THEN WGTELSE 0 END) AS R_order_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-01-31', '2025-02-28') AND (TYPE = '제품' OR TYPE = '재공') GROUP BY year_month), raw_material_data AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(WGT) AS R_order_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-01-31', '2025-02-28') AND (CAT_L1 = '합금철' OR CAT_L1 = '스크랩') GROUP BY year_month)SELECT year_month, SUM(R_order_weight) AS total_R_order_weightFROM (SELECT * FROM product_wip_data UNION ALL SELECT * FROM raw_material_data)GROUP BY year_monthORDER BY year_month;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "func.sum(case().when(Table.R_ORDER == 'Y', Table.WGT).otherwise(0)).label('R_order_weight')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])",
        "Table.TYPE.in_(['제품', '재공'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "year_month"
      ],
      "transformations": []
    }
  },
  {
    "question": "재공 중에서 주문재와 여재를 구분하여 전전월과 전월의 중량과 금액을 조회하세요. 월을 컬럼으로 배치하고 전월 대비 당월의 증감을 계산해 표시해 주세요.",
    "answer": "WITH TEMP_INVEN AS ( SELECT ORD_TYPE AS ORDER_type, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH)) THEN WGT ELSE 0 END) AS 합계_중량_전전월, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) THEN WGT ELSE 0 END) AS 합계_중량_전월, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH)) THEN AMT ELSE 0 END) AS 합계_금액_전전월, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) THEN AMT ELSE 0 END) AS 합계_금액_전월 FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE TYPE = '재공' AND ORD_TYPE IN ('주문재', '여재') GROUP BY 1)SELECT *, (`합계_중량_전월` - `합계_중량_전전월`) AS 중량_전월비, (`합계_금액_전월` - `합계_금액_전전월`) AS 금액_전월비 FROM TEMP_INVEN",
    "sqlalchemy": {
      "selected_columns": [
        "Table.ORD_TYPE",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(2, 'MONTH'))), Table.WGT)], else_=0)).label('합계_중량_전전월')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH'))), Table.WGT)], else_=0)).label('합계_중량_전월')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(2, 'MONTH'))), Table.AMT)], else_=0)).label('합계_금액_전전월')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH'))), Table.AMT)], else_=0)).label('합계_금액_전월')",
        "(func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH'))), Table.WGT)], else_=0)) - func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(2, 'MONTH'))), Table.WGT)], else_=0))).label('중량_전월비')",
        "(func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH'))), Table.AMT)], else_=0)) - func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(2, 'MONTH'))), Table.AMT)], else_=0))).label('금액_전월비')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "Table.ORD_TYPE.in_(['주문재', '여재'])"
      ],
      "group_by": [
        "Table.ORD_TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "자가철 스크랩에 대해 STS, 탄합강, 공구강, 특수합금강으로 구분하여 3개월의 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, GBN_L3 AS MATERIAL_TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 = '자가철' AND BASE_YMD >= DATE_SUB( (SELECT MAX(BASE_YMD)FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH) AND GBN_L3 IN ('STS', '탄합강', '공구강', '특수합금강')GROUP BY MONTH, MATERIAL_TYPEORDER BY MONTH DESC",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.GBN_L3.label('MATERIAL_TYPE')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.GBN_L1 == '자가철'",
        "Table.BASE_YMD >= func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH'))",
        "Table.GBN_L3.in_(['STS', '탄합강', '공구강', '특수합금강'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.GBN_L3"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 3분기의 합금철을 자재 코드별로 구분하여 보여주세요. 중량과 금액 모두 표시가 필요하며 단위는 각각 톤과 백만원입니다.",
    "answer": "SELECT MATL_CODE, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 6) AS total_amount_wonFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD BETWEEN DATE '2024-07-01' AND DATE '2024-09-30' AND GBN_L1 = '합금철'GROUP BY MATL_CODEORDER BY MATL_CODE",
    "sqlalchemy": {
      "selected_columns": [
        "Table.MATL_CODE",
        "func.sum(Table.WGT) / func.power(10, 3).label('total_weight_ton')",
        "func.sum(Table.AMT) / func.power(10, 6).label('total_amount_won')"
      ],
      "conditions": [
        "Table.BASE_YMD.between('2024-07-01', '2024-09-30')",
        "Table.GBN_L1 == '합금철'"
      ],
      "group_by": [
        "Table.MATL_CODE"
      ],
      "order_by": [
        "Table.MATL_CODE"
      ],
      "transformations": []
    }
  },
  {
    "question": "자재에 대해 구입스크랩, 자가철스크랩, 합금철, 구입소재로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT BASE_YMD, GBN_L1, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH)) AND GBN_L1 IN ('구입 스크랩', '자가철', '합금철', '구입소재 등')GROUP BY BASE_YMD, GBN_L1ORDER BY BASE_YMD, GBN_L1;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "Table.GBN_L1",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))",
        "Table.GBN_L1.in_(['구입 스크랩', '자가철', '합금철', '구입소재 등'])"
      ],
      "group_by": [
        "Table.BASE_YMD",
        "Table.GBN_L1"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "Table.GBN_L1"
      ],
      "transformations": []
    }
  },
  {
    "question": "25년 1월 재공 재고 총 중량",
    "answer": "SELECT SUM(WGT) AS total_wip_wgt FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE TYPE = '재공' AND FORMAT_DATE('%Y-%m', BASE_YMD) = '2025-01'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_wip_wgt')"
      ],
      "conditions": [
        "Table.DATA_TYPE == '재공'",
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2025-01'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 12월과 25년 3월에 대한 대강종이 특수합금이면서 R-order인 대상에 대해 재공과 제품의 중량을 월별로 각각 알려줘. 중량은 톤, 금액은 억원 단위로 보여줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, TYPE AS product_wip_type, SUM(WGT) / POWER(10, 3) AS weight_ton, SUM(AMT) / POWER(10, 8) AS amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-03-31') AND R_ORDER = 'Y' AND IRN_LARGE_NM = '특수합금'GROUP BY MONTH, product_wip_typeORDER BY MONTH, product_wip_type;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.TYPE.label('product_wip_type')",
        "func.sum(Table.WGT) / func.power(10, 3).label('weight_ton')",
        "func.sum(Table.AMT) / func.power(10, 8).label('amount_won')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-03-31'])",
        "Table.R_ORDER == 'Y'",
        "Table.IRN_LARGE_NM == '특수합금'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월에 장기 재공품의 중량과 금액을 대강종별로 각각 보여줘.",
    "answer": "SELECT (CASEWHEN SUBSTR(IRN_CODE, 1, 1) = 'S' THEN 'S(스테인레스강)'WHEN SUBSTR(IRN_CODE, 1, 1) = 'T' THEN 'T(공구강)'WHEN SUBSTR(IRN_CODE, 1, 1) = 'V' THEN 'V(특수합금강)'WHEN SUBSTR(IRN_CODE, 1, 1) = 'A' THEN 'A(탄소강)'WHEN SUBSTR(IRN_CODE, 1, 1) = 'B' THEN 'B(합금강)'WHEN SUBSTR(IRN_CODE, 1, 1) = 'C' THEN 'C(소입성보증강)'WHEN SUBSTR(IRN_CODE, 1, 1) = 'K' THEN 'K(베어링강)'WHEN SUBSTR(IRN_CODE, 1, 1) = 'M' THEN 'M(특수용도강)' END) AS steel_main_class, FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28') AND LONG_TYPE IN ('장기', '일몰') AND TYPE = '재공'GROUP BY steel_main_class, MONTHORDER BY MONTH, steel_main_class;",
    "sqlalchemy": {
      "selected_columns": [
        "case when func.substr(Table.IRN_CODE, 1, 1) == 'S' then 'S(스테인레스강)' when func.substr(Table.IRN_CODE, 1, 1) == 'T' then 'T(공구강)' when func.substr(Table.IRN_CODE, 1, 1) == 'V' then 'V(특수합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'A' then 'A(탄소강)' when func.substr(Table.IRN_CODE, 1, 1) == 'B' then 'B(합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'C' then 'C(소입성보증강)' when func.substr(Table.IRN_CODE, 1, 1) == 'K' then 'K(베어링강)' when func.substr(Table.IRN_CODE, 1, 1) == 'M' then 'M(특수용도강)' end.label('steel_main_class')",
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])",
        "Table.LONG_TYPE.in_(['장기', '일몰'])",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "case when func.substr(Table.IRN_CODE, 1, 1) == 'S' then 'S(스테인레스강)' when func.substr(Table.IRN_CODE, 1, 1) == 'T' then 'T(공구강)' when func.substr(Table.IRN_CODE, 1, 1) == 'V' then 'V(특수합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'A' then 'A(탄소강)' when func.substr(Table.IRN_CODE, 1, 1) == 'B' then 'B(합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'C' then 'C(소입성보증강)' when func.substr(Table.IRN_CODE, 1, 1) == 'K' then 'K(베어링강)' when func.substr(Table.IRN_CODE, 1, 1) == 'M' then 'M(특수용도강)' end",
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "case when func.substr(Table.IRN_CODE, 1, 1) == 'S' then 'S(스테인레스강)' when func.substr(Table.IRN_CODE, 1, 1) == 'T' then 'T(공구강)' when func.substr(Table.IRN_CODE, 1, 1) == 'V' then 'V(특수합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'A' then 'A(탄소강)' when func.substr(Table.IRN_CODE, 1, 1) == 'B' then 'B(합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'C' then 'C(소입성보증강)' when func.substr(Table.IRN_CODE, 1, 1) == 'K' then 'K(베어링강)' when func.substr(Table.IRN_CODE, 1, 1) == 'M' then 'M(특수용도강)' end"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 6개월간 장기 재공 재고 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) AND LONG_TYPE IN ('장기', '일몰') AND TYPE = '재공' GROUP BY MONTH)SELECT MONTH, total_weight, total_amountFROM monthly_dataORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.current_date(), func.interval(6, 'MONTH'))",
        "Table.LONG_TYPE.in_(['장기', '일몰'])",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "구입 스크랩에 대해 STS스크랩, 일반스크랩, 특수합금강으로 구분하여 3개월의 추이를 보여주세요.",
    "answer": "WITH latest_date AS (SELECT MAX(BASE_YMD) AS max_date FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), three_months_data AS (SELECT DATE_SUB(max_date, INTERVAL 2 MONTH) AS start_date, max_date AS end_date FROM latest_date)SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount, GBN_L2 AS scrap_typeFROM css_daquv.POC_RAW_MATERIAL_MONTHLY, three_months_dataWHERE BASE_YMD BETWEEN start_date AND end_date AND GBN_L1 = '구입 스크랩' AND GBN_L2 IN ('STS스크랩', '일반 스크랩', '특수합금 스크랩')GROUP BY BASE_YMD, GBN_L2ORDER BY BASE_YMD, GBN_L2;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "Table.GBN_L2.label('scrap_type')"
      ],
      "conditions": [
        "Table.BASE_YMD.between(three_months_data.start_date, three_months_data.end_date)",
        "Table.GBN_L1 == '구입 스크랩'",
        "Table.GBN_L2.in_(['STS스크랩', '일반 스크랩', '특수합금 스크랩'])"
      ],
      "group_by": [
        "Table.BASE_YMD",
        "Table.GBN_L2"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "Table.GBN_L2"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 6개월간 장기 재공품 재고 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) AND TYPE = '재공' AND LONG_TYPE IN ('장기', '일몰') GROUP BY BASE_YMD)SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.current_date(), func.interval(6, 'MONTH'))",
        "Table.TYPE == '재공'",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월에 대한 대강종이 특수합금인 재공에 대해서 제품성과 소재성으로 나눠서 중량과 금액을 알려줘. 중량은 톤, 금액은 억원 단위로 알려줘.",
    "answer": "SELECT BASE_YMD, ITEM_ACCOUNT, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '재공' AND IRN_LARGE_NM = '특수합금' AND BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28')GROUP BY BASE_YMD, ITEM_ACCOUNTORDER BY BASE_YMD, ITEM_ACCOUNT;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "Table.ITEM_ACCOUNT",
        "func.sum(Table.WGT) / func.power(10, 3).label('total_weight_ton')",
        "func.sum(Table.AMT) / func.power(10, 8).label('total_amount_won')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])"
      ],
      "group_by": [
        "Table.BASE_YMD",
        "Table.ITEM_ACCOUNT"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "Table.ITEM_ACCOUNT"
      ],
      "transformations": []
    }
  },
  {
    "question": "자재 중 우주항공용 자재에 대한 24년 5월 중량, 금액을 알려주세요.",
    "answer": "SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-05' AND CAT_L2 = '우주항공용'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-05'",
        "Table.CAT_L2 == '우주항공용'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "25년 1월 재공에서 수요가명이 '메탈제품연구그룹'이면서 R-order에 해당하는 대상만 총 중량과 금액을 알려줘",
    "answer": "SELECT SUM(WGT) AS total_wgt, SUM(AMT) AS total_amt FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE TYPE = '재공' AND FORMAT_DATE('%Y-%m', BASE_YMD) = '2025-01' AND R_ORDER = 'Y' AND CUST_NM = '메탈제품연구그룹'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_wgt')",
        "func.sum(Table.AMT).label('total_amt')"
      ],
      "conditions": [
        "Table.DATA_TYPE == '재공'",
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2025-01'",
        "Table.R_ORDER == 'Y'",
        "Table.CUST_NM == '메탈제품연구그룹'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월의 특수합금 제품 재고 중 대강종이 특수합금이면서 실수요가명이 Space X, Ram Alloys, SPHERE POWER INC., United Performance Metals에 하나라도 해당되는 대상을 월별로 중량은 톤, 금액은 억원 단위로 알려줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '제품' AND IRN_LARGE_NM = '특수합금' AND REAL_CUST_NM IN ('Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals') AND BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28')GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT) / 1000.0.label('total_weight_ton')",
        "func.sum(Table.AMT) / 100000000.0.label('total_amount_won')"
      ],
      "conditions": [
        "Table.TYPE == '제품'",
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.REAL_CUST_NM.in_(['Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'])",
        "Table.BASE_YMD.in_([func.date('2024-12-31'), func.date('2025-01-31'), func.date('2025-02-28')])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 2월의 총 재고자산 금액은 얼마인가요?",
    "answer": "WITH product_wip_data AS ( SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS month, SUM(AMT) AS total_amt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-01-31', '2025-02-28') GROUP BY month ), raw_material_data AS ( SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS month, SUM(AMT) AS total_amt FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-01-31', '2025-02-28') GROUP BY month ), combined_data AS ( SELECT '제품/재공' AS category, month, total_amt FROM product_wip_data UNION ALL SELECT '원료' AS category, month, total_amt FROM raw_material_data ) SELECT month, category, ROUND(total_amt / 100000000, 2) AS amount_billion_won FROM combined_data ORDER BY month, category",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('month')",
        "Table.DATA_TYPE.label('category')",
        "func.round(func.sum(Table.AMT) / 100000000, 2).label('amount_billion_won')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.DATA_TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.DATA_TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 제품, 재공, 원료 재고 금액과 중량, 그리고 전월 대비 증감액은 얼마인가?",
    "answer": "WITH product_data AS (SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '제품'), wip_data AS (SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '재공'), raw_material_data AS (SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28'), previous_product_data AS (SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND TYPE = '제품'), previous_wip_data AS (SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND TYPE = '재공'), previous_raw_material_data AS (SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-01-31')SELECT '제품' AS category, p.total_weight, p.total_amount, (p.total_amount - COALESCE(pp.total_amount, 0)) AS amount_changeFROM product_data pJOIN previous_product_data pp ON TRUEUNION ALLSELECT '재공' AS category, w.total_weight, w.total_amount, (w.total_amount - COALESCE(pw.total_amount, 0)) AS amount_changeFROM wip_data wJOIN previous_wip_data pw ON TRUEUNION ALLSELECT '원료' AS category, r.total_weight, r.total_amount, (r.total_amount - COALESCE(pr.total_amount, 0)) AS amount_changeFROM raw_material_data rJOIN previous_raw_material_data pr ON TRUE;"
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월 원료중에서 대분류 합금철의 특수 합금철, 대분류 자가철의 특수합금강, 대분류 구입 스크랩의 특수합금 스크랩 별로 중량, 금액을 월별로 각각 알려줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(CASE WHEN GBN_L1 = '합금철' AND GBN_L2 = '특수 합금철' THEN WGT ELSE 0 END) AS special_alloy_weight, SUM(CASE WHEN GBN_L1 = '합금철' AND GBN_L2 = '특수 합금철' THEN AMT ELSE 0 END) AS special_alloy_amount, SUM(CASE WHEN GBN_L1 = '자가철' AND GBN_L2 = '특수합금강' THEN WGT ELSE 0 END) AS special_alloy_steel_weight, SUM(CASE WHEN GBN_L1 = '자가철' AND GBN_L2 = '특수합금강' THEN AMT ELSE 0 END) AS special_alloy_steel_amount, SUM(CASE WHEN GBN_L1 = '구입 스크랩' AND GBN_L2 = '특수합금 스크랩' THEN WGT ELSE 0 END) AS special_scrap_weight, SUM(CASE WHEN GBN_L1 = '구입 스크랩' AND GBN_L2 = '특수합금 스크랩' THEN AMT ELSE 0 END) AS special_scrap_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28')GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(case().when(Table.GBN_L1 == '합금철').when(Table.GBN_L2 == '특수 합금철', Table.WGT).otherwise(0)).label('special_alloy_weight')",
        "func.sum(case().when(Table.GBN_L1 == '합금철').when(Table.GBN_L2 == '특수 합금철', Table.AMT).otherwise(0)).label('special_alloy_amount')",
        "func.sum(case().when(Table.GBN_L1 == '자가철').when(Table.GBN_L2 == '특수합금강', Table.WGT).otherwise(0)).label('special_alloy_steel_weight')",
        "func.sum(case().when(Table.GBN_L1 == '자가철').when(Table.GBN_L2 == '특수합금강', Table.AMT).otherwise(0)).label('special_alloy_steel_amount')",
        "func.sum(case().when(Table.GBN_L1 == '구입 스크랩').when(Table.GBN_L2 == '특수합금 스크랩', Table.WGT).otherwise(0)).label('special_scrap_weight')",
        "func.sum(case().when(Table.GBN_L1 == '구입 스크랩').when(Table.GBN_L2 == '특수합금 스크랩', Table.AMT).otherwise(0)).label('special_scrap_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-01-31', '2025-02-28'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 본부별 제품 재고 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, TEAM_CUST_TY_NM, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) AND BASE_YMD < DATE '2025-05-01' AND TYPE = '제품' GROUP BY MONTH, TEAM_CUST_TY_NM) SELECT MONTH, TEAM_CUST_TY_NM, total_weight, total_amount FROM monthly_data ORDER BY MONTH, TEAM_CUST_TY_NM;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.TEAM_CUST_TY_NM",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-05'), func.interval(6, 'MONTH'))",
        "Table.BASE_YMD < func.date('2025-05-01')",
        "Table.TYPE == '제품'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_TY_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_TY_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "가장 최근 월의 제품 재고에 대해 전체 중량을 표시하고 판매팀별로도 표시하되 본부를 구분하여 표시해주세요. 팀은 중량순으로 내림차순해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(SUM(WGT)) OVER () AS total_all_weight, (CASE WHEN TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트') THEN '영업1본부' WHEN TEAM_CUST_TY_NM IN ('봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀') THEN '영업2본부' WHEN TEAM_CUST_TY_NM IN ('STS수출영업팀', '공구강수출영업팀') THEN '영업3본부' WHEN TEAM_CUST_TY_NM IN ('탄합영업실') THEN '탄합영업실' WHEN TEAM_CUST_TY_NM IN ('스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹') THEN '제품연구센터' WHEN TEAM_CUST_TY_NM IN ('메탈공정연구그룹', '스틸공정연구그룹') THEN '공정연구센터' WHEN TEAM_CUST_TY_NM IN ('타이타늄연구그룹', '기능소재연구그룹') THEN '선도기술연구센터' WHEN TEAM_CUST_TY_NM IN ('CS팀') THEN 'CS팀' ELSE '품질생산등' END) AS team_headquarters, TEAM_CUST_TY_NM AS sales_team, SUM(WGT) AS total_weight FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', (SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`)) AND TYPE = '제품' GROUP BY 1, 3, 4 ORDER BY 1, 3, `합계_중량` DESC"
  },
  {
    "question": "제품 재고 기준으로 영업부문에 대해 팀별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TEAM_CUST_TY_NM AS sales_team, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) AND TYPE = '제품' AND TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실') GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TEAM_CUST_TY_NM.label('sales_team')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH')))",
        "Table.TYPE == '제품'",
        "Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_TY_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_TY_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "장기재고(제품, 재공)을 24년 1월부터 월별로 장기, 일몰을 구분하여 표시해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, LONG_TYPE AS long_type, SUM(WGT) AS total_weight FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= '2024-01' AND LONG_TYPE IN ('장기', '일몰') GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.LONG_TYPE",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= '2024-01'",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.LONG_TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.LONG_TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7, 8, 9월 자재를 평가클래스별로 나눠 중량, 금액을 보여주세요. 전체의 평균 값도 같이 표시해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, CLASS_NM AS eval_class_detail, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount, ROUND(AVG(SUM(WGT)) OVER (), 2) AS avg_weight, ROUND(AVG(SUM(AMT)) OVER (), 2) AS avg_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' AND CAST(FORMAT_DATE('%m', BASE_YMD) AS INT64) IN (7, 8 ,9)GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.CLASS_NM.label('eval_class_detail')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "func.round(func.avg(func.sum(Table.WGT)).over(), 2).label('avg_weight')",
        "func.round(func.avg(func.sum(Table.AMT)).over(), 2).label('avg_amount')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'",
        "func.cast(func.format_date('%m', Table.BASE_YMD), 'INT64').in_([7, 8, 9])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CLASS_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CLASS_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "자재 중에서 Cathode Ni의 24년 월별 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE MATL_NAME LIKE '%Cathode Ni%' AND FORMAT_DATE('%Y', BASE_YMD) = '2024'GROUP BY MONTHORDER BY MONTH",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.MATL_NAME.like('%Cathode Ni%')",
        "func.format_date('%Y', Table.BASE_YMD) == '2024'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "25년 1월, 25년 2월에 대한 대강종이 특수합금이고 R-order인 대상의 제품의 중량, 금액을 월별로 각각 알려줘. 중량은 톤, 금액은 억원 단위로 알려줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE (FORMAT_DATE('%Y-%m', BASE_YMD) = '2025-01' OR FORMAT_DATE('%Y-%m', BASE_YMD) = '2025-02') AND IRN_LARGE_NM = '특수합금' AND R_ORDER = 'Y'GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT) / 1000.0.label('total_weight_ton')",
        "func.sum(Table.AMT) / 100000000.0.label('total_amount_won')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_([func.date('2025-01-01'), func.date('2025-02-01')])",
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월의 특수합금 재고 중 대강종이 특수합금이면서 실수요가명이 Space X, Ram Alloys, SPHERE POWER INC., United Performance Metals에 하나라도 해당되는 대상을 월별로 제품, 재공 중량은 톤, 금액은 억원 단위로 알려줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(CASE WHEN TYPE = '제품' THEN WGT ELSE 0 END) / POWER(10, 3) AS product_weight_ton, SUM(CASE WHEN TYPE = '재공' THEN WGT ELSE 0 END) / POWER(10, 3) AS wip_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE GBN_SS = '특수합금' AND IRN_LARGE_NM = '특수합금' AND CUST_NM IN ('Space X','Ram Alloys','SPHERE POWER INC.','United Performance Metals') AND BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28')GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(func.case().when(Table.TYPE == '제품', Table.WGT).otherwise(0)).label('product_weight_ton')",
        "func.sum(func.case().when(Table.TYPE == '재공', Table.WGT).otherwise(0)).label('wip_weight_ton')",
        "func.sum(Table.AMT).label('total_amount_won')"
      ],
      "conditions": [
        "Table.GBN_SS == '특수합금'",
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.CUST_NM.in_(['Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'])",
        "Table.BASE_YMD.in_([func.date('2024-12-31'), func.date('2025-01-31'), func.date('2025-02-28')])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 재공 재고의 소재성과 제품성 구분별 중량과 전월 대비 증감 보여줘",
    "answer": "WITH monthly_data AS (SELECT ITEM_ACCOUNT, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '재공' GROUP BY ITEM_ACCOUNT), previous_month_data AS (SELECT ITEM_ACCOUNT, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND TYPE = '재공' GROUP BY ITEM_ACCOUNT)SELECT m.ITEM_ACCOUNT, m.total_weight, (m.total_weight - COALESCE(p.total_weight, 0)) AS weight_changeFROM monthly_data mLEFT JOIN previous_month_data p ON m.ITEM_ACCOUNT = p.ITEM_ACCOUNT;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.ITEM_ACCOUNT",
        "func.sum(Table.WGT).label('total_weight')",
        "(func.sum(Table.WGT) - func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('weight_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "Table.ITEM_ACCOUNT"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 1월부터 12월까지 대강종이 특수합금인 재공과 제품을 각각 월별로 전체중량, 금액을 나타내주고 그중에 장기재고의 중량과, 금액도 별도로 표시해줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TYPE AS type, SUM(WGT) AS total_wgt, SUM(AMT) AS total_amt, SUM(CASE WHEN PASS_MONTH >= 6 THEN WGT ELSE 0 END) AS long_term_wgt, SUM(CASE WHEN PASS_MONTH >= 6 THEN AMT ELSE 0 END) AS long_term_amt FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE BASE_YMD BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND SUBSTR(IRN_CODE, 1, 1) = 'V' GROUP BY year_month, TYPE ORDER BY year_month, TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_wgt')",
        "func.sum(Table.AMT).label('total_amt')",
        "func.sum(func.case([(Table.PASS_MONTH >= 6, Table.WGT)], else_=0)).label('long_term_wgt')",
        "func.sum(func.case([(Table.PASS_MONTH >= 6, Table.AMT)], else_=0)).label('long_term_amt')"
      ],
      "conditions": [
        "Table.BASE_YMD.between(func.date('2024-01-01'), func.date('2024-12-31'))",
        "Table.IRN_CODE.startswith('V')"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "자재 중에서 Fe-Ni의 24년 월별 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD >= DATE '2024-01-01' AND BASE_YMD <= DATE '2024-12-31' AND LOWER(MATL_NAME) LIKE '%fe-ni%'GROUP BY MONTHORDER BY MONTH",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date('2024-01-01')",
        "Table.BASE_YMD <= func.date('2024-12-31')",
        "Table.MATL_NAME.ilike('%fe-ni%')"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "2제강 공장의 24년 8월 재공에 대해서 강종 대분류 기준으로 분류하여 중량과 금액을 표시해주세요.",
    "answer": "SELECT IRN_LARGE_NM AS large_grade, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '재공' AND FACTORY_TY = '2제강' AND BASE_YMD = DATE '2024-08-31'GROUP BY IRN_LARGE_NMORDER BY large_grade;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.IRN_LARGE_NM.label('large_grade')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "Table.FACTORY_TY == '2제강'",
        "Table.BASE_YMD == func.date('2024-08-31')"
      ],
      "group_by": [
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "Table.IRN_LARGE_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "자재에 대해 SAP 대분류 별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS `year_month`, CAT_L1 AS `sap_category_l1`, SUM(WGT) AS `total_weight`, SUM(AMT) AS `total_amount` FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.CAT_L1.label('sap_category_l1')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CAT_L1"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CAT_L1"
      ],
      "transformations": []
    }
  },
  {
    "question": "소형압연 재공 중에서 STS 선재에 대한 24년 5월 중량, 금액을 알려주세요.",
    "answer": "SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-05' AND FACTORY_TY = '소형압연' AND TYPE = '재공' AND SHAPE_TY = 'STS선재'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-05'",
        "Table.FACTORY_TY == '소형압연'",
        "Table.TYPE == '재공'",
        "Table.SHAPE_TY == 'STS선재'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "합금철 중에서 특수합금 합금철에 대한 24년 분기별 추이를 보여주세요.",
    "answer": "SELECT CONCAT(EXTRACT(YEAR FROM BASE_YMD), '-Q', CAST(CEIL(EXTRACT(MONTH FROM BASE_YMD) / 3.0) AS STRING)) AS QUARTER, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 = '합금철' AND GBN_L2 = '특수 합금철' AND BASE_YMD >= DATE '2024-01-01' AND BASE_YMD <= DATE '2024-12-31'GROUP BY QUARTERORDER BY QUARTER;",
    "sqlalchemy": {
      "selected_columns": [
        "func.concat(func.extract('YEAR', Table.BASE_YMD), '-Q', func.cast(func.ceil(func.extract('MONTH', Table.BASE_YMD) / 3.0), String)).label('QUARTER')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.GBN_L1 == '합금철'",
        "Table.GBN_L2 == '특수 합금철'",
        "Table.BASE_YMD >= func.date('2024-01-01')",
        "Table.BASE_YMD <= func.date('2024-12-31')"
      ],
      "group_by": [
        "func.concat(func.extract('YEAR', Table.BASE_YMD), '-Q', func.cast(func.ceil(func.extract('MONTH', Table.BASE_YMD) / 3.0), String))"
      ],
      "order_by": [
        "func.concat(func.extract('YEAR', Table.BASE_YMD), '-Q', func.cast(func.ceil(func.extract('MONTH', Table.BASE_YMD) / 3.0), String))"
      ],
      "transformations": []
    }
  },
  {
    "question": "제품 재고 기준으로 R- ORDER 센터에 대해 센터별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, (CASE WHEN TEAM_CUST_TY_NM IN ('스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹') THEN '제품연구센터' WHEN TEAM_CUST_TY_NM IN ('메탈공정연구그룹', '스틸공정연구그룹') THEN '공정연구센터' WHEN TEAM_CUST_TY_NM IN ('타이타늄연구그룹', '기능소재연구그룹') THEN '선도기술연구센터' END) AS research_center, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) AND TYPE = '제품' AND R_ ORDER = 'Y' AND TEAM_CUST_TY_NM IN ('스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹', '메탈공정연구그룹', '스틸공정연구그룹', '타이타늄연구그룹', '기능소재연구그룹') GROUP BY 1, 2 ORDER BY 1, 2"
  },
  {
    "question": "지난 달 총 자재 중량과 금액을 표시하세요.",
    "answer": "SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH))",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "전월 제품 재고 중 가장 중량이 많은 사내강종에 대해 사내강종명과 장기재고 중량은 얼마인지 알려주세요.",
    "answer": "SELECT IRN_NAME AS internal_grade_name, SUM(WGT) AS total_weight, SUM(CASE WHEN LONG_TYPE IN ('장기', '일몰') THEN WGT ELSE 0 END) AS total_long_weight FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) AND TYPE = '제품' GROUP BY 1 ORDER BY `total_weight` DESC LIMIT 1",
    "sqlalchemy": {
      "selected_columns": [
        "Table.IRN_NAME.label('internal_grade_name')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(func.case([(Table.LONG_TYPE.in_(['장기', '일몰']), Table.WGT)], else_=0)).label('total_long_weight')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))",
        "Table.TYPE == '제품'"
      ],
      "group_by": [
        "Table.IRN_NAME"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 2분기의 자가철 스크랩 중량과 금액을 표시하고 특수합금만 따로 표시해주세요.",
    "answer": "SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount, SUM(CASE WHEN GBN_SP = '특수합금' THEN WGT ELSE 0 END) AS special_alloy_weight, SUM(CASE WHEN GBN_SP = '특수합금' THEN AMT ELSE 0 END) AS special_alloy_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE FORMAT_DATE('%Y-%m', BASE_YMD) BETWEEN '2024-04' AND '2024-06' AND GBN_L1 = '자가철'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "func.sum(func.case([(Table.GBN_SP == '특수합금', Table.WGT)], else_=0)).label('special_alloy_weight')",
        "func.sum(func.case([(Table.GBN_SP == '특수합금', Table.AMT)], else_=0)).label('special_alloy_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD).between('2024-04', '2024-06')",
        "Table.GBN_L1 == '자가철'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 9월 전체 제품 재고 중에서 STS 대강종에 대해 전체 중량과 금액을 천톤, 억원 단위로 나타내고 사내강종별로 중량 기준 내림차순으로 보여주세요.",
    "answer": "SELECT ROUND(SUM(SUM(WGT)) OVER () / 1000000, 2) AS total_weight_thousand_ton, ROUND(SUM(SUM(AMT)) OVER () / 100000000, 2) AS total_amount_billion, IRN_NAME AS internal_grade_name, SUM(WGT) AS total_weight_by_grade FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' AND TYPE = '제품' AND SUBSTR(IRN_CODE, 1, 1) = 'S' GROUP BY `internal_grade_name` ORDER BY `total_weight_by_grade` DESC",
    "sqlalchemy": {
      "selected_columns": [
        "func.round(func.sum(func.sum(Table.WGT)).over() / 1000000, 2).label('total_weight_thousand_ton')",
        "func.round(func.sum(func.sum(Table.AMT)).over() / 100000000, 2).label('total_amount_billion')",
        "Table.IRN_NAME.label('internal_grade_name')",
        "func.sum(Table.WGT).label('total_weight_by_grade')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09'",
        "Table.TYPE == '제품'",
        "Table.IRN_CODE.substr(0, 1) == 'S'"
      ],
      "group_by": [
        "Table.IRN_NAME"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7월 제품 재고에 대해 장기재고가 총 몇 톤인지 표시하고 장기재고에 해당되는 대상들을 체공월수가 작은 순으로 표시해주세요.",
    "answer": "SELECT ROUND(SUM(WGT) OVER () / 1000, 2) AS total_weight_ton, PASS_MONTH AS elapsed_month, BATCH_ID AS batch_id, LOT_NO AS pon_lot, BUNDLE AS bundle, WGT AS weight FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' AND TYPE = '제품' AND LONG_TYPE IN ('장기', '일몰') ORDER BY `경과개월`",
    "sqlalchemy": {
      "selected_columns": [
        "func.round(func.sum(Table.WGT).over() / 1000, 2).label('total_weight_ton')",
        "Table.PASS_MONTH.label('elapsed_month')",
        "Table.BATCH_ID.label('batch_id')",
        "Table.LOT_NO.label('pon_lot')",
        "Table.BUNDLE.label('bundle')",
        "Table.WGT.label('weight')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07'",
        "Table.TYPE == '제품'",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "Table.PASS_MONTH",
        "Table.BATCH_ID",
        "Table.LOT_NO",
        "Table.BUNDLE",
        "Table.WGT"
      ],
      "order_by": [
        "Table.PASS_MONTH"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 연구소 요청 재고 중량 및 전월 대비 증감은?",
    "answer": "WITH current_month AS ( SELECT GBN_NAME, ITEM_ACCOUNT, TYPE, SUM(WGT) as current_month_wgt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-02-28' AND R_ORDER = 'Y' GROUP BY GBN_NAME, ITEM_ACCOUNT, TYPE ), previous_month AS ( SELECT GBN_NAME, ITEM_ACCOUNT, TYPE, SUM(WGT) as previous_month_wgt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-01-31' AND R_ORDER = 'Y' GROUP BY GBN_NAME, ITEM_ACCOUNT, TYPE ) SELECT COALESCE(cm.GBN_NAME, pm.GBN_NAME) as GBN_NAME, COALESCE(cm.ITEM_ACCOUNT, pm.ITEM_ACCOUNT) as ITEM_ACCOUNT, COALESCE(cm.TYPE, pm.TYPE) as TYPE, cm.current_month_wgt as feb_wgt, pm.previous_month_wgt as jan_wgt, COALESCE(cm.current_month_wgt, 0) - COALESCE(pm.previous_month_wgt, 0) as weight_change, CASE WHEN COALESCE(pm.previous_month_wgt, 0) = 0 THEN NULL ELSE ROUND((COALESCE(cm.current_month_wgt, 0) - pm.previous_month_wgt) / pm.previous_month_wgt * 100, 2) END as change_percentage FROM current_month cm FULL OUTER JOIN previous_month pm ON cm.GBN_NAME = pm.GBN_NAME AND cm.ITEM_ACCOUNT = pm.ITEM_ACCOUNT AND cm.TYPE = pm.TYPE ORDER BY GBN_NAME, ITEM_ACCOUNT, TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(Table.GBN_NAME, Table.GBN_NAME).label('GBN_NAME')",
        "func.coalesce(Table.ITEM_ACCOUNT, Table.ITEM_ACCOUNT).label('ITEM_ACCOUNT')",
        "func.coalesce(Table.TYPE, Table.TYPE).label('TYPE')",
        "func.coalesce(Table.current_month_wgt, 0).label('feb_wgt')",
        "func.coalesce(Table.previous_month_wgt, 0).label('jan_wgt')",
        "(func.coalesce(Table.current_month_wgt, 0) - func.coalesce(Table.previous_month_wgt, 0)).label('weight_change')",
        "func.case().when(func.coalesce(Table.previous_month_wgt, 0) == 0, None).else_((func.round((func.coalesce(Table.current_month_wgt, 0) - Table.previous_month_wgt) / Table.previous_month_wgt * 100, 2))).label('change_percentage')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "Table.GBN_NAME",
        "Table.ITEM_ACCOUNT",
        "Table.TYPE"
      ],
      "order_by": [
        "Table.GBN_NAME",
        "Table.ITEM_ACCOUNT",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월과 25년 3월에 대한 대강종이 특수합금이면서 R-order인 대상에 대해 재공과 제품의 중량을 월별로 각각 알려줘. 중량은 톤, 금액은 억원 단위로 보여줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(CASE WHEN TYPE = '제품' THEN WGT ELSE 0 END) / POWER(10, 3) AS product_weight_ton, SUM(CASE WHEN TYPE = '재공' THEN WGT ELSE 0 END) / POWER(10, 3) AS wip_weight_ton, SUM(CASE WHEN TYPE = '제품' THEN AMT ELSE 0 END) / POWER(10, 8) AS product_amount_won, SUM(CASE WHEN TYPE = '재공' THEN AMT ELSE 0 END) / POWER(10, 8) AS wip_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-03-31') AND IRN_LARGE_NM = '특수합금' AND R_ORDER = 'Y'GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(func.case().when(Table.TYPE == '제품', Table.WGT).otherwise(0)).label('product_weight_ton')",
        "func.sum(func.case().when(Table.TYPE == '재공', Table.WGT).otherwise(0)).label('wip_weight_ton')",
        "func.sum(func.case().when(Table.TYPE == '제품', Table.AMT).otherwise(0)).label('product_amount_won')",
        "func.sum(func.case().when(Table.TYPE == '재공', Table.AMT).otherwise(0)).label('wip_amount_won')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-03-31'])",
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "연구소 R- ORDER에 대해서 최근 2개월 중량과 금액을 R- ORDER 센터별로 구분하여 보여주세요. 단위는 천톤, 백만원으로 나타내 주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, (CASE WHEN TEAM_CUST_TY_NM IN ('스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹') THEN '제품연구센터' WHEN TEAM_CUST_TY_NM IN ('메탈공정연구그룹', '스틸공정연구그룹') THEN '공정연구센터' WHEN TEAM_CUST_TY_NM IN ('타이타늄연구그룹', '기능소재연구그룹') THEN '선도기술연구센터' END) AS research_center, ROUND(SUM(WGT) / 1000000, 2) AS total_weight_thousand_ton, ROUND(SUM(AMT) / 1000000, 2) AS total_amount_million FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 1 MONTH)) AND R_ ORDER = 'Y' GROUP BY 1, 2 ORDER BY 1, 2"
  },
  {
    "question": "최근 6개월간 연구소 주문 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) AND R_ORDER = 'Y' GROUP BY BASE_YMD)SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-05'), func.interval(6, 'MONTH'))",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 달 공장 실 구분별 재고 중량과 금액을 재고 금액이 큰 순으로 표시하세요.",
    "answer": "SELECT (CASE WHEN FACTORY_TY IN ('3제강', '특수제강', '1단조', '2단조', 'RFM', '대형압연') THEN '대형생산실' WHEN FACTORY_TY IN ('2제강', '소형압연', '가공', '대형봉강', '소형정정', '산세') THEN '소형생산실' WHEN FACTORY_TY IN ('소경', '대경') THEN '강관생산실' ELSE '기타' END) AS factory_division, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) GROUP BY factory_division ORDER BY total_amount DESC",
    "sqlalchemy": {
      "selected_columns": [
        "case when Table.FACTORY_TY.in_(['3제강', '특수제강', '1단조', '2단조', 'RFM', '대형압연']) then '대형생산실' when Table.FACTORY_TY.in_(['2제강', '소형압연', '가공', '대형봉강', '소형정정', '산세']) then '소형생산실' when Table.FACTORY_TY.in_(['소경', '대경']) then '강관생산실' else '기타' end.label('factory_division')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))"
      ],
      "group_by": [
        "case when Table.FACTORY_TY.in_(['3제강', '특수제강', '1단조', '2단조', 'RFM', '대형압연']) then '대형생산실' when Table.FACTORY_TY.in_(['2제강', '소형압연', '가공', '대형봉강', '소형정정', '산세']) then '소형생산실' when Table.FACTORY_TY.in_(['소경', '대경']) then '강관생산실' else '기타' end"
      ],
      "order_by": [
        "total_amount.desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "제품 재고 기준으로 영업부문에 대해 본부별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, (CASE WHEN TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트') THEN '영업1본부' WHEN TEAM_CUST_TY_NM IN ('봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀') THEN '영업2본부' WHEN TEAM_CUST_TY_NM IN ('STS수출영업팀', '공구강수출영업팀') THEN '영업3본부' WHEN TEAM_CUST_TY_NM IN ('탄합영업실') THEN '탄합영업실' END) AS team_headquarters, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) AND TYPE = '제품' AND TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실') GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "case when Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트']) then '영업1본부' when Table.TEAM_CUST_TY_NM.in_(['봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀']) then '영업2본부' when Table.TEAM_CUST_TY_NM.in_(['STS수출영업팀', '공구강수출영업팀']) then '영업3본부' when Table.TEAM_CUST_TY_NM.in_(['탄합영업실']) then '탄합영업실' end.label('team_headquarters')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH')))",
        "Table.TYPE == '제품'",
        "Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트', '봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀', 'STS수출영업팀', '공구강수출영업팀', '탄합영업실'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "case when Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트']) then '영업1본부' when Table.TEAM_CUST_TY_NM.in_(['봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀']) then '영업2본부' when Table.TEAM_CUST_TY_NM.in_(['STS수출영업팀', '공구강수출영업팀']) then '영업3본부' when Table.TEAM_CUST_TY_NM.in_(['탄합영업실']) then '탄합영업실' end"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "case when Table.TEAM_CUST_TY_NM.in_(['선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트']) then '영업1본부' when Table.TEAM_CUST_TY_NM.in_(['봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀']) then '영업2본부' when Table.TEAM_CUST_TY_NM.in_(['STS수출영업팀', '공구강수출영업팀']) then '영업3본부' when Table.TEAM_CUST_TY_NM.in_(['탄합영업실']) then '탄합영업실' end"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 달 총 재고 중량과 금액을 표시하세요.",
    "answer": "SELECT SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH))",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "25년 1월 R-order 재공 중에서 수요가명별로 중량과 금액을 표시해줘",
    "answer": "SELECT CUST_NM AS customer_name, SUM(WGT) AS total_wgt, SUM(AMT) AS total_amt FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE TYPE = '재공' AND FORMAT_DATE('%Y-%m', BASE_YMD) = '2025-01' AND R_ORDER = 'Y' GROUP BY CUST_NM ORDER BY total_wgt DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.CUST_NM.label('customer_name')",
        "func.sum(Table.WGT).label('total_wgt')",
        "func.sum(Table.AMT).label('total_amt')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2025-01'",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "Table.CUST_NM"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "제품 재고 기준으로 팀별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TEAM_CUST_TY_NM AS sales_team, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) AND TYPE = '제품' GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TEAM_CUST_GRP_NM.label('sales_team')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))",
        "Table.TYPE == '제품'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_GRP_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_GRP_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 9월 기준으로 구입스크랩, 자가철스크랩, 합금철, 구입소재로 분류하여 중량이 큰 순으로 중량을 표시하세요.",
    "answer": "SELECT GBN_L1, SUM(WGT) AS total_weightFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD = DATE '2024-09-30' AND GBN_L1 IN ('구입 스크랩', '자가철', '합금철', '구입소재 등')GROUP BY GBN_L1ORDER BY total_weight DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.GBN_L1",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2024-09-30'",
        "Table.GBN_L1.in_(['구입 스크랩', '자가철', '합금철', '구입소재 등'])"
      ],
      "group_by": [
        "Table.GBN_L1"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "STS304S5 강종의 월별 재공 추이를 공장별로 표시해주세요. 중량과 금액 모두 표시가 필요하며 단위는 톤, 백만원으로 해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, FACTORY_TY AS 공장명, ROUND(SUM(WGT) / 1000, 2) AS total_weight_ton, ROUND(SUM(AMT) / 1000000, 2) AS total_amount_million FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE LOWER(IRN_NAME) = LOWER('STS304S5') AND TYPE = '재공' GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.FACTORY_TY.label('공장명')",
        "func.round(func.sum(Table.WGT) / 1000, 2).label('total_weight_ton')",
        "func.round(func.sum(Table.AMT) / 1000000, 2).label('total_amount_million')"
      ],
      "conditions": [
        "func.lower(Table.IRN_NAME) == func.lower('STS304S5')",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.FACTORY_TY"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.FACTORY_TY"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월의 자재 중 사내 자가발생철 자재의 중량 추이를 조회하고, 각 월별로 중량이 가장 큰 항목을 표시해주세요.",
    "answer": "WITH recent_months AS (SELECT DISTINCT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH FROM css_daquv.POC_RAW_MATERIAL_MONTHLY ORDER BY MONTH DESC LIMIT 3), monthly_weights AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, MATL_NAME, SUM(WGT) AS total_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE FORMAT_DATE('%Y-%m', BASE_YMD) IN (SELECT MONTH FROM recent_months) AND GBN_L1 = '자가철' GROUP BY MONTH,MATL_NAME), max_weights AS (SELECT MONTH, MAX(total_weight) AS max_weight FROM monthly_weights GROUP BY MONTH)SELECT mw.MONTH, mw.MATL_NAME, mw.total_weight, CASE WHEN mw.total_weight = mw2.max_weight THEN 'Max Weight' ELSE '' END AS max_weight_flagFROM monthly_weights mwJOIN max_weights mw2 ON mw.MONTH = mw2.MONTHORDER BY mw.MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.MATL_NAME",
        "func.sum(Table.WGT).label('total_weight')",
        "func.case().when(Table.WGT == mw2.max_weight, 'Max Weight').otherwise('').label('max_weight_flag')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(func.select(func.format_date('%Y-%m', Table.BASE_YMD)).distinct().order_by(func.format_date('%Y-%m', Table.BASE_YMD).desc()).limit(3))",
        "Table.GBN_L1 == '자가철'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.MATL_NAME"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 한 달간 어떤 영업 본부가 재고량이 제일 많이 늘어났어?",
    "answer": "WITH current_month AS (SELECT CASE WHEN TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트') THEN '영업1본부' WHEN TEAM_CUST_TY_NM IN ('봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀') THEN '영업2본부' WHEN TEAM_CUST_TY_NM IN ('STS수출영업팀', '공구강수출영업팀') THEN '영업3본부' WHEN TEAM_CUST_TY_NM = '탄합영업실' THEN '탄합영업실' ELSE '기타' END AS division, SUM(WGT) AS current_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-04-30' GROUP BY division), previous_month AS (SELECT CASE WHEN TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트') THEN '영업1본부' WHEN TEAM_CUST_TY_NM IN ('봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀') THEN '영업2본부' WHEN TEAM_CUST_TY_NM IN ('STS수출영업팀', '공구강수출영업팀') THEN '영업3본부' WHEN TEAM_CUST_TY_NM = '탄합영업실' THEN '탄합영업실' ELSE '기타' END AS division, SUM(WGT) AS previous_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-03-31' GROUP BY division)SELECT c.division, c.current_weight - COALESCE(p.previous_weight, 0) AS weight_changeFROM current_month cLEFT JOIN previous_month p ON c.division = p.divisionORDER BY weight_change DESCLIMIT 1;",
    "sqlalchemy": {
      "selected_columns": [
        "c.division",
        "(c.current_weight - func.coalesce(p.previous_weight, 0)).label('weight_change')"
      ],
      "conditions": [
        "c.BASE_YMD == '2025-04-30'",
        "p.BASE_YMD == '2025-03-31'"
      ],
      "group_by": [
        "c.division"
      ],
      "order_by": [
        "weight_change.desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "제품 재고 기준으로 팀의 본부별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, (CASE WHEN TEAM_CUST_TY_NM IN ('선재내수영업팀', '강관영업팀', '내수영업파트', '수출영업파트') THEN '영업1본부' WHEN TEAM_CUST_TY_NM IN ('봉강내수영업팀', '공구강내수영업팀', '특수합금영업팀') THEN '영업2본부' WHEN TEAM_CUST_TY_NM IN ('STS수출영업팀', '공구강수출영업팀') THEN '영업3본부' WHEN TEAM_CUST_TY_NM IN ('탄합영업실') THEN '탄합영업실' WHEN TEAM_CUST_TY_NM IN ('스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹') THEN '제품연구센터' WHEN TEAM_CUST_TY_NM IN ('메탈공정연구그룹', '스틸공정연구그룹') THEN '공정연구센터' WHEN TEAM_CUST_TY_NM IN ('타이타늄연구그룹', '기능소재연구그룹') THEN '선도기술연구센터' WHEN TEAM_CUST_TY_NM IN ('CS팀') THEN 'CS팀' ELSE '품질생산등' END) AS team_headquarters, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) AND TYPE = '제품' GROUP BY 1, 2 ORDER BY 1, 2"
  },
  {
    "question": "전체 장기재고에 대한 중량과 금액을 월별로 산출하여 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE LONG_TYPE IN ('장기', '일몰') GROUP BY 1 ORDER BY 1",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월의 장기재고 중량 추이를 조회하고, 각 월별로 장기재고 중량이 가장 큰 대강종을 표시해주세요.",
    "answer": "WITH Recent_Months AS (SELECT DISTINCT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD <= DATE '2025-05-31' ORDER BY MONTH DESC LIMIT 3), Monthly_Weight AS (SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, IRN_LARGE_NM, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE LONG_TYPE IN ('장기', '일몰') AND FORMAT_DATE('%Y-%m', BASE_YMD) IN (SELECT MONTH FROM Recent_Months) GROUP BY MONTH,IRN_LARGE_NM), Max_Weight AS (SELECT MONTH, IRN_LARGE_NM, total_weight, RANK() OVER (PARTITION BY MONTH ORDER BY total_weight DESC) AS weight_rank FROM Monthly_Weight)SELECT mw.MONTH, mw.IRN_LARGE_NM AS largest_grade, mw.total_weight, (SELECT SUM(total_weight) FROM Monthly_Weight WHERE MONTH = mw.MONTH) AS total_monthly_weightFROM Max_Weight mwWHERE mw.weight_rank = 1ORDER BY mw.MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.IRN_LARGE_NM.label('largest_grade')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.WGT).over(partition_by=[func.format_date('%Y-%m', Table.BASE_YMD)]).label('total_monthly_weight')"
      ],
      "conditions": [
        "Table.LONG_TYPE.in_(['장기', '일몰'])",
        "Table.BASE_YMD <= func.date('2025-05-31')"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 제품 재고량 증가분과 STS, 탄합강, 특수합금, 공구강의 재고량 증가분을 계산해줘",
    "answer": "WITH stock_comparison AS (SELECT BASE_YMD, SUM(CASEWHEN TYPE = '제품' THEN WGTELSE 0 END) AS product_stock, SUM(CASEWHEN IRN_LARGE_NM = 'STS' THEN WGTELSE 0 END) AS STS_stock, SUM(CASEWHEN IRN_LARGE_NM = '탄합강' THEN WGTELSE 0 END) AS alloy_stock, SUM(CASEWHEN IRN_LARGE_NM = '특수합금' THEN WGTELSE 0 END) AS special_alloy_stock, SUM(CASEWHEN IRN_LARGE_NM = '공구 금형강' THEN WGTELSE 0 END) AS tool_steel_stock FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN (DATE '2024-12-31', DATE '2025-02-28') GROUP BY BASE_YMD)SELECT '2024-12 to 2025-02' AS PERIOD, COALESCE(feb_2025.product_stock - dec_2024.product_stock, 0) AS product_stock_increase, COALESCE(feb_2025.STS_stock - dec_2024.STS_stock, 0) AS STS_stock_increase, COALESCE(feb_2025.alloy_stock - dec_2024.alloy_stock, 0) AS alloy_stock_increase, COALESCE(feb_2025.special_alloy_stock - dec_2024.special_alloy_stock, 0) AS special_alloy_stock_increase, COALESCE(feb_2025.tool_steel_stock - dec_2024.tool_steel_stock, 0) AS tool_steel_stock_increaseFROM (SELECT * FROM stock_comparison WHERE BASE_YMD = DATE '2024-12-31') AS dec_2024JOIN (SELECT * FROM stock_comparison WHERE BASE_YMD = DATE '2025-02-28') AS feb_2025 ON 1=1;",
    "sqlalchemy": {
      "selected_columns": [
        "'2024-12 to 2025-02' AS PERIOD",
        "func.coalesce(feb_2025.product_stock - dec_2024.product_stock, 0).label('product_stock_increase')",
        "func.coalesce(feb_2025.STS_stock - dec_2024.STS_stock, 0).label('STS_stock_increase')",
        "func.coalesce(feb_2025.alloy_stock - dec_2024.alloy_stock, 0).label('alloy_stock_increase')",
        "func.coalesce(feb_2025.special_alloy_stock - dec_2024.special_alloy_stock, 0).label('special_alloy_stock_increase')",
        "func.coalesce(feb_2025.tool_steel_stock - dec_2024.tool_steel_stock, 0).label('tool_steel_stock_increase')"
      ],
      "conditions": [
        "dec_2024.BASE_YMD == '2024-12-31'",
        "feb_2025.BASE_YMD == '2025-02-28'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "특수합금의 최근 3개월 재공, 제품의 월별 중량, 금액을 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE IRN_LARGE_NM = '특수합금' AND FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM css_daquv.POC_PRODUCT_WIP_MONTHLY), INTERVAL 2 MONTH))GROUP BY MONTH, TYPEORDER BY MONTH, TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.IRN_LARGE_NM == '특수합금'",
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7,8,9월의 장기재고를 대강종 별로 조회하세요. 월을 컬럼으로 전환해 대강종 별로 8월과 9월 기준으로 전월 대비 증감을 계산하세요. 8월과 9월 각각에 대해 상승폭이 가장 큰 대강종을 표시해주세요.",
    "answer": "WITH monthly_inventory AS (SELECT IRN_LARGE_NM, FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE LONG_TYPE IN ('장기', '일몰') AND BASE_YMD IN (DATE '2024-07-31', DATE '2024-08-31', DATE '2024-09-30') GROUP BY IRN_LARGE_NM,MONTH), pivoted_inventory AS (SELECT IRN_LARGE_NM, MAX(CASEWHEN MONTH = '2024-07' THEN total_weightELSE 0 END) AS weight_jul, MAX(CASEWHEN MONTH = '2024-08' THEN total_weightELSE 0 END) AS weight_aug, MAX(CASEWHEN MONTH = '2024-09' THEN total_weightELSE 0 END) AS weight_sep FROM monthly_inventory GROUP BY IRN_LARGE_NM), inventory_change AS (SELECT IRN_LARGE_NM, weight_jul, weight_aug, weight_sep, weight_aug - weight_jul AS change_aug, weight_sep - weight_aug AS change_sep FROM pivoted_inventory), max_increase_aug AS (SELECT IRN_LARGE_NM FROM inventory_change ORDER BY change_aug DESC LIMIT 1), max_increase_sep AS (SELECT IRN_LARGE_NM FROM inventory_change ORDER BY change_sep DESC LIMIT 1)SELECT ic.IRN_LARGE_NM, ic.weight_jul, ic.weight_aug, ic.weight_sep, ic.change_aug, ic.change_sep, mia.IRN_LARGE_NM AS max_increase_aug, mis.IRN_LARGE_NM AS max_increase_sepFROM inventory_change icLEFT JOIN max_increase_aug mia ON ic.IRN_LARGE_NM = mia.IRN_LARGE_NMLEFT JOIN max_increase_sep mis ON ic.IRN_LARGE_NM = mis.IRN_LARGE_NMORDER BY ic.IRN_LARGE_NM;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.IRN_LARGE_NM",
        "func.max(func.case().when(Table.MONTH == '2024-07', Table.total_weight).else_(0)).label('weight_jul')",
        "func.max(func.case().when(Table.MONTH == '2024-08', Table.total_weight).else_(0)).label('weight_aug')",
        "func.max(func.case().when(Table.MONTH == '2024-09', Table.total_weight).else_(0)).label('weight_sep')",
        "(func.max(func.case().when(Table.MONTH == '2024-08', Table.total_weight).else_(0)) - func.max(func.case().when(Table.MONTH == '2024-07', Table.total_weight).else_(0))).label('change_aug')",
        "(func.max(func.case().when(Table.MONTH == '2024-09', Table.total_weight).else_(0)) - func.max(func.case().when(Table.MONTH == '2024-08', Table.total_weight).else_(0))).label('change_sep')",
        "mia.IRN_LARGE_NM.label('max_increase_aug')",
        "mis.IRN_LARGE_NM.label('max_increase_sep')"
      ],
      "conditions": [
        "Table.LONG_TYPE.in_(['장기', '일몰'])",
        "Table.BASE_YMD.in_([func.date('2024-07-31'), func.date('2024-08-31'), func.date('2024-09-30')])"
      ],
      "group_by": [
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "Table.IRN_LARGE_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월 제소구분별, 대강종별 재고 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, ITEM_ACCOUNT, IRN_LARGE_NM, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD >= DATE_SUB(DATE '2025-05-11', INTERVAL 3 MONTH)GROUP BY MONTH, ITEM_ACCOUNT, IRN_LARGE_NMORDER BY MONTH, ITEM_ACCOUNT, IRN_LARGE_NM;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.ITEM_ACCOUNT",
        "Table.IRN_LARGE_NM",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-11'), func.interval(3, 'MONTH'))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ITEM_ACCOUNT",
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ITEM_ACCOUNT",
        "Table.IRN_LARGE_NM"
      ],
      "transformations": [
        {
          "column": "BASE_YMD",
          "transformation": "FORMAT_DATE('%Y-%m', BASE_YMD)"
        }
      ]
    }
  },
  {
    "question": "24년 9월 전체 자재 중에서 니켈 합금철에 대해 전체 중량과 금액을 천톤, 억원 단위로 나타내고 항목별로 중량 기준 내림차순으로 보여주세요.",
    "answer": "SELECT MATL_NAME, SUM(WGT) / POWER(10, 6) AS total_weight_thousand_ton, SUM(AMT) / POWER(10, 8) AS total_amount_hundred_millionFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD = DATE '2024-09-30' AND GBN_L1 = '합금철' AND MATL_NAME LIKE '%Ni%'GROUP BY MATL_NAMEORDER BY total_weight_thousand_ton DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.MATL_NAME",
        "func.sum(Table.WGT) / func.power(10, 6).label('total_weight_thousand_ton')",
        "func.sum(Table.AMT) / func.power(10, 8).label('total_amount_hundred_million')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2024-09-30'",
        "Table.GBN_L1 == '합금철'",
        "Table.MATL_NAME.like('%Ni%')"
      ],
      "group_by": [
        "Table.MATL_NAME"
      ],
      "order_by": [
        "func.sum(Table.WGT) / func.power(10, 6).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 전체 자재의 월별 추이를 표시해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024'GROUP BY 1 ORDER BY 1",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "특수합금 합금철의 최근 3개월 월별 중량, 금액을 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 = '합금철' AND GBN_L2 = '특수 합금철' AND BASE_YMD >= DATE_SUB( (SELECT MAX(BASE_YMD)FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH)GROUP BY MONTHORDER BY MONTH DESC",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.GBN_L1 == '합금철'",
        "Table.GBN_L2 == '특수 합금철'",
        "Table.BASE_YMD >= func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH'))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7, 8, 9월 자재를 평가클래스별로 나눠 중량, 금액을 보여주세요. 각 월의 평균 값도 같이 표시해주세요.",
    "answer": "WITH TEMP_INVEN AS ( SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, CLASS_NM AS eval_class_detail, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' AND CAST(FORMAT_DATE('%m', BASE_YMD) AS INT64) IN (7, 8 ,9) GROUP BY 1, 2)SELECT `년월`, `평가클래스내역`, `합계_중량`, `합계_금액`, ROUND(AVG(`합계_중량`) OVER (PARTITION BY `년월`), 2) AS avg_weight, ROUND(AVG(`합계_금액`) OVER (PARTITION BY `년월`), 2) AS avg_amount FROM TEMP_INVEN ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('년월')",
        "Table.CLASS_NM.label('평가클래스내역')",
        "func.sum(Table.WGT).label('합계_중량')",
        "func.sum(Table.AMT).label('합계_금액')",
        "func.round(func.avg(func.sum(Table.WGT)).over(partition_by=[func.format_date('%Y-%m', Table.BASE_YMD)]), 2).label('avg_weight')",
        "func.round(func.avg(func.sum(Table.AMT)).over(partition_by=[func.format_date('%Y-%m', Table.BASE_YMD)]), 2).label('avg_amount')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'",
        "func.cast(func.format_date('%m', Table.BASE_YMD), 'INT64').in_([7, 8, 9])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CLASS_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CLASS_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7,8,9월의 자재 중 사내 자가발생철 자재의 중량을 자재내역 별로 조회하세요. 월을 컬럼으로 전환한 후 자재내역 별로 8월과 9월 기준으로 전월 대비 증감을 계산해 표시해주세요.",
    "answer": "SELECT MATL_NAME, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' THEN WGT ELSE 0 END) AS July_WGT, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN WGT ELSE 0 END) AS August_WGT, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' THEN WGT ELSE 0 END) AS September_WGT, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN WGT ELSE 0 END) - SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' THEN WGT ELSE 0 END) AS Aug_Change, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' THEN WGT ELSE 0 END) - SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN WGT ELSE 0 END) AS Sep_ChangeFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD IN (DATE '2024-07-31', DATE '2024-08-31', DATE '2024-09-30') AND GBN_L1 = '자가철'GROUP BY MATL_NAMEORDER BY MATL_NAME;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.MATL_NAME",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.WGT)], else_=0)).label('July_WGT')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT)], else_=0)).label('August_WGT')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09', Table.WGT)], else_=0)).label('September_WGT')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT)], else_=0)) - func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.WGT)], else_=0)).label('Aug_Change')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09', Table.WGT)], else_=0)) - func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT)], else_=0)).label('Sep_Change')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-07-31', '2024-08-31', '2024-09-30'])",
        "Table.GBN_L1 == '자가철'"
      ],
      "group_by": [
        "Table.MATL_NAME"
      ],
      "order_by": [
        "Table.MATL_NAME"
      ],
      "transformations": []
    }
  },
  {
    "question": "연구소 R- ORDER에 대해서 최근 2개월 중량과 금액을 팀별로 구분하여 보여주세요. 단위는 천톤, 백만원으로 나타내 주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TEAM_CUST_TY_NM AS sales_team, ROUND(SUM(WGT) / POWER(10,6), 2) AS total_weight_thousand_ton, ROUND(SUM(AMT) / POWER(10,6), 2) AS total_amount_million FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 1 MONTH)) AND R_ ORDER = 'Y' GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TEAM_CUST_GRP_NM.label('sales_team')",
        "func.round(func.sum(Table.WGT) / func.power(10, 6), 2).label('total_weight_thousand_ton')",
        "func.round(func.sum(Table.AMT) / func.power(10, 6), 2).label('total_amount_million')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(1, 'MONTH')))",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_GRP_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_GRP_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 제품, 재공, 원료 재고의 금액 변동액을 알려줘",
    "answer": "WITH product_data AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '제품'), wip_data AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '재공'), raw_material_data AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28'), previous_product_data AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' AND TYPE = '제품'), previous_wip_data AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' AND TYPE = '재공'), previous_raw_material_data AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2024-12-31')SELECT '제품' AS category, p.total_amount, pp.total_amount AS previous_total_amount, (p.total_amount - COALESCE(pp.total_amount, 0)) AS amount_changeFROM product_data pJOIN previous_product_data pp ON TRUEUNION ALLSELECT '재공' AS category, w.total_amount, pw.total_amount AS previous_total_amount, (w.total_amount - COALESCE(pw.total_amount, 0)) AS amount_changeFROM wip_data wJOIN previous_wip_data pw ON TRUEUNION ALLSELECT '원료' AS category, r.total_amount, pr.total_amount AS previous_total_amount, (r.total_amount - COALESCE(pr.total_amount, 0)) AS amount_changeFROM raw_material_data rJOIN previous_raw_material_data pr ON TRUE;"
  },
  {
    "question": "2제강 공장에 있는 재공 재고에 대한 월별 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FACTORY_TY = '2제강' AND TYPE = '재공' GROUP BY 1 ORDER BY 1",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.FACTORY_TY == '2제강'",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 9월 제품 재고 중에서 R- ORDER 가 차지하는 중량과 비율을 표시해주세요.",
    "answer": "SELECT SUM(CASE WHEN R_ ORDER = 'Y' THEN WGT ELSE 0 END) AS R_ ORDER_중량, ROUND(SUM(CASE WHEN R_ ORDER = 'Y' THEN WGT ELSE 0 END) / IFNULL(SUM(WGT),0) * 100, 2) AS R_ ORDER_비율 FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' AND TYPE = '제품'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(func.case().when(Table.R_ORDER == 'Y', Table.WGT).otherwise(0)).label('R_ORDER_중량')",
        "func.round(func.sum(func.case().when(Table.R_ORDER == 'Y', Table.WGT).otherwise(0)) / func.ifnull(func.sum(Table.WGT), 0) * 100, 2).label('R_ORDER_비율')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09'",
        "Table.TYPE == '제품'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "400스크랩의 월별 자재 추이를 자재내역별 표시해주세요. 중량과 금액 모두 표시가 필요하며 단위는 톤, 백만원으로 해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, MATL_NAME AS material_detail, ROUND(SUM(WGT) / 1000, 2) AS total_weight_ton, ROUND(SUM(AMT) / 1000000, 2) AS total_amount_million FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE CAT_L3 = 'S400계'GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.MATL_NAME.label('material_detail')",
        "func.round(func.sum(Table.WGT) / 1000, 2).label('total_weight_ton')",
        "func.round(func.sum(Table.AMT) / 1000000, 2).label('total_amount_million')"
      ],
      "conditions": [
        "Table.CAT_L3 == 'S400계'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.MATL_NAME"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.MATL_NAME"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월 공장별 재고 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS `year_month`, FACTORY_TY AS `factory_name`, SUM(WGT) AS `total_weight`, SUM(AMT) AS `total_amount` FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.FACTORY_TY.label('factory_name')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.FACTORY_TY"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.FACTORY_TY"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 달 수요가별 재고 중량과 금액을 재고 중량이 큰 순으로 표시하세요.",
    "answer": "SELECT CUST_NM AS customer_name, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) GROUP BY customer_name ORDER BY total_weight DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.CUST_NM.label('customer_name')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))"
      ],
      "group_by": [
        "Table.CUST_NM"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 원료 재고 중 전월 대비 중량이 가장 크게 변한 게 뭐야?",
    "answer": "WITH current_month_data AS (SELECT MATL_NAME, SUM(WGT) AS current_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' GROUP BY MATL_NAME), previous_month_data AS (SELECT MATL_NAME, SUM(WGT) AS previous_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' GROUP BY MATL_NAME)SELECT c.MATL_NAME, c.current_weight, COALESCE(p.previous_weight, 0) AS previous_weight, ABS(c.current_weight - COALESCE(p.previous_weight, 0)) AS weight_changeFROM current_month_data cLEFT JOIN previous_month_data p ON c.MATL_NAME = p.MATL_NAMEORDER BY weight_change DESCLIMIT 1;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.MATL_NAME",
        "func.sum(Table.WGT).label('current_weight')",
        "func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0).label('previous_weight')",
        "func.abs(func.sum(Table.WGT).label('current_weight') - func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('weight_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'"
      ],
      "group_by": [
        "Table.MATL_NAME"
      ],
      "order_by": [
        "weight_change.desc()"
      ],
      "limit": 1,
      "transformations": []
    }
  },
  {
    "question": "최근 3개월의 총 재고 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY year_month ORDER BY year_month",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 재공 중량이 몇 kg에서 몇 kg으로 얼마나 줄었어?",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '재공' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' AND TYPE = '재공' GROUP BY TYPE)SELECT COALESCE(c.TYPE, p.TYPE) AS TYPE, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(p.total_weight, 0) AS previous_weight, (COALESCE(c.total_weight, 0) - COALESCE(p.total_weight, 0)) AS weight_changeFROM current_month_data cFULL OUTER JOIN previous_month_data p ON c.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, p.TYPE).label('TYPE')",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(p.total_weight, 0).label('previous_weight')",
        "(func.coalesce(c.total_weight, 0) - func.coalesce(p.total_weight, 0)).label('weight_change')"
      ],
      "conditions": [],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "25년 1월의 재공 중량을 소재성 재공과 제품성 재공으로 나눠 알려줘",
    "answer": "SELECT GBN_NAME AS wip_type, SUM(WGT) AS total_wgt FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE TYPE = '재공' AND FORMAT_DATE('%Y-%m', BASE_YMD) = '2025-01' AND GBN_NAME IN ('소재성 재공', '제품성 재공') GROUP BY GBN_NAME",
    "sqlalchemy": {
      "selected_columns": [
        "Table.GBN_NAME.label('wip_type')",
        "func.sum(Table.WGT).label('total_wgt')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2025-01'",
        "Table.GBN_NAME.in_(['소재성 재공', '제품성 재공'])"
      ],
      "group_by": [
        "Table.GBN_NAME"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 전체 재고를 제품과 재공 각 카테고리별 월별 추이로 표시해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TYPE AS product_wip_type, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TYPE.label('product_wip_type')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월 주여구분별 재고 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS `year_month`, ORD_TYPE AS ` ORDER_type`, SUM(WGT) AS `total_weight`, SUM(AMT) AS `total_amount` FROM `css_daquv.t2s.PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.t2s.PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.ORD_TYPE.label('ORDER_type')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ORD_TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ORD_TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 연구소 의뢰 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE R_ORDER = 'Y' AND BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) GROUP BY BASE_YMD)SELECT BASE_YMD, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.R_ORDER == 'Y'",
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-05'), func.interval(6, 'MONTH'))"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "S316계의 월별 자재 추이를 자재내역별 표시해주세요. 중량과 금액 모두 표시가 필요하며 단위는 톤, 백만원으로 해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, MATL_NAME AS material_detail, ROUND(SUM(WGT) / 1000, 2) AS total_weight_ton, ROUND(SUM(AMT) / 1000000, 2) AS total_amount_million FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE CAT_L3 = 'S316계'GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.MATL_NAME.label('material_detail')",
        "func.round(func.sum(Table.WGT) / 1000, 2).label('total_weight_ton')",
        "func.round(func.sum(Table.AMT) / 1000000, 2).label('total_amount_million')"
      ],
      "conditions": [
        "Table.CAT_L3 == 'S316계'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.MATL_NAME"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.MATL_NAME"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 1월부터 12월까지 대강종인 특수합금인 재공과 제품을 각각 월별로 전체중량, 금액을 나타내주고 그중에 장기재고의 중량과, 금액도 별도로 표시해줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount, SUM(CASE WHEN LONG_TYPE IN ('장기', '일몰') THEN WGT ELSE 0 END) AS long_term_weight, SUM(CASE WHEN LONG_TYPE IN ('장기', '일몰') THEN AMT ELSE 0 END) AS long_term_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND IRN_LARGE_NM = '특수합금'GROUP BY MONTH, TYPEORDER BY MONTH, TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "func.sum(case().when(Table.LONG_TYPE.in_(['장기', '일몰']), Table.WGT).else_(0)).label('long_term_weight')",
        "func.sum(case().when(Table.LONG_TYPE.in_(['장기', '일몰']), Table.AMT).else_(0)).label('long_term_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD.between(func.date('2024-01-01'), func.date('2024-12-31'))",
        "Table.IRN_LARGE_NM == '특수합금'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월 R-order 장기 재고를 월별로 보여줘. 여기서 R-order 장기 재고는 재공, 제품 모두 포함이야.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE LONG_TYPE IN ('장기', '일몰') AND TYPE IN ('제품', '재공') AND BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28')GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.LONG_TYPE.in_(['장기', '일몰'])",
        "Table.TYPE.in_(['제품', '재공'])",
        "Table.BASE_YMD.in_([func.date('2024-12-31'), func.date('2025-01-31'), func.date('2025-02-28')])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "이번 달과 지난달 제품, 재공 재고 중량과 금액 차이를 알려줘",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(WGT) AS current_weight, SUM(AMT) AS current_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-05-31' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(WGT) AS previous_weight, SUM(AMT) AS previous_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-04-30' GROUP BY TYPE)SELECT COALESCE(c.TYPE, p.TYPE) AS TYPE, COALESCE(c.current_weight, 0) AS current_weight, COALESCE(p.previous_weight, 0) AS previous_weight, (COALESCE(c.current_weight, 0) - COALESCE(p.previous_weight, 0)) AS weight_change, COALESCE(c.current_amount, 0) AS current_amount, COALESCE(p.previous_amount, 0) AS previous_amount, (COALESCE(c.current_amount, 0) - COALESCE(p.previous_amount, 0)) AS amount_changeFROM current_month_data cFULL OUTER JOIN previous_month_data p ON c.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, p.TYPE).label('TYPE')",
        "func.coalesce(c.current_weight, 0).label('current_weight')",
        "func.coalesce(p.previous_weight, 0).label('previous_weight')",
        "(func.coalesce(c.current_weight, 0) - func.coalesce(p.previous_weight, 0)).label('weight_change')",
        "func.coalesce(c.current_amount, 0).label('current_amount')",
        "func.coalesce(p.previous_amount, 0).label('previous_amount')",
        "(func.coalesce(c.current_amount, 0) - func.coalesce(p.previous_amount, 0)).label('amount_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-05-31'",
        "Table.BASE_YMD == '2025-04-30'"
      ],
      "group_by": [
        "c.TYPE",
        "p.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "2025년 1월, 2월 재공 재고의 소재성 제품성을 구분하고 각 구분별 주문재와 여재 비율 계산해줘",
    "answer": "WITH monthly_data AS (SELECT ITEM_ACCOUNT, ORD_TYPE, COUNT(*) AS total_count FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN (DATE '2025-01-31', DATE '2025-02-28') AND TYPE = '재공' GROUP BY ITEM_ACCOUNT,ORD_TYPE), total_data AS (SELECT ITEM_ACCOUNT, SUM(total_count) AS total_count FROM monthly_data GROUP BY ITEM_ACCOUNT)SELECT m.ITEM_ACCOUNT, SUM(CASE WHEN m.ORD_TYPE = '주문재' THEN m.total_count ELSE 0 END) AS order_count, SUM(CASE WHEN m.ORD_TYPE = '여재' THEN m.total_count ELSE 0 END) AS stock_count, SAFE_DIVIDE(SUM(CASE WHEN m.ORD_TYPE = '주문재' THEN m.total_count ELSE 0 END), t.total_count) AS order_ratio, SAFE_DIVIDE(SUM(CASE WHEN m.ORD_TYPE = '여재' THEN m.total_count ELSE 0 END), t.total_count) AS stock_ratioFROM monthly_data mJOIN total_data t ON m.ITEM_ACCOUNT = t.ITEM_ACCOUNTGROUP BY m.ITEM_ACCOUNT, t.total_count;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.ITEM_ACCOUNT",
        "func.sum(case().when(Table.ORD_TYPE == '주문재', Table.total_count).else_(0)).label('order_count')",
        "func.sum(case().when(Table.ORD_TYPE == '여재', Table.total_count).else_(0)).label('stock_count')",
        "func.safe_divide(func.sum(case().when(Table.ORD_TYPE == '주문재', Table.total_count).else_(0)), t.total_count).label('order_ratio')",
        "func.safe_divide(func.sum(case().when(Table.ORD_TYPE == '여재', Table.total_count).else_(0)), t.total_count).label('stock_ratio')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2025-01-31', '2025-02-28'])",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "Table.ITEM_ACCOUNT",
        "t.total_count"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 7, 8, 9월 원부원료의 중량 추이를 조회하고, 각 월별로 중량이 가장 큰 자재 아이템을 표시해주세요.",
    "answer": "WITH TEMP_INVEN AS ( SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, MATL_NAME AS material_detail, SUM(WGT) AS total_weight FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' AND CAST(FORMAT_DATE('%m', BASE_YMD) AS INT64) BETWEEN 7 AND 9 GROUP BY 1, 2)SELECT DISTINCT `년월`, SUM(`합계_중량`) OVER (PARTITION BY `년월`) AS total_weight, LAST_VALUE(`자재내역`) OVER (PARTITION BY `년월` ORDER BY `합계_중량` ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS max_material_detail FROM TEMP_INVEN ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('년월')",
        "func.sum(Table.WGT).label('합계_중량')",
        "func.last_value(Table.MATL_NAME).over(partition_by=['func.format_date('%Y-%m', Table.BASE_YMD)], order_by=['Table.WGT']).label('자재내역')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'",
        "func.cast(func.format_date('%m', Table.BASE_YMD), 'INT64').between(7, 9)"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.MATL_NAME"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "func.sum(Table.WGT)"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 제품 재고 금액과 중량, 그리고 전월 대비 증감액은 얼마인가?",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '제품' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND TYPE = '제품' GROUP BY TYPE)SELECT COALESCE(c.TYPE, p.TYPE) AS TYPE, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(p.total_weight, 0) AS previous_weight, (COALESCE(c.total_weight, 0) - COALESCE(p.total_weight, 0)) AS weight_change, COALESCE(c.total_amount, 0) AS current_amount, COALESCE(p.total_amount, 0) AS previous_amount, (COALESCE(c.total_amount, 0) - COALESCE(p.total_amount, 0)) AS amount_changeFROM current_month_data cFULL OUTER JOIN previous_month_data p ON c.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, p.TYPE).label('TYPE')",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(p.total_weight, 0).label('previous_weight')",
        "(func.coalesce(c.total_weight, 0) - func.coalesce(p.total_weight, 0)).label('weight_change')",
        "func.coalesce(c.total_amount, 0).label('current_amount')",
        "func.coalesce(p.total_amount, 0).label('previous_amount')",
        "(func.coalesce(c.total_amount, 0) - func.coalesce(p.total_amount, 0)).label('amount_change')"
      ],
      "conditions": [],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월에 제품의 재고 금액과 중량은 얼마이며, 전월 대비 얼마나 증가하거나 감소했는지 알려주세요.",
    "answer": "WITH current_product_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '제품' GROUP BY TYPE), previous_product_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND TYPE = '제품' GROUP BY TYPE)SELECT c.TYPE, c.total_weight, c.total_amount, (c.total_weight - COALESCE(p.total_weight, 0)) AS weight_change, (c.total_amount - COALESCE(p.total_amount, 0)) AS amount_changeFROM current_product_data cLEFT JOIN previous_product_data p ON c.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "(func.sum(Table.WGT) - func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('weight_change')",
        "(func.sum(Table.AMT) - func.coalesce(func.sum(Table.AMT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('amount_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.DATA_TYPE == '제품'"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 재고 각각의 금액이 몇 원에서 몇 원으로 얼마나 줄었어? 제품, 재공, 원료 별로 증감을 보여줘",
    "answer": "WITH inventory_data AS ( SELECT CASE WHEN BASE_YMD = '2024-12-31' THEN '2024-12' WHEN BASE_YMD = '2025-02-28' THEN '2025-02' END AS month, TYPE, SUM(AMT) AS total_amt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-02-28') GROUP BY month, TYPE UNION ALL SELECT CASE WHEN BASE_YMD = '2024-12-31' THEN '2024-12' WHEN BASE_YMD = '2025-02-28' THEN '2025-02' END AS month, '원료' AS TYPE, SUM(AMT) AS total_amt FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD IN ('2024-12-31', '2025-02-28') GROUP BY month ), comparison AS ( SELECT TYPE, MAX(CASE WHEN month = '2024-12' THEN total_amt END) AS amt_2024_12, MAX(CASE WHEN month = '2025-02' THEN total_amt END) AS amt_2025_02 FROM inventory_data GROUP BY TYPE ) SELECT TYPE, amt_2024_12, amt_2025_02, amt_2025_02 - amt_2024_12 AS amt_change, ROUND((amt_2025_02 - amt_2024_12) / NULLIF(amt_2024_12, 0) * 100, 2) AS change_percentage FROM comparison ORDER BY TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE",
        "func.max(func.case().when(Table.BASE_YMD == '2024-12-31', func.sum(Table.AMT)).label('amt_2024_12'))",
        "func.max(func.case().when(Table.BASE_YMD == '2025-02-28', func.sum(Table.AMT)).label('amt_2025_02'))"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-02-28'])"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [
        "Table.TYPE"
      ],
      "transformations": [
        {
          "column": "amt_change",
          "transformation": "amt_2025_02 - amt_2024_12"
        },
        {
          "column": "change_percentage",
          "transformation": "ROUND((amt_2025_02 - amt_2024_12) / NULLIF(amt_2024_12, 0) * 100, 2)"
        }
      ]
    }
  },
  {
    "question": "최근 3개월 공장의 실별 재고 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS `year_month`, (CASE WHEN FACTORY_TY IN ('3제강', '특수제강', '1단조', '2단조', 'RFM', '대형압연') THEN '대형생산실' WHEN FACTORY_TY IN ('2제강', '소형압연', '가공', '대형봉강', '소형정정', '산세') THEN '소형생산실' WHEN FACTORY_TY IN ('소경', '대경') THEN '강관생산실' ELSE '기타' END) AS `factory_department`, SUM(WGT) AS `total_weight`, SUM(AMT) AS `total_amount` FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY 1, 2 ORDER BY 1, 2"
  },
  {
    "question": "SPX향은 실수요처명이 Space X, Ram Alloys, SPHERE POWER INC., United Performance Metals인 재고",
    "answer": "SELECT REAL_CUST_NM AS customer_name, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-02-28' AND TYPE = '제품' AND REAL_CUST_NM IN ('Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals') GROUP BY REAL_CUST_NM",
    "sqlalchemy": {
      "selected_columns": [
        "Table.REAL_CUST_NM.label('customer_name')",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.TYPE == '제품'",
        "Table.REAL_CUST_NM.in_(['Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'])"
      ],
      "group_by": [
        "Table.REAL_CUST_NM"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 7월의 자재를 대상으로 SAP 대분류 별로 중량을 계산하고 그 중량을 다시 중분류로 나눠 표시해주세요.",
    "answer": "SELECT CAT_L1 AS SAP대분류명, CAT_L2 AS sap_category_l2, SUM(WGT) AS total_weight FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07'GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "Table.CAT_L1.label('SAP대분류명')",
        "Table.CAT_L2.label('sap_category_l2')",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07'"
      ],
      "group_by": [
        "Table.CAT_L1",
        "Table.CAT_L2"
      ],
      "order_by": [
        "Table.CAT_L1",
        "Table.CAT_L2"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 6월 영업팀별 장기재고의 중량과 금액을 보여주세요.",
    "answer": "SELECT TEAM_CUST_TY_NM AS sales_team, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-06' AND LONG_TYPE IN ('장기', '일몰') GROUP BY 1 ORDER BY 1",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TEAM_CUST_GRP_NM.label('sales_team')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-06'",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "Table.TEAM_CUST_GRP_NM"
      ],
      "order_by": [
        "Table.TEAM_CUST_GRP_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "SPX향은 실수요처명이 Space X, Ram Alloys, SPHERE POWER INC., United Performance Metals인 재고",
    "answer": "SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD = DATE '2025-04-30' AND REAL_CUST_NM IN ('Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals')GROUP BY TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-04-30'",
        "Table.REAL_CUST_NM.in_(['Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'])"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 12월과 25년 3월에 대한 대강종이 특수합금인 제공에 대해서 제품성과 소재성으로 나눠서 중량과 금액을 알려줘. 단, 중량은 톤, 금액은 억원 단위로 보여줘.",
    "answer": "SELECT ITEM_ACCOUNT AS category, FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '재공' AND IRN_LARGE_NM = '특수합금' AND FORMAT_DATE('%Y-%m', BASE_YMD) IN ('2024-12', '2025-03')GROUP BY category, MONTHORDER BY MONTH, category;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.ITEM_ACCOUNT.label('category')",
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT) / func.power(10, 3).label('total_weight_ton')",
        "func.sum(Table.AMT) / func.power(10, 8).label('total_amount_won')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "Table.IRN_LARGE_NM == '특수합금'",
        "func.format_date('%Y-%m', Table.BASE_YMD).in_(['2024-12', '2025-03'])"
      ],
      "group_by": [
        "Table.ITEM_ACCOUNT",
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ITEM_ACCOUNT"
      ],
      "transformations": []
    }
  },
  {
    "question": "구입소재에 대해 3개월의 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 = '구입소재 등' AND BASE_YMD >= DATE_SUB( (SELECT MAX(BASE_YMD)FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH)GROUP BY MONTHORDER BY MONTH DESC",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.GBN_L1 == '구입소재 등'",
        "Table.BASE_YMD >= func.date_sub(func.select(func.max(Table.BASE_YMD)).select_from(Table), func.interval(2, 'MONTH'))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 달 공장별 재고 중량과 금액을 재고 금액이 큰 순으로 표시하세요.",
    "answer": "SELECT FACTORY_TY AS factory_name, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) GROUP BY factory_name ORDER BY total_amount DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.FACTORY_TY.label('factory_name')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))"
      ],
      "group_by": [
        "Table.FACTORY_TY"
      ],
      "order_by": [
        "func.sum(Table.AMT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "25년 2월과 24년 12월의 재고자산 금액 차이를 알려주세요",
    "answer": "WITH previous_month_data AS (SELECT '제품' AS category, SUM(AMT) AS previous_amt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' UNION ALL SELECT '재공' AS category, SUM(AMT) AS previous_amt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' UNION ALL SELECT '원재료' AS category, SUM(AMT) AS previous_amt FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2024-12-31'), current_month_data AS (SELECT '제품' AS category, SUM(AMT) AS current_amt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' UNION ALL SELECT '재공' AS category, SUM(AMT) AS current_amt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' UNION ALL SELECT '원재료' AS category, SUM(AMT) AS current_amt FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28')SELECT c.category, (c.current_amt - COALESCE(p.previous_amt, 0)) AS amt_differenceFROM current_month_data cLEFT JOIN previous_month_data p ON c.category = p.category;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.category",
        "(func.sum(Table.current_amt) - func.coalesce(func.sum(Table.previous_amt), 0)).label('amt_difference')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2024-12-31', '2025-02-28'])"
      ],
      "group_by": [
        "Table.category"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "가장 최근의 재공, 제품 장기재고의 중량과 금액을 표시하고 대강종별로의 비율도 같이 표시해주세요.",
    "answer": "WITH LatestDate AS (SELECT MAX(BASE_YMD) AS max_date FROM css_daquv.POC_PRODUCT_WIP_MONTHLY)SELECT IRN_LARGE_NM AS large_grade, TYPE AS product_type, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount, SUM(WGT) / SUM(SUM(WGT)) OVER (PARTITION BY TYPE) AS weight_ratio, SUM(AMT) / SUM(SUM(AMT)) OVER (PARTITION BY TYPE) AS amount_ratioFROM css_daquv.POC_PRODUCT_WIP_MONTHLY, LatestDateWHERE LONG_TYPE IN ('장기', '일몰') AND BASE_YMD = max_dateGROUP BY IRN_LARGE_NM, TYPEORDER BY large_grade, product_type;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.IRN_LARGE_NM.label('large_grade')",
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "func.sum(Table.WGT) / func.sum(func.sum(Table.WGT)).over(partition_by=[Table.TYPE]).label('weight_ratio')",
        "func.sum(Table.AMT) / func.sum(func.sum(Table.AMT)).over(partition_by=[Table.TYPE]).label('amount_ratio')"
      ],
      "conditions": [
        "Table.LONG_TYPE.in_(['장기', '일몰'])",
        "Table.BASE_YMD == (select func.max(Table.BASE_YMD) from Table)"
      ],
      "group_by": [
        "Table.IRN_LARGE_NM",
        "Table.TYPE"
      ],
      "order_by": [
        "Table.IRN_LARGE_NM",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 재공 재고 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) AND TYPE = '재공' GROUP BY BASE_YMD)SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-05'), func.interval(6, 'MONTH'))",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 R-order 재고별 중량 및 전월 대비 증감은?",
    "answer": "WITH current_month AS ( SELECT GBN_NAME, ITEM_ACCOUNT, TYPE, SUM(WGT) as current_month_wgt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-02-28' AND R_ORDER = 'Y' GROUP BY GBN_NAME, ITEM_ACCOUNT, TYPE ), previous_month AS ( SELECT GBN_NAME, ITEM_ACCOUNT, TYPE, SUM(WGT) as previous_month_wgt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-01-31' AND R_ORDER = 'Y' GROUP BY GBN_NAME, ITEM_ACCOUNT, TYPE ) SELECT COALESCE(cm.GBN_NAME, pm.GBN_NAME) as GBN_NAME, COALESCE(cm.ITEM_ACCOUNT, pm.ITEM_ACCOUNT) as ITEM_ACCOUNT, COALESCE(cm.TYPE, pm.TYPE) as TYPE, cm.current_month_wgt as feb_wgt, pm.previous_month_wgt as jan_wgt, COALESCE(cm.current_month_wgt, 0) - COALESCE(pm.previous_month_wgt, 0) as weight_change, CASE WHEN COALESCE(pm.previous_month_wgt, 0) = 0 THEN NULL ELSE ROUND((COALESCE(cm.current_month_wgt, 0) - pm.previous_month_wgt) / pm.previous_month_wgt * 100, 2) END as change_percentage FROM current_month cm FULL OUTER JOIN previous_month pm ON cm.GBN_NAME = pm.GBN_NAME AND cm.ITEM_ACCOUNT = pm.ITEM_ACCOUNT AND cm.TYPE = pm.TYPE ORDER BY GBN_NAME, ITEM_ACCOUNT, TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(cm.GBN_NAME, pm.GBN_NAME).label('GBN_NAME')",
        "func.coalesce(cm.ITEM_ACCOUNT, pm.ITEM_ACCOUNT).label('ITEM_ACCOUNT')",
        "func.coalesce(cm.TYPE, pm.TYPE).label('TYPE')",
        "cm.current_month_wgt.label('feb_wgt')",
        "pm.previous_month_wgt.label('jan_wgt')",
        "(func.coalesce(cm.current_month_wgt, 0) - func.coalesce(pm.previous_month_wgt, 0)).label('weight_change')",
        "func.case().when(func.coalesce(pm.previous_month_wgt, 0) == 0, None).else_((func.round((func.coalesce(cm.current_month_wgt, 0) - pm.previous_month_wgt) / pm.previous_month_wgt * 100, 2))).label('change_percentage')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.R_ORDER == 'Y'"
      ],
      "group_by": [
        "cm.GBN_NAME",
        "cm.ITEM_ACCOUNT",
        "cm.TYPE"
      ],
      "order_by": [
        "GBN_NAME",
        "ITEM_ACCOUNT",
        "TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 1월, 2월 재공 재고의 소재성 제품성을 구분하고 각 구분별 주문재와 여재 비율 계산해줘",
    "answer": "WITH wip_data AS ( SELECT BASE_YMD, ITEM_ACCOUNT, ORD_TYPE, SUM(WGT) AS total_wgt FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD IN ('2025-01-31', '2025-02-28') AND TYPE = '재공' AND ITEM_ACCOUNT IN ('제품', '소재') AND ORD_TYPE IN ('주문재', '여재') GROUP BY BASE_YMD, ITEM_ACCOUNT, ORD_TYPE ), total_by_account_date AS ( SELECT BASE_YMD, ITEM_ACCOUNT, SUM(total_wgt) AS account_total_wgt FROM wip_data GROUP BY BASE_YMD, ITEM_ACCOUNT ) SELECT w.BASE_YMD, w.ITEM_ACCOUNT, w.ORD_TYPE, w.total_wgt, t.account_total_wgt, ROUND(w.total_wgt / t.account_total_wgt * 100, 2) AS percentage FROM wip_data w JOIN total_by_account_date t ON w.BASE_YMD = t.BASE_YMD AND w.ITEM_ACCOUNT = t.ITEM_ACCOUNT ORDER BY w.BASE_YMD, w.ITEM_ACCOUNT, w.ORD_TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "Table.ITEM_ACCOUNT",
        "Table.ORD_TYPE",
        "func.sum(Table.WGT).label('total_wgt')",
        "func.sum(Table.WGT).label('account_total_wgt')",
        "func.round(func.sum(Table.WGT) / func.sum(Table.WGT) * 100, 2).label('percentage')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2025-01-31', '2025-02-28'])",
        "Table.TYPE == '재공'",
        "Table.ITEM_ACCOUNT.in_(['제품', '소재'])",
        "Table.ORD_TYPE.in_(['주문재', '여재'])"
      ],
      "group_by": [
        "Table.BASE_YMD",
        "Table.ITEM_ACCOUNT",
        "Table.ORD_TYPE"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "Table.ITEM_ACCOUNT",
        "Table.ORD_TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "25년 1월 재공 데이터에서 SAP 형상이 SP인 대상의 총 중량과 금액을 알려줘",
    "answer": "SELECT SUM(WGT) AS total_wgt, SUM(AMT) AS total_amt FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE TYPE = '재공' AND FORMAT_DATE('%Y-%m', BASE_YMD) = '2025-01' AND SHAPE = 'SP'",
    "sqlalchemy": {
      "selected_columns": [
        "func.sum(Table.WGT).label('total_wgt')",
        "func.sum(Table.AMT).label('total_amt')"
      ],
      "conditions": [
        "Table.DATA_TYPE == '재공'",
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2025-01'",
        "Table.SHAPE == 'SP'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "재공, 제품 장기재고의 중량과 금액을 표시하고 강종 대분류별로의 비율도 같이 표시해주세요.",
    "answer": "SELECT TYPE AS inventory_type, IRN_LARGE_NM AS large_grade, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount, SUM(WGT) / SUM(SUM(WGT)) OVER (PARTITION BY TYPE) AS weight_ratio, SUM(AMT) / SUM(SUM(AMT)) OVER (PARTITION BY TYPE) AS amount_ratioFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE LONG_TYPE IN ('장기', '일몰')GROUP BY TYPE, IRN_LARGE_NMORDER BY inventory_type, large_grade;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE.label('inventory_type')",
        "Table.IRN_LARGE_NM.label('large_grade')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "func.sum(Table.WGT) / func.sum(func.sum(Table.WGT)).over(partition_by=[Table.TYPE]).label('weight_ratio')",
        "func.sum(Table.AMT) / func.sum(func.sum(Table.AMT)).over(partition_by=[Table.TYPE]).label('amount_ratio')"
      ],
      "conditions": [
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "Table.TYPE",
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "Table.TYPE",
        "Table.IRN_LARGE_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "지난 달 평가클래스별 자재 중량과 금액을 원료 금액이 큰 순으로 표시하세요.",
    "answer": "SELECT CLASS_NM AS eval_class_name, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) GROUP BY 1 ORDER BY total_amount DESC",
    "sqlalchemy": {
      "selected_columns": [
        "Table.CLASS_NM.label('eval_class_name')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))"
      ],
      "group_by": [
        "Table.CLASS_NM"
      ],
      "order_by": [
        "func.sum(Table.AMT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 R-order 재고별 중량 및 전월 대비 증감은?",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND R_ORDER = 'Y' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND R_ORDER = 'Y' GROUP BY TYPE)SELECT COALESCE(c.TYPE, p.TYPE) AS TYPE, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(p.total_weight, 0) AS previous_weight, (COALESCE(c.total_weight, 0) - COALESCE(p.total_weight, 0)) AS weight_changeFROM current_month_data cFULL OUTER JOIN previous_month_data p ON c.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, p.TYPE).label('TYPE')",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(p.total_weight, 0).label('previous_weight')",
        "(func.coalesce(c.total_weight, 0) - func.coalesce(p.total_weight, 0)).label('weight_change')"
      ],
      "conditions": [],
      "group_by": [],
      "order_by": [],
      "transformations": [
        {
          "column": "current_month_data",
          "transformation": "SELECT TYPE, SUM(WGT) AS total_weight FROM POC_PRODUCT_WIP_RAW_MATERIAL_MONTHLY WHERE BASE_YMD == '2025-02-28' AND R_ORDER == 'Y' GROUP BY TYPE"
        },
        {
          "column": "previous_month_data",
          "transformation": "SELECT TYPE, SUM(WGT) AS total_weight FROM POC_PRODUCT_WIP_RAW_MATERIAL_MONTHLY WHERE BASE_YMD == '2025-01-31' AND R_ORDER == 'Y' GROUP BY TYPE"
        }
      ]
    }
  },
  {
    "question": "스크랩 자재에 대한 월별 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 = '구입 스크랩'GROUP BY MONTHORDER BY MONTH",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.GBN_L1 == '구입 스크랩'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월의 특수합금 합금철에 대해 제품/재공으로 분류해 중량과 금액을 보여주세요. 톤과 억원 단위로 표시해주세요.",
    "answer": "SELECT TYPE, FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE IRN_LARGE_NM = '특수합금' AND FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM css_daquv.POC_PRODUCT_WIP_MONTHLY), INTERVAL 2 MONTH))GROUP BY TYPE, MONTHORDER BY MONTH, TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE",
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT) / func.power(10, 3).label('total_weight_ton')",
        "func.sum(Table.AMT) / func.power(10, 8).label('total_amount_won')"
      ],
      "conditions": [
        "Table.IRN_LARGE_NM == '특수합금'",
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "Table.TYPE",
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "이번 달과 작년 말 제품, 재공 재고 중량과 금액 차이를 알려줘",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-05-31' GROUP BY TYPE), last_year_end_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' GROUP BY TYPE)SELECT COALESCE(c.TYPE, l.TYPE) AS TYPE, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(c.total_amount, 0) AS current_amount, COALESCE(l.total_weight, 0) AS last_year_weight, COALESCE(l.total_amount, 0) AS last_year_amount, (COALESCE(c.total_weight, 0) - COALESCE(l.total_weight, 0)) AS weight_difference, (COALESCE(c.total_amount, 0) - COALESCE(l.total_amount, 0)) AS amount_differenceFROM current_month_data cFULL OUTER JOIN last_year_end_data l ON c.TYPE = l.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, l.TYPE).label('TYPE')",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(c.total_amount, 0).label('current_amount')",
        "func.coalesce(l.total_weight, 0).label('last_year_weight')",
        "func.coalesce(l.total_amount, 0).label('last_year_amount')",
        "(func.coalesce(c.total_weight, 0) - func.coalesce(l.total_weight, 0)).label('weight_difference')",
        "(func.coalesce(c.total_amount, 0) - func.coalesce(l.total_amount, 0)).label('amount_difference')"
      ],
      "conditions": [],
      "group_by": [
        "c.TYPE",
        "l.TYPE"
      ],
      "order_by": [],
      "transformations": [],
      "subqueries": [
        {
          "alias": "current_month_data",
          "selected_columns": [
            "Table.TYPE",
            "func.sum(Table.WGT).label('total_weight')",
            "func.sum(Table.AMT).label('total_amount')"
          ],
          "conditions": [
            "Table.BASE_YMD == '2025-05-31'"
          ],
          "group_by": [
            "Table.TYPE"
          ]
        },
        {
          "alias": "last_year_end_data",
          "selected_columns": [
            "Table.TYPE",
            "func.sum(Table.WGT).label('total_weight')",
            "func.sum(Table.AMT).label('total_amount')"
          ],
          "conditions": [
            "Table.BASE_YMD == '2024-12-31'"
          ],
          "group_by": [
            "Table.TYPE"
          ]
        }
      ]
    }
  },
  {
    "question": "2025년 2월 기준 재공 재고 금액과 중량, 그리고 전월 대비 증감액은 얼마인가?",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '재공' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND TYPE = '재공' GROUP BY TYPE)SELECT COALESCE(c.TYPE, p.TYPE) AS TYPE, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(c.total_amount, 0) AS current_amount, COALESCE(p.total_weight, 0) AS previous_weight, COALESCE(p.total_amount, 0) AS previous_amount, (COALESCE(c.total_weight, 0) - COALESCE(p.total_weight, 0)) AS weight_change, (COALESCE(c.total_amount, 0) - COALESCE(p.total_amount, 0)) AS amount_changeFROM current_month_data cFULL OUTER JOIN previous_month_data p ON c.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, p.TYPE).label('TYPE')",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(c.total_amount, 0).label('current_amount')",
        "func.coalesce(p.total_weight, 0).label('previous_weight')",
        "func.coalesce(p.total_amount, 0).label('previous_amount')",
        "(func.coalesce(c.total_weight, 0) - func.coalesce(p.total_weight, 0)).label('weight_change')",
        "(func.coalesce(c.total_amount, 0) - func.coalesce(p.total_amount, 0)).label('amount_change')"
      ],
      "conditions": [],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 R-order 장기 재공 재고의 강종별 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUBSTR(IRN_CODE, 1, 1) AS steel_grade, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-07', INTERVAL 6 MONTH) AND TYPE = '재공' AND R_ORDER = 'Y' AND LONG_TYPE IN ('장기', '일몰') GROUP BY BASE_YMD,steel_grade)SELECT BASE_YMD, steel_grade, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD, steel_grade;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "SUBSTR(Table.IRN_CODE, 1, 1).label('steel_grade')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-07'), func.interval(6, 'MONTH'))",
        "Table.TYPE == '재공'",
        "Table.R_ORDER == 'Y'",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "Table.BASE_YMD",
        "SUBSTR(Table.IRN_CODE, 1, 1)"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "SUBSTR(Table.IRN_CODE, 1, 1)"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월 평가클래스별 자재 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, CLASS_NM AS eval_class_name, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.CLASS_NM.label('eval_class_name')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CLASS_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CLASS_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 W-order 재고의 제품, 재공별 총 중량과 금액은?",
    "answer": "SELECT TYPE AS product_wip_type, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-02-28' AND PREQ_NO LIKE 'W%' GROUP BY TYPE ORDER BY TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.PREQ_NO.like('W%')"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "2제강 공장의 24년 8월 재공에 대해서 대강종 기준으로 분류하여 중량과 금액을 표시해주세요.",
    "answer": "SELECT IRN_LARGE_NM AS large_grade, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD = DATE '2024-08-31' AND FACTORY_TY = '2제강' AND TYPE = '재공'GROUP BY IRN_LARGE_NMORDER BY large_grade;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.IRN_LARGE_NM.label('large_grade')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2024-08-31'",
        "Table.FACTORY_TY == '2제강'",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "Table.IRN_LARGE_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 합금철, 자가철스크랩, 구입스크랩 중량과 전월 대비 증감은?",
    "answer": "WITH current_month AS (SELECT GBN_L1, SUM(WGT) AS total_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND GBN_L1 IN ('합금철', '자가철', '구입 스크랩') GROUP BY GBN_L1), previous_month AS (SELECT GBN_L1, SUM(WGT) AS total_weight FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND GBN_L1 IN ('합금철', '자가철', '구입 스크랩') GROUP BY GBN_L1)SELECT cm.GBN_L1, cm.total_weight AS current_weight, COALESCE(pm.total_weight, 0) AS previous_weight, cm.total_weight - COALESCE(pm.total_weight, 0) AS weight_changeFROM current_month cmLEFT JOIN previous_month pm ON cm.GBN_L1 = pm.GBN_L1ORDER BY cm.GBN_L1;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.GBN_L1",
        "func.sum(Table.WGT).label('current_weight')",
        "func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0).label('previous_weight')",
        "(func.sum(Table.WGT) - func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('weight_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.GBN_L1.in_(['합금철', '자가철', '구입 스크랩'])"
      ],
      "group_by": [
        "Table.GBN_L1"
      ],
      "order_by": [
        "Table.GBN_L1"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 재공 재고의 소재성과 제품성 구분별 중량과 전월 대비 증감 보여줘",
    "answer": "WITH current_month AS ( SELECT GBN_NAME, SUM(WGT) AS current_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-02-28' AND TYPE = '재공' GROUP BY GBN_NAME ), previous_month AS ( SELECT GBN_NAME, SUM(WGT) AS previous_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-01-31' AND TYPE = '재공' GROUP BY GBN_NAME ) SELECT c.GBN_NAME AS category, c.current_weight AS weight_feb, p.previous_weight AS weight_jan, c.current_weight - p.previous_weight AS weight_change FROM current_month c LEFT JOIN previous_month p ON c.GBN_NAME = p.GBN_NAME ORDER BY c.GBN_NAME",
    "sqlalchemy": {
      "selected_columns": [
        "Table.GBN_NAME.label('category')",
        "func.sum(case().when(Table.BASE_YMD == '2025-02-28', Table.WGT).else_(0)).label('weight_feb')",
        "func.sum(case().when(Table.BASE_YMD == '2025-01-31', Table.WGT).else_(0)).label('weight_jan')",
        "func.sum(case().when(Table.BASE_YMD == '2025-02-28', Table.WGT).else_(0)) - func.sum(case().when(Table.BASE_YMD == '2025-01-31', Table.WGT).else_(0)).label('weight_change')"
      ],
      "conditions": [
        "Table.BASE_YMD.in_(['2025-01-31', '2025-02-28'])",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "Table.GBN_NAME"
      ],
      "order_by": [
        "Table.GBN_NAME"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 8월 전체 재공을 강종 대분류와 형상으로 구분하여 중량, 금액을 표시해주세요.",
    "answer": "SELECT (CASE WHEN SUBSTR(IRN_CODE, 1, 1) = 'S' THEN 'S(스테인레스강)' WHEN SUBSTR(IRN_CODE, 1, 1) = 'T' THEN 'T(공구강)' WHEN SUBSTR(IRN_CODE, 1, 1) = 'V' THEN 'V(특수합금강)' WHEN SUBSTR(IRN_CODE, 1, 1) = 'A' THEN 'A(탄소강)' WHEN SUBSTR(IRN_CODE, 1, 1) = 'B' THEN 'B(합금강)' WHEN SUBSTR(IRN_CODE, 1, 1) = 'C' THEN 'C(소입성보증강)' WHEN SUBSTR(IRN_CODE, 1, 1) = 'K' THEN 'K(베어링강)' WHEN SUBSTR(IRN_CODE, 1, 1) = 'M' THEN 'M(특수용도강)' END) AS steel_main_class, SHAPE_TY AS shape_type, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' AND TYPE = '재공' GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "case when func.substr(Table.IRN_CODE, 1, 1) == 'S' then 'S(스테인레스강)' when func.substr(Table.IRN_CODE, 1, 1) == 'T' then 'T(공구강)' when func.substr(Table.IRN_CODE, 1, 1) == 'V' then 'V(특수합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'A' then 'A(탄소강)' when func.substr(Table.IRN_CODE, 1, 1) == 'B' then 'B(합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'C' then 'C(소입성보증강)' when func.substr(Table.IRN_CODE, 1, 1) == 'K' then 'K(베어링강)' when func.substr(Table.IRN_CODE, 1, 1) == 'M' then 'M(특수용도강)' end.label('steel_main_class')",
        "Table.SHAPE_TY.label('shape_type')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08'",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "case when func.substr(Table.IRN_CODE, 1, 1) == 'S' then 'S(스테인레스강)' when func.substr(Table.IRN_CODE, 1, 1) == 'T' then 'T(공구강)' when func.substr(Table.IRN_CODE, 1, 1) == 'V' then 'V(특수합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'A' then 'A(탄소강)' when func.substr(Table.IRN_CODE, 1, 1) == 'B' then 'B(합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'C' then 'C(소입성보증강)' when func.substr(Table.IRN_CODE, 1, 1) == 'K' then 'K(베어링강)' when func.substr(Table.IRN_CODE, 1, 1) == 'M' then 'M(특수용도강)' end",
        "Table.SHAPE_TY"
      ],
      "order_by": [
        "case when func.substr(Table.IRN_CODE, 1, 1) == 'S' then 'S(스테인레스강)' when func.substr(Table.IRN_CODE, 1, 1) == 'T' then 'T(공구강)' when func.substr(Table.IRN_CODE, 1, 1) == 'V' then 'V(특수합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'A' then 'A(탄소강)' when func.substr(Table.IRN_CODE, 1, 1) == 'B' then 'B(합금강)' when func.substr(Table.IRN_CODE, 1, 1) == 'C' then 'C(소입성보증강)' when func.substr(Table.IRN_CODE, 1, 1) == 'K' then 'K(베어링강)' when func.substr(Table.IRN_CODE, 1, 1) == 'M' then 'M(특수용도강)' end",
        "Table.SHAPE_TY"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7월의 재공 재고를 대상으로 공장별 중량을 계산하고 그 중량을 다시 강종 대분류별로 나눠 표시해주세요.",
    "answer": "SELECT FACTORY_TY, IRN_LARGE_NM, SUM(WGT) AS total_weightFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '재공' AND BASE_YMD = DATE '2024-07-31'GROUP BY FACTORY_TY, IRN_LARGE_NMORDER BY FACTORY_TY, IRN_LARGE_NM;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.FACTORY_TY",
        "Table.IRN_LARGE_NM",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "Table.DATA_TYPE == '재공'",
        "Table.BASE_YMD == '2024-07-31'"
      ],
      "group_by": [
        "Table.FACTORY_TY",
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "Table.FACTORY_TY",
        "Table.IRN_LARGE_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월을 기준으로 한 재공 재고의 금액과 중량, 그리고 전월 대비 변화량은 무엇인가요?",
    "answer": "WITH monthly_data AS (SELECT SUM(AMT) AS total_amount, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '재공'), previous_month_data AS (SELECT SUM(AMT) AS total_amount, SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND TYPE = '재공')SELECT m.total_amount, m.total_weight, (m.total_amount - COALESCE(p.total_amount, 0)) AS amount_change, (m.total_weight - COALESCE(p.total_weight, 0)) AS weight_changeFROM monthly_data mLEFT JOIN previous_month_data p ON TRUE;",
    "sqlalchemy": {
      "selected_columns": [
        "m.total_amount",
        "m.total_weight",
        "(m.total_amount - func.coalesce(p.total_amount, 0)).label('amount_change')",
        "(m.total_weight - func.coalesce(p.total_weight, 0)).label('weight_change')"
      ],
      "conditions": [
        "m.BASE_YMD == '2025-02-28'",
        "m.TYPE == '재공'"
      ],
      "group_by": [],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "제품 재고 기준으로 기술연구소에 대해 팀별로 구분하여 3개월치에 대한 추이를 보여주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, TEAM_CUST_TY_NM AS sales_team, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) AND TYPE = '제품' AND TEAM_CUST_TY_NM IN ('스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹', '메탈공정연구그룹', '스틸공정연구그룹', '타이타늄연구그룹') GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.TEAM_CUST_TY_NM.label('sales_team')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))",
        "Table.TYPE == '제품'",
        "Table.TEAM_CUST_TY_NM.in_(['스테인리스강연구그룹', '공구합금강연구그룹', '특수합금연구그룹', '메탈공정연구그룹', '스틸공정연구그룹', '타이타늄연구그룹'])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_TY_NM"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.TEAM_CUST_TY_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "재공의 장기재고 중에서 전월 기준 장기재고 중량이 가장 큰 사내강종이 무엇인지 표시해주세요.",
    "answer": "SELECT IRN_NAME AS internal_grade_name, SUM(CASE WHEN LONG_TYPE IN ('장기', '일몰') THEN WGT ELSE 0 END) AS total_long_weight FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)) AND TYPE = '재공' GROUP BY 1 ORDER BY `total_long_weight` DESC LIMIT 1",
    "sqlalchemy": {
      "selected_columns": [
        "Table.IRN_NAME.label('internal_grade_name')",
        "func.sum(func.case([(Table.LONG_TYPE.in_(['장기', '일몰']), Table.WGT)], else_=0)).label('total_long_weight')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.current_date(), func.interval(1, 'MONTH')))",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "Table.IRN_NAME"
      ],
      "order_by": [
        "func.sum(func.case([(Table.LONG_TYPE.in_(['장기', '일몰']), Table.WGT)], else_=0)).label('total_long_weight').desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "가장 최근의 스크랩의 자재량을 SAP 중분류별로 구분하여 비율로 알려주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, CAT_L2 AS sap_category_l2, ROUND(SUM(WGT) / SUM(SUM(WGT)) OVER () * 100, 2) AS weight_ratio FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', (SELECT MAX(BASE_YMD) FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY`)) AND CAT_L1 = '스크랩'GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.CAT_L2.label('sap_category_l2')",
        "func.round(func.sum(Table.WGT) / func.sum(func.sum(Table.WGT)).over() * 100, 2).label('weight_ratio')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.select(func.max(Table.BASE_YMD)).select_from(Table))",
        "Table.CAT_L1 == '스크랩'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CAT_L2"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.CAT_L2"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 제품 중량이 몇 kg에서 몇 kg으로 얼마나 줄었어?",
    "answer": "WITH current_month_data AS (SELECT SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND TYPE = '제품'), previous_month_data AS (SELECT SUM(WGT) AS total_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' AND TYPE = '제품')SELECT '제품' AS TYPE, COALESCE(c.total_weight, 0) AS current_weight, COALESCE(p.total_weight, 0) AS previous_weight, (COALESCE(c.total_weight, 0) - COALESCE(p.total_weight, 0)) AS weight_changeFROM current_month_data c, previous_month_data p;",
    "sqlalchemy": {
      "selected_columns": [
        "'제품' AS TYPE",
        "func.coalesce(c.total_weight, 0).label('current_weight')",
        "func.coalesce(p.total_weight, 0).label('previous_weight')",
        "(func.coalesce(c.total_weight, 0) - func.coalesce(p.total_weight, 0)).label('weight_change')"
      ],
      "conditions": [],
      "group_by": [],
      "order_by": [],
      "transformations": [
        {
          "column": "current_month_data",
          "transformation": "SELECT SUM(WGT) AS total_weight FROM Table WHERE BASE_YMD == '2025-02-28' AND DATA_TYPE == '제품'"
        },
        {
          "column": "previous_month_data",
          "transformation": "SELECT SUM(WGT) AS total_weight FROM Table WHERE BASE_YMD == '2024-12-31' AND DATA_TYPE == '제품'"
        }
      ]
    }
  },
  {
    "question": "합금철 중 특수합금에 대한 24년 분기별 추이를 보여주세요.",
    "answer": "SELECT CONCAT(CAST(EXTRACT(YEAR FROM BASE_YMD) AS STRING), '-Q', CAST(EXTRACT(QUARTER FROM BASE_YMD) AS STRING)) AS QUARTER, SUM(WGT) AS total_weight, SUM(AMT) AS total_amountFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE BASE_YMD BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND GBN_L1 = '합금철' AND GBN_SP = '특수합금'GROUP BY QUARTERORDER BY QUARTER;",
    "sqlalchemy": {
      "selected_columns": [
        "func.concat(func.cast(func.extract('YEAR', Table.BASE_YMD), String), '-Q', func.cast(func.extract('QUARTER', Table.BASE_YMD), String)).label('QUARTER')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD.between('2024-01-01', '2024-12-31')",
        "Table.GBN_L1 == '합금철'",
        "Table.GBN_SP == '특수합금'"
      ],
      "group_by": [
        "func.concat(func.cast(func.extract('YEAR', Table.BASE_YMD), String), '-Q', func.cast(func.extract('QUARTER', Table.BASE_YMD), String))"
      ],
      "order_by": [
        "func.concat(func.cast(func.extract('YEAR', Table.BASE_YMD), String), '-Q', func.cast(func.extract('QUARTER', Table.BASE_YMD), String))"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7,8,9월의 장기재고를 대강종 별로 조회하세요. 월을 컬럼으로 전환한 후 대강종 별로 8월과 9월 기준으로 전월 대비 증감을 계산해 표시해주세요.",
    "answer": "WITH TEMP_INVEN AS ( SELECT (CASE WHEN SUBSTR(IRN_CODE, 1, 1) = 'S' THEN 'STS' WHEN SUBSTR(IRN_CODE, 1, 1) = 'T' THEN '공구강' WHEN SUBSTR(IRN_CODE, 1, 1) IN ('A', 'B', 'C', 'K', 'M') THEN '탄합강' WHEN SUBSTR(IRN_CODE, 1, 1) = 'V' THEN '특수합금' END) AS major_steel_type, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' THEN WGT ELSE 0 END) AS 합계_중량_2407, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN WGT ELSE 0 END) AS 합계_중량_2408, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' THEN WGT ELSE 0 END) AS 합계_중량_2409 FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' AND CAST(FORMAT_DATE('%m', BASE_YMD) AS INT64) BETWEEN 7 AND 9 AND LONG_TYPE IN ('장기', '일몰') GROUP BY 1)SELECT *, (`합계_중량_2408` - `합계_중량_2407`) AS 중량_전월비_2408, (`합계_중량_2409` - `합계_중량_2408`) AS 중량_전월비_2409, FROM TEMP_INVEN ORDER BY 1",
    "sqlalchemy": {
      "selected_columns": [
        "CASE WHEN func.substr(Table.IRN_CODE, 1, 1) == 'S' THEN 'STS' WHEN func.substr(Table.IRN_CODE, 1, 1) == 'T' THEN '공구강' WHEN func.substr(Table.IRN_CODE, 1, 1).in_(['A', 'B', 'C', 'K', 'M']) THEN '탄합강' WHEN func.substr(Table.IRN_CODE, 1, 1) == 'V' THEN '특수합금' END.label('major_steel_type')",
        "func.sum(func.case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.WGT).else_(0)).label('합계_중량_2407')",
        "func.sum(func.case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT).else_(0)).label('합계_중량_2408')",
        "func.sum(func.case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09', Table.WGT).else_(0)).label('합계_중량_2409')",
        "(func.sum(func.case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT).else_(0)) - func.sum(func.case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-07', Table.WGT).else_(0))).label('중량_전월비_2408')",
        "(func.sum(func.case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09', Table.WGT).else_(0)) - func.sum(func.case().when(func.format_date('%Y-%m', Table.BASE_YMD) == '2024-08', Table.WGT).else_(0))).label('중량_전월비_2409')"
      ],
      "conditions": [
        "func.format_date('%Y', Table.BASE_YMD) == '2024'",
        "func.cast(func.format_date('%m', Table.BASE_YMD), Integer) >= 7",
        "func.cast(func.format_date('%m', Table.BASE_YMD), Integer) <= 9",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "CASE WHEN func.substr(Table.IRN_CODE, 1, 1) == 'S' THEN 'STS' WHEN func.substr(Table.IRN_CODE, 1, 1) == 'T' THEN '공구강' WHEN func.substr(Table.IRN_CODE, 1, 1).in_(['A', 'B', 'C', 'K', 'M']) THEN '탄합강' WHEN func.substr(Table.IRN_CODE, 1, 1) == 'V' THEN '특수합금' END"
      ],
      "order_by": [
        "major_steel_type"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 장기 재공 재고의 강종별 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, CASE WHEN IRN_CODE LIKE 'S%' THEN '스테인레스강' WHEN IRN_CODE LIKE 'T%' THEN '공구강' WHEN IRN_CODE LIKE 'V%' THEN '특수합금강' WHEN IRN_CODE LIKE 'A%' THEN '탄소강' WHEN IRN_CODE LIKE 'B%' THEN '합금강' WHEN IRN_CODE LIKE 'C%' THEN '소입성보증강' WHEN IRN_CODE LIKE 'K%' THEN '베어링강' WHEN IRN_CODE LIKE 'M%' THEN '특수용도강' END AS steel_type, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) AND TYPE = '재공' AND LONG_TYPE IN ('장기', '일몰') GROUP BY BASE_YMD,steel_type)SELECT BASE_YMD, steel_type, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD, steel_type;"
  },
  {
    "question": "2025년 2월 기준 W-order 재고의 제품, 재공별 총 중량과 금액 및 전월 대비 증감은?",
    "answer": "WITH monthly_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND PREQ_NO LIKE 'W%' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND PREQ_NO LIKE 'W%' GROUP BY TYPE)SELECT m.TYPE, m.total_weight, m.total_amount, (m.total_weight - COALESCE(p.total_weight, 0)) AS weight_change, (m.total_amount - COALESCE(p.total_amount, 0)) AS amount_changeFROM monthly_data mLEFT JOIN previous_month_data p ON m.TYPE = p.TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')",
        "(func.sum(Table.WGT) - func.coalesce(func.sum(Table.WGT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('weight_change')",
        "(func.sum(Table.AMT) - func.coalesce(func.sum(Table.AMT).filter(Table.BASE_YMD == '2025-01-31'), 0)).label('amount_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.PREQ_NO.like('W%')"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 원료 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) GROUP BY BASE_YMD)SELECT BASE_YMD, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-05'), func.interval(6, 'MONTH'))"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 R-order 장기 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) AND R_ORDER = 'Y' AND LONG_TYPE IN ('장기', '일몰') GROUP BY BASE_YMD)SELECT BASE_YMD, total_weight, total_amountFROM monthly_dataORDER BY BASE_YMD;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.current_date(), func.interval(6, 'MONTH'))",
        "Table.R_ORDER == 'Y'",
        "Table.LONG_TYPE.in_(['장기', '일몰'])"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [
        "Table.BASE_YMD"
      ],
      "transformations": []
    }
  },
  {
    "question": "스크랩 중에서 구입 스크랩과 자가철 스크랩을 구분하여 전전월과 전월의 중량과 금액을 조회하세요. 월을 컬럼으로 배치하고 전월 대비 당월의 증감을 계산해 표시해 주세요.",
    "answer": "SELECT GBN_L1, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB( (SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH)) THEN WGT ELSE 0 END) AS weight_prev_prev_month, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB( (SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH)) THEN AMT ELSE 0 END) AS amount_prev_prev_month, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB( (SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 1 MONTH)) THEN WGT ELSE 0 END) AS weight_prev_month, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB( (SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 1 MONTH)) THEN AMT ELSE 0 END) AS amount_prev_month, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB( (SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 1 MONTH)) THEN WGT ELSE 0 END) - SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH)) THEN WGT ELSE 0 END) AS weight_change, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB( (SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 1 MONTH)) THEN AMT ELSE 0 END) - SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM css_daquv.POC_RAW_MATERIAL_MONTHLY), INTERVAL 2 MONTH)) THEN AMT ELSE 0 END) AS amount_changeFROM css_daquv.POC_RAW_MATERIAL_MONTHLYWHERE GBN_L1 IN ('구입 스크랩', '자가철')GROUP BY GBN_L1ORDER BY GBN_L1;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.GBN_L1",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH'))), Table.WGT, 0])).label('weight_prev_prev_month')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH'))), Table.AMT, 0])).label('amount_prev_prev_month')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(1, 'MONTH'))), Table.WGT, 0])).label('weight_prev_month')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(1, 'MONTH'))), Table.AMT, 0])).label('amount_prev_month')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(1, 'MONTH'))), Table.WGT, 0])) - func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH'))), Table.WGT, 0])).label('weight_change')",
        "func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(1, 'MONTH'))), Table.AMT, 0])) - func.sum(func.case([(func.format_date('%Y-%m', Table.BASE_YMD) == func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH'))), Table.AMT, 0])).label('amount_change')"
      ],
      "conditions": [
        "Table.GBN_L1.in_(['구입 스크랩', '자가철'])"
      ],
      "group_by": [
        "Table.GBN_L1"
      ],
      "order_by": [
        "Table.GBN_L1"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 3개월 제소구분별 재고 중량과 금액을 월별로 표시하세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS `year_month`, ITEM_ACCOUNT AS `item_category`, SUM(WGT) AS `total_weight`, SUM(AMT) AS `total_amount` FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) >= FORMAT_DATE('%Y-%m', DATE_SUB((SELECT MAX(BASE_YMD) FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY`), INTERVAL 2 MONTH)) GROUP BY 1, 2 ORDER BY 1, 2",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "Table.ITEM_ACCOUNT.label('item_category')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) >= func.format_date('%Y-%m', func.date_sub(func.select(func.max(Table.BASE_YMD)).label('max_date'), func.interval(2, 'MONTH')))"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ITEM_ACCOUNT"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)",
        "Table.ITEM_ACCOUNT"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 7, 8, 9월의 원부원료 중량을 자재 아이템 별로 조회하세요. 월을 컬럼으로 전환해 아이템 별로 8월, 9월 기준으로 전월 대비 증감을 계산하세요. 8월과 9월 각각에 대해 상승폭이 가장 큰 자재 아이템을 표시해주세요.",
    "answer": "WITH TEMP_INVEN AS ( SELECT MATL_NAME AS material_detail, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-07' THEN WGT ELSE 0 END) AS total_weight_2407, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-08' THEN WGT ELSE 0 END) AS total_weight_2408, SUM(CASE WHEN FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' THEN WGT ELSE 0 END) AS total_weight_2409 FROM `css_daquv.POC_RAW_MATERIAL_MONTHLY` WHERE FORMAT_DATE('%Y', BASE_YMD) = '2024' AND CAST(FORMAT_DATE('%m', BASE_YMD) AS INT64) BETWEEN 7 AND 9 GROUP BY 1)SELECT '2024-08' AS year_month, `자재내역`, `중량_전월비` FROM ( SELECT *, (`합계_중량_2408` - `합계_중량_2407`) AS weight_diff_mom, RANK() OVER ( ORDER BY (`합계_중량_2408` - `합계_중량_2407`) DESC) AS weight_diff_rank FROM TEMP_INVEN) T WHERE `중량_전월비_순위`=1UNION ALLSELECT '2024-09' AS year_month, `자재내역`, `중량_전월비` FROM ( SELECT *, (`합계_중량_2409` - `합계_중량_2408`) AS weight_diff_mom, RANK() OVER ( ORDER BY (`합계_중량_2409` - `합계_중량_2408`) DESC) AS weight_diff_rank FROM TEMP_INVEN) T WHERE `중량_전월비_순위`=1",
    "sqlalchemy": {
      "selected_columns": [
        "'2024-08' AS year_month",
        "Table.MATL_NAME.label('자재내역')",
        "(SUM(CASE WHEN FORMAT_DATE('%Y-%m', Table.BASE_YMD) = '2024-08' THEN Table.WGT ELSE 0 END) - SUM(CASE WHEN FORMAT_DATE('%Y-%m', Table.BASE_YMD) = '2024-07' THEN Table.WGT ELSE 0 END)).label('중량_전월비')"
      ],
      "conditions": [
        "FORMAT_DATE('%Y', Table.BASE_YMD) == '2024'",
        "CAST(FORMAT_DATE('%m', Table.BASE_YMD) AS INT64).between(7, 9)"
      ],
      "group_by": [
        "Table.MATL_NAME"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 제품, 재공, 원료 재고 금액과 중량, 그리고 전월 대비 증감액은 얼마인가?",
    "answer": "WITH current_month AS ( SELECT BASE_YMD, TYPE, SUM(AMT) AS AMT, SUM(WGT) AS WGT FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-02-28' AND TYPE IN ('제품', '재공') GROUP BY BASE_YMD, TYPE UNION ALL SELECT BASE_YMD, '원료' AS TYPE, SUM(AMT) AS AMT, SUM(WGT) AS WGT FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = '2025-02-28' GROUP BY BASE_YMD ), previous_month AS ( SELECT BASE_YMD, TYPE, SUM(AMT) AS AMT, SUM(WGT) AS WGT FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-01-31' AND TYPE IN ('제품', '재공') GROUP BY BASE_YMD, TYPE UNION ALL SELECT BASE_YMD, '원료' AS TYPE, SUM(AMT) AS AMT, SUM(WGT) AS WGT FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = '2025-01-31' GROUP BY BASE_YMD ) SELECT cm.TYPE, cm.AMT AS CURRENT_AMT, cm.WGT AS CURRENT_WGT, pm.AMT AS PREVIOUS_AMT, pm.WGT AS PREVIOUS_WGT, (cm.AMT - pm.AMT) AS AMT_CHANGE, (cm.WGT - pm.WGT) AS WGT_CHANGE FROM current_month cm JOIN previous_month pm ON cm.TYPE = pm.TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "cm.TYPE",
        "cm.AMT.label('CURRENT_AMT')",
        "cm.WGT.label('CURRENT_WGT')",
        "pm.AMT.label('PREVIOUS_AMT')",
        "pm.WGT.label('PREVIOUS_WGT')",
        "(cm.AMT - pm.AMT).label('AMT_CHANGE')",
        "(cm.WGT - pm.WGT).label('WGT_CHANGE')"
      ],
      "conditions": [
        "cm.BASE_YMD == '2025-02-28'",
        "pm.BASE_YMD == '2025-01-31'",
        "cm.TYPE.in_(['제품', '재공'])"
      ],
      "group_by": [
        "cm.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 7월의 재공 재고를 대상으로 공장별 중량을 계산하고 그 중량을 다시 대강종별로 나눠 표시해주세요.",
    "answer": "SELECT FACTORY_TY, IRN_LARGE_NM, SUM(WGT) AS total_weightFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE BASE_YMD = DATE '2024-07-31' AND TYPE = '재공'GROUP BY FACTORY_TY, IRN_LARGE_NMORDER BY FACTORY_TY, IRN_LARGE_NM;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.FACTORY_TY",
        "Table.IRN_LARGE_NM",
        "func.sum(Table.WGT).label('total_weight')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2024-07-31'",
        "Table.TYPE == '재공'"
      ],
      "group_by": [
        "Table.FACTORY_TY",
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "Table.FACTORY_TY",
        "Table.IRN_LARGE_NM"
      ],
      "transformations": []
    }
  },
  {
    "question": "최근 6개월간 특수합금 재고의 중량과 금액 추이를 보여줘",
    "answer": "WITH product_wip_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) AND LEFT(IRN_CODE, 1) = 'V' GROUP BY BASE_YMD), raw_material_data AS (SELECT BASE_YMD, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD >= DATE_SUB(DATE '2025-05-05', INTERVAL 6 MONTH) AND CAT_L1 = '합금철' AND CAT_L2 IN ('우주항공용', '특수합금철') GROUP BY BASE_YMD)SELECT '제품 및 재공' AS category, BASE_YMD, total_weight, total_amountFROM product_wip_dataUNION ALLSELECT '원료' AS category, BASE_YMD, total_weight, total_amountFROM raw_material_dataORDER BY BASE_YMD, category;",
    "sqlalchemy": {
      "selected_columns": [
        "'제품 및 재공' AS category",
        "Table.BASE_YMD",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.BASE_YMD >= func.date_sub(func.date('2025-05-05'), func.interval(6, 'MONTH'))",
        "Table.IRN_CODE.like('V')"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "category"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 재고 각각의 금액이 몇 원에서 몇 원으로 얼마나 줄었어? 제품, 재공, 원료 별로 증감을 보여줘",
    "answer": "WITH product_wip_feb AS (SELECT TYPE, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' GROUP BY TYPE), product_wip_dec AS (SELECT TYPE, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' GROUP BY TYPE), raw_material_feb AS (SELECT '원료' AS TYPE, SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28'), raw_material_dec AS (SELECT '원료' AS TYPE, SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2024-12-31')SELECT COALESCE(feb.TYPE, dec.TYPE) AS TYPE, COALESCE(feb.total_amount, 0) AS amount_feb, COALESCE(dec.total_amount, 0) AS amount_dec, (COALESCE(feb.total_amount, 0) - COALESCE(dec.total_amount, 0)) AS amount_changeFROM (SELECT * FROM product_wip_feb UNION ALL SELECT * FROM raw_material_feb) febFULL OUTER JOIN (SELECT * FROM product_wip_dec UNION ALL SELECT * FROM raw_material_dec) dec ON feb.TYPE = dec.TYPEORDER BY TYPE;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(feb.TYPE, dec.TYPE).label('TYPE')",
        "func.coalesce(feb.total_amount, 0).label('amount_feb')",
        "func.coalesce(dec.total_amount, 0).label('amount_dec')",
        "(func.coalesce(feb.total_amount, 0) - func.coalesce(dec.total_amount, 0)).label('amount_change')"
      ],
      "conditions": [],
      "group_by": [],
      "order_by": [
        "TYPE"
      ],
      "transformations": [],
      "subqueries": [
        {
          "alias": "feb",
          "selected_columns": [
            "Table.TYPE",
            "func.sum(Table.AMT).label('total_amount')"
          ],
          "conditions": [
            "Table.BASE_YMD == '2025-02-28'"
          ],
          "group_by": [
            "Table.TYPE"
          ]
        },
        {
          "alias": "dec",
          "selected_columns": [
            "Table.TYPE",
            "func.sum(Table.AMT).label('total_amount')"
          ],
          "conditions": [
            "Table.BASE_YMD == '2024-12-31'"
          ],
          "group_by": [
            "Table.TYPE"
          ]
        }
      ]
    }
  },
  {
    "question": "24년 12월 대비 25년 2월의 재고 각각의 금액이 몇 원에서 몇 원으로 얼마나 줄었어? 제품, 재공, 원료 별로 증감을 보여줘",
    "answer": "WITH current_month_data AS (SELECT TYPE, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' GROUP BY TYPE), previous_month_data AS (SELECT TYPE, SUM(AMT) AS total_amount FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2024-12-31' GROUP BY TYPE), current_raw AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2025-02-28'), previous_raw AS (SELECT SUM(AMT) AS total_amount FROM css_daquv.POC_RAW_MATERIAL_MONTHLY WHERE BASE_YMD = DATE '2024-12-31')SELECT COALESCE(c.TYPE, '원료') AS TYPE, COALESCE(c.total_amount, 0) AS current_amount, COALESCE(p.total_amount, 0) AS previous_amount, (COALESCE(c.total_amount, 0) - COALESCE(p.total_amount, 0)) AS amount_changeFROM current_month_data cFULL OUTER JOIN previous_month_data p ON c.TYPE = p.TYPEUNION ALLSELECT '원료' AS TYPE, current_raw.total_amount AS current_amount, previous_raw.total_amount AS previous_amount, (current_raw.total_amount - previous_raw.total_amount) AS amount_changeFROM current_raw, previous_raw;",
    "sqlalchemy": {
      "selected_columns": [
        "func.coalesce(c.TYPE, '원료').label('TYPE')",
        "func.coalesce(c.total_amount, 0).label('current_amount')",
        "func.coalesce(p.total_amount, 0).label('previous_amount')",
        "(func.coalesce(c.total_amount, 0) - func.coalesce(p.total_amount, 0)).label('amount_change')"
      ],
      "conditions": [],
      "group_by": [
        "c.TYPE"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "전체 재고중에서 판매처가 강관영업팀인 대상에 대해 전체 중량과 금액을 월별로 표시해주세요.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS year_month, SUM(WGT) AS total_weight, SUM(AMT) AS total_amount FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE TEAM_CUST_TY_NM = '강관영업팀' GROUP BY 1 ORDER BY 1",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('year_month')",
        "func.sum(Table.WGT).label('total_weight')",
        "func.sum(Table.AMT).label('total_amount')"
      ],
      "conditions": [
        "Table.TEAM_CUST_TY_NM == '강관영업팀'"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 SPX 관련 재고의 톤수와 전월 대비 증감은?",
    "answer": "WITH monthly_data AS (SELECT BASE_YMD, SUM(WGT) / POWER(10, 3) AS total_weight_ton FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-02-28' AND REAL_CUST_NM IN ('Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals') GROUP BY BASE_YMD), previous_month_data AS (SELECT SUM(WGT) / POWER(10, 3) AS total_weight_ton FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = DATE '2025-01-31' AND REAL_CUST_NM IN ('Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'))SELECT md.BASE_YMD, md.total_weight_ton, md.total_weight_ton - pm.total_weight_ton AS weight_changeFROM monthly_data mdJOIN previous_month_data pm ON TRUE;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "func.sum(Table.WGT) / 1000.0.label('total_weight_ton')",
        "(func.sum(Table.WGT) / 1000.0 - pm.total_weight_ton).label('weight_change')"
      ],
      "conditions": [
        "Table.BASE_YMD == '2025-02-28'",
        "Table.REAL_CUST_NM.in_(['Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'])"
      ],
      "group_by": [
        "Table.BASE_YMD"
      ],
      "order_by": [],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 1월, 25년 2월의 특수합금 제품 재고 중 대강종이 특수합금이면서 실수요가명이 Space X, Ram Alloys, SPHERE POWER INC., United Performance Metals에 하나라도 해당되는 대상을 월별로 중량은 톤, 금액은 억원 단위로 알려줘.",
    "answer": "SELECT FORMAT_DATE('%Y-%m', BASE_YMD) AS MONTH, SUM(WGT) / POWER(10, 3) AS total_weight_ton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '제품' AND IRN_LARGE_NM = '특수합금' AND REAL_CUST_NM IN ('Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals') AND BASE_YMD IN (DATE '2024-12-31', DATE '2025-01-31', DATE '2025-02-28')GROUP BY MONTHORDER BY MONTH;",
    "sqlalchemy": {
      "selected_columns": [
        "func.format_date('%Y-%m', Table.BASE_YMD).label('MONTH')",
        "func.sum(Table.WGT) / 1000.0.label('total_weight_ton')",
        "func.sum(Table.AMT) / 100000000.0.label('total_amount_won')"
      ],
      "conditions": [
        "Table.TYPE == '제품'",
        "Table.IRN_LARGE_NM == '특수합금'",
        "Table.REAL_CUST_NM.in_(['Space X', 'Ram Alloys', 'SPHERE POWER INC.', 'United Performance Metals'])",
        "Table.BASE_YMD.in_([func.date('2024-12-31'), func.date('2025-01-31'), func.date('2025-02-28')])"
      ],
      "group_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "order_by": [
        "func.format_date('%Y-%m', Table.BASE_YMD)"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 9월 전체 제품 재고 중에서 대강종 S에 대해 전체 중량과 금액을 천톤, 억원 단위로 나타내고 사내강종별로 중량 기준 내림차순으로 보여주세요.",
    "answer": "SELECT ROUND(SUM(SUM(WGT)) OVER () / 1000000, 2) AS total_weight_thousand_ton, ROUND(SUM(SUM(AMT)) OVER () / 100000000, 2) AS total_amount_billion, IRN_NAME AS internal_grade_name, SUM(WGT) AS total_weight_by_grade FROM `css_daquv.POC_PRODUCT_WIP_MONTHLY` WHERE FORMAT_DATE('%Y-%m', BASE_YMD) = '2024-09' AND TYPE = '제품' AND SUBSTR(IRN_CODE, 1, 1) = 'S' GROUP BY `internal_grade_name` ORDER BY `total_weight_by_grade` DESC",
    "sqlalchemy": {
      "selected_columns": [
        "func.round(func.sum(func.sum(Table.WGT)).over() / 1000000, 2).label('total_weight_thousand_ton')",
        "func.round(func.sum(func.sum(Table.AMT)).over() / 100000000, 2).label('total_amount_billion')",
        "Table.IRN_NAME.label('internal_grade_name')",
        "func.sum(Table.WGT).label('total_weight_by_grade')"
      ],
      "conditions": [
        "func.format_date('%Y-%m', Table.BASE_YMD) == '2024-09'",
        "Table.TYPE == '제품'",
        "Table.IRN_CODE.substr(0, 1) == 'S'"
      ],
      "group_by": [
        "Table.IRN_NAME"
      ],
      "order_by": [
        "func.sum(Table.WGT).desc()"
      ],
      "transformations": []
    }
  },
  {
    "question": "2025년 2월 기준 W-order 재고의 제품, 재공별 총 중량과 금액 및 전월 대비 증감은?",
    "answer": "WITH feb_data AS ( SELECT TYPE, SUM(WGT) AS feb_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-02-28' AND PREQ_NO LIKE 'W%' GROUP BY TYPE ), jan_data AS ( SELECT TYPE, SUM(WGT) AS jan_weight FROM css_daquv.POC_PRODUCT_WIP_MONTHLY WHERE BASE_YMD = '2025-01-31' AND PREQ_NO LIKE 'W%' GROUP BY TYPE ) SELECT f.TYPE AS product_type, f.feb_weight AS february_weight, j.jan_weight AS january_weight, (f.feb_weight - COALESCE(j.jan_weight, 0)) AS weight_change FROM feb_data f LEFT JOIN jan_data j ON f.TYPE = j.TYPE ORDER BY f.TYPE",
    "sqlalchemy": {
      "selected_columns": [
        "Table.TYPE.label('product_type')",
        "func.sum(func.case([(Table.BASE_YMD == '2025-02-28', Table.WGT)], else_=0)).label('february_weight')",
        "func.sum(func.case([(Table.BASE_YMD == '2025-01-31', Table.WGT)], else_=0)).label('january_weight')",
        "(func.sum(func.case([(Table.BASE_YMD == '2025-02-28', Table.WGT)], else_=0)) - func.coalesce(func.sum(func.case([(Table.BASE_YMD == '2025-01-31', Table.WGT)], else_=0)), 0)).label('weight_change')"
      ],
      "conditions": [
        "Table.PREQ_NO.like('W%')"
      ],
      "group_by": [
        "Table.TYPE"
      ],
      "order_by": [
        "Table.TYPE"
      ],
      "transformations": []
    }
  },
  {
    "question": "24년 12월, 25년 2월, 25년 3월에 대한 재공품의 중량과 금액을 대강종별로 각각 보여줘. 단, 중량은 천톤, 금액은 억원.",
    "answer": "SELECT BASE_YMD, IRN_LARGE_NM AS large_grade, SUM(WGT) / POWER(10, 6) AS total_weight_kton, SUM(AMT) / POWER(10, 8) AS total_amount_wonFROM css_daquv.POC_PRODUCT_WIP_MONTHLYWHERE TYPE = '재공' AND BASE_YMD IN (DATE '2024-12-31', DATE '2025-02-28', DATE '2025-03-31')GROUP BY BASE_YMD, IRN_LARGE_NMORDER BY BASE_YMD, IRN_LARGE_NM;",
    "sqlalchemy": {
      "selected_columns": [
        "Table.BASE_YMD",
        "Table.IRN_LARGE_NM.label('large_grade')",
        "func.sum(Table.WGT) / func.power(10, 6).label('total_weight_kton')",
        "func.sum(Table.AMT) / func.power(10, 8).label('total_amount_won')"
      ],
      "conditions": [
        "Table.TYPE == '재공'",
        "Table.BASE_YMD.in_(['2024-12-31', '2025-02-28', '2025-03-31'])"
      ],
      "group_by": [
        "Table.BASE_YMD",
        "Table.IRN_LARGE_NM"
      ],
      "order_by": [
        "Table.BASE_YMD",
        "Table.IRN_LARGE_NM"
      ],
      "transformations": []
    }
  }
]