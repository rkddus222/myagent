question,answer,converted_question,일치여부,의견
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240116'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240116""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20240116')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240723'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240723""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 열(bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 동작이 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd <> 'KRW' AND reg_dt = '20240523'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240523""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240829'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240829""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20240829')과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240622'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240622""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('증권', 'KRW', '20240622')과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt, SUM(real_amt) AS total_real_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250113' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""sum"",
            ""column"": ""acct_bal_amt"",
            ""label"": ""total_acct_bal_amt""
        },
        {
            ""func"": ""sum"",
            ""column"": ""real_amt"",
            ""label"": ""total_real_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250113""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}","SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt, sum(aicfo_get_all_amt.real_amt) AS total_real_amt 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",예,"두 쿼리는 동일한 조건을 사용하여 `bank_nm`으로 그룹화하고, `acct_bal_amt`와 `real_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240928'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240928""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20240928')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20221206'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20221206""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20221206')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND due_dt < '20180227' AND reg_dt = '20171127'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""due_dt"",
            ""op"": ""lt"",
            ""value"": ""20180227""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20171127""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.due_dt < :due_dt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, due_dt, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240704'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240704""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd <> 'KRW' AND reg_dt = '20211109'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20211109""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20211109')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240831'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240831""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20240831')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '신한은행' AND reg_dt = '20240313'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""신한은행""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240313""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :bank_nm_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('수시', 'KRW', '신한은행', '20240313')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_dv LIKE '%당좌%' AND reg_dt = '20240413'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_dv"",
            ""op"": ""like"",
            ""value"": ""%당좌%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240413""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_dv, reg_dt)을 사용하여 동일한 컬럼(bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 동작이 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%0220%' AND reg_dt = '20240513'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%0220%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240513""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 동일한 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 일치하는 조건을 나타내므로 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240613'  ORDER BY acct_bal_amt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240613""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""acct_bal_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",예,"두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND real_amt >= POWER(10,8) AND reg_dt = '20240713'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""real_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""10^8""
            }
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240713""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.real_amt >= :real_amt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240103'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240103""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'USD' AND reg_dt = '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""USD""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241231""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241231""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20241231')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND bank_nm = '신한은행' AND reg_dt = '20240701'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""신한은행""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240701""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :bank_nm_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '신한은행', '20240701')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND reg_dt = '20241212'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%12065128558451%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241212""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240708'  ORDER BY open_dt ASC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240708""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""open_dt"",
            ""direction"": ""asc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.open_dt ASC",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택된 컬럼과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20240708')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_bal_amt >= POWER(10,8) AND reg_dt = '20240516'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240516""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_amt` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND intr_rate >= 3 AND reg_dt = '20240603'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""intr_rate"",
            ""op"": ""ge"",
            ""value"": 3
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240603""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate >= :intr_rate_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, intr_rate, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금'AND curr_cd = 'USD' AND reg_dt = '20240629'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""USD""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240629""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'USD', '20240629')과 동일한 역할을 하므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241231""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20241231')과 동일한 역할을 하므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND reg_dt = '20241119'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""기업은행""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241119""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, bank_nm, reg_dt)을 사용하여 동일한 열(bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%1314%' AND reg_dt = '20240909'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%1314%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240909""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 동일한 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240727'  ORDER BY acct_bal_amt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240727""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""acct_bal_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",예,"두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240919'  ORDER BY open_dt ASC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240919""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""open_dt"",
            ""direction"": ""asc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.open_dt ASC",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택된 컬럼과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND intr_rate = 3 AND reg_dt = '20241009'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""intr_rate"",
            ""op"": ""eq"",
            ""value"": 3
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241009""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate = :intr_rate_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, intr_rate, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택하는 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND intr_rate >= 3 AND intr_rate < 4 AND reg_dt = '20241009'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""intr_rate"",
            ""op"": ""ge"",
            ""value"": 3
        },
        {
            ""column"": ""intr_rate"",
            ""op"": ""lt"",
            ""value"": 4
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241009""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate >= :intr_rate_1 AND aicfo_get_all_amt.intr_rate < :intr_rate_2 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_amt` 테이블에서 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND intr_rate >= 3 AND intr_rate < 4 AND reg_dt = '20241009'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""intr_rate"",
            ""op"": ""ge"",
            ""value"": 3
        },
        {
            ""column"": ""intr_rate"",
            ""op"": ""lt"",
            ""value"": 4
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241009""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.intr_rate >= :intr_rate_1 AND aicfo_get_all_amt.intr_rate < :intr_rate_2 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_amt` 테이블에서 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 조건을 나타내므로 결과가 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd <> 'KRW' AND reg_dt = '20240726'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240726""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 데이터를 선택하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'USD' AND reg_dt = '20240409'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""USD""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240409""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 필터링하고 있습니다. 변환된 SQL에서는 바인드 변수를 사용하고 있지만, 이는 실행 시점에 값이 대입되므로 결과적으로 동일한 동작을 수행합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241231""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('증권', 'KRW', '20241231')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND bank_nm = '삼성증권' AND reg_dt = '20240113'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성증권""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240113""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm = :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, bank_nm, reg_dt)을 사용하여 동일한 컬럼(bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 동작이 일치합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND (acct_dv LIKE 'ELS%' OR acct_dv LIKE 'DLS%') AND reg_dt = '20240707'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_dv"",
            ""op"": ""like"",
            ""value"": ""ELS%""
        },
        {
            ""column"": ""acct_dv"",
            ""op"": ""like"",
            ""value"": ""DLS%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240707""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_2 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",아니오,"변환된 SQL 쿼리에서 `acct_dv` 조건이 `LIKE :acct_dv_1 AND :acct_dv_2`로 되어 있어, 원본 SQL의 `acct_dv LIKE 'ELS%' OR acct_dv LIKE 'DLS%'` 조건과 일치하지 않습니다. 원본 쿼리는 두 조건 중 하나라도 만족하면 결과를 반환하지만, 변환된 쿼리는 두 조건을 모두 만족해야 합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND reg_dt = '20240325'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%12065128558451%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240325""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240905'  ORDER BY deposit_amt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240905""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""deposit_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.deposit_amt DESC",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 조회하고 있으며, 선택된 컬럼과 정렬 기준도 동일하므로 같은 동작을 합니다. SQLAlchemy에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값과 동일한 역할을 하므로 결과에 영향을 미치지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_bal_amt >= POWER(10,8) AND reg_dt = '20240814'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240814""
        }
    ]
}",Error: Column 'trsc_dt' not found in AccountAmount,아니오,변환된 SQL에서 'trsc_dt' 컬럼이 'AccountAmount' 테이블에 존재하지 않기 때문에 원본 SQL과 동일한 동작을 하지 않습니다.
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250105'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250105""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20250105')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240425'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240425""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 열을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20240425')과 동일한 역할을 하므로 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240328'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240328""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 동일한 컬럼을 선택하고 있으며, SQLAlchemy에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240331'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240331""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, SQLAlchemy 변환 후에도 원본 SQL의 의미를 그대로 유지하고 있습니다. 단지 변수 바인딩 방식이 사용되었을 뿐입니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240224'  ORDER BY intr_rate DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240224""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""intr_rate"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.intr_rate DESC",예,"두 쿼리는 동일한 테이블과 컬럼을 사용하고 있으며, 조건절과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND due_dt < '20250405' AND reg_dt = '20250105'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""due_dt"",
            ""op"": ""lt"",
            ""value"": ""20250405""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250105""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.due_dt < :due_dt_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, due_dt, reg_dt)을 사용하여 데이터를 조회하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :due_dt_1, :reg_dt_1)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_dv LIKE '%예금%' AND reg_dt = '20250114'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_dv"",
            ""op"": ""like"",
            ""value"": ""%예금%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250114""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE  curr_cd = 'KRW' AND AND bank_nm LIKE '%기업은행%' reg_dt = '20250108'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""like"",
            ""value"": ""%기업은행%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250108""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.bank_nm LIKE :bank_nm_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",아니오,"원본 SQL 쿼리에서 `AND`가 두 번 사용되었고, `bank_nm LIKE '%기업은행%'` 조건 뒤에 `AND`가 잘못 포함되어 있습니다. 또한, `reg_dt = '20250108'` 조건이 `AND` 없이 나열되어 있어 문법적으로 오류가 있습니다. 변환된 SQL 쿼리는 이러한 오류를 수정하고, 바인딩 변수를 사용하여 조건을 명확히 하고 있습니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt, SUM(real_amt) AS total_real_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250113' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""sum"",
            ""column"": ""acct_bal_amt"",
            ""label"": ""total_acct_bal_amt""
        },
        {
            ""func"": ""sum"",
            ""column"": ""real_amt"",
            ""label"": ""total_real_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250113""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}","SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt, sum(aicfo_get_all_amt.real_amt) AS total_real_amt 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",예,"두 쿼리는 동일한 조건을 사용하여 `bank_nm`으로 그룹화하고, `acct_bal_amt`와 `real_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241231""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 같은 데이터를 선택하고 있으며, SQLAlchemy 변환 후에도 원본 SQL의 조건과 필드가 일치합니다. 단지 변수 바인딩 방식이 다를 뿐, 결과는 동일합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240727'  ORDER BY cntrct_amt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240727""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""cntrct_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.cntrct_amt DESC",아니오,"변환된 SQL 쿼리에서 `ORDER BY` 절에 사용된 `cntrct_amt` 컬럼이 원본 SQL 쿼리와 다릅니다. 원본 쿼리에서는 `cntrct_amt`가 사용되었지만, 변환된 쿼리에서는 이 컬럼이 명시되지 않았거나 잘못된 컬럼으로 보입니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20250105'  ORDER BY due_dt ASC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250105""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""due_dt"",
            ""direction"": ""asc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.due_dt ASC",예,"두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, curr_cd, deposit_foreign, total_appr_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권'  and curr_cd = 'USD' AND reg_dt = '20240301'  ORDER BY deposit_amt DESC LIMIT 1 ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""deposit_foreign"",
        ""total_appr_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""USD""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240301""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""deposit_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.deposit_foreign, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.deposit_amt DESC",아니오,"변환된 SQL 쿼리에서 `LIMIT 1`이 누락되어 있어 결과의 개수가 다를 수 있습니다. 원본 SQL은 결과를 1개로 제한하지만, 변환된 SQL은 제한이 없으므로 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250116'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250116""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('수시', 'KRW', '20250116')과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
"SELECT reg_dt, bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt BETWEEN '20241230' AND '20250105'   ","{
    ""select"": [
        ""reg_dt"",
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""between"",
            ""value"": [""20241230"", ""20250105""]
        }
    ]
}","SELECT aicfo_get_all_amt.reg_dt, aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt BETWEEN :reg_dt_1 AND :reg_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%2105%' AND reg_dt = '20241219'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%2105%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241219""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 일치하는 값을 대체하는 것으로, 쿼리의 동작에 영향을 미치지 않습니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%4651%' AND reg_dt = '20240909'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%4651%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240909""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND acct_no LIKE '%4415%' AND reg_dt = '20241016'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%4415%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241016""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 갖습니다. 따라서 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%4898%' AND reg_dt = '20241017'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%4898%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241017""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 동일한 열(bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm)을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%2105%' AND reg_dt = '20240921'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%2105%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240921""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 일치하는 값으로 설정될 수 있으므로 동작이 동일합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%5868%' AND reg_dt = '20241101'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%5868%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241101""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 동일한 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND acct_no LIKE '%5465%' AND reg_dt = '20241003'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%5465%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241003""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%58878%' AND reg_dt = '20241210'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%58878%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241210""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20241004' AND acct_bal_amt <> 0   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241004""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ne"",
            ""value"": 0
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20241130' AND acct_bal_amt <> 0   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241130""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ne"",
            ""value"": 0
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20241109' AND acct_bal_amt <> 0   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241109""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ne"",
            ""value"": 0
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20241023' AND acct_bal_amt <> 0   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241023""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ne"",
            ""value"": 0
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt != :acct_bal_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%100037340220%' AND reg_dt = '20241023'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%100037340220%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241023""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%28491002652105%' AND reg_dt = '20240915'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%28491002652105%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240915""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, acct_no, reg_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 값과 일치하는 조건을 나타내므로 동작이 동일합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%11791003586905%' AND reg_dt = '20240206'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%11791003586905%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240206""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 컬럼을 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND acct_no LIKE '%1005404208279%' AND reg_dt = '20240218'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%1005404208279%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240218""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택하는 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%100037589692%' AND reg_dt = '20250105'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%100037589692%""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250105""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.acct_no LIKE :acct_no_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 조건을 나타내므로, 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250205' AND acct_bal_amt >= POWER(10,8)   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250205""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240722' AND acct_bal_amt >= POWER(10,8)   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240722""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt, acct_bal_amt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240713' AND acct_bal_amt >= POWER(10,8)   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240713""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240713' AND acct_bal_amt >= POWER(10,8)   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240713""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240706' AND acct_bal_amt >= POWER(10,8)   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240706""
        },
        {
            ""column"": ""acct_bal_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 AND aicfo_get_all_amt.acct_bal_amt >= :acct_bal_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20241202'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241202""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20241202')과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240715'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240715""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 열을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('대출', 'KRW', '20240715')과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240707'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240707""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240225'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240225""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, reg_dt)을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('증권', 'KRW', '20240225')과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20250122' GROUP BY bank_nm ORDER BY account_count DESC ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""acct_no"",
            ""label"": ""account_count""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250122""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ],
    ""order_by"": [
        {
            ""column"": ""account_count"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",아니오,"변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 무시되고 있습니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20250113' GROUP BY bank_nm ORDER BY account_count DESC ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""acct_no"",
            ""label"": ""account_count""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250113""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ],
    ""order_by"": [
        {
            ""column"": ""account_count"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",아니오,"변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 내림차순 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 무시되는 상태입니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '외화' AND curr_cd = 'KRW' AND reg_dt = '20240723' GROUP BY bank_nm ORDER BY account_count DESC ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""acct_no"",
            ""label"": ""account_count""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""외화""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240723""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ],
    ""order_by"": [
        {
            ""column"": ""account_count"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",아니오,"변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 NULL로 설정되어 있어 결과가 다를 수 있습니다."
"SELECT bank_nm, COUNT(acct_no) AS account_count FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240815' GROUP BY bank_nm ORDER BY account_count DESC ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""acct_no"",
            ""label"": ""account_count""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240815""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ],
    ""order_by"": [
        {
            ""column"": ""account_count"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, count(aicfo_get_all_amt.acct_no) AS account_count 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm ORDER BY NULL DESC",아니오,"변환된 SQL 쿼리에서 `ORDER BY NULL DESC`는 원본 SQL의 `ORDER BY account_count DESC`와 다릅니다. 원본 쿼리는 `account_count`를 기준으로 정렬하지만, 변환된 쿼리는 정렬 기준이 없거나 명시되지 않아 결과가 다를 수 있습니다."
"SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20240917' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""sum"",
            ""column"": ""acct_bal_amt"",
            ""label"": ""total_acct_bal_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240917""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}","SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",예,"두 쿼리는 동일한 조건을 사용하여 `bank_nm`별로 `acct_bal_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 동일하게 유지되고 있습니다. 단지 변환된 SQL에서 파라미터 바인딩을 사용하고 있을 뿐, 쿼리의 논리적 동작은 동일합니다."
"SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd = 'KRW' AND reg_dt = '20241012' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""sum"",
            ""column"": ""acct_bal_amt"",
            ""label"": ""total_acct_bal_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241012""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}","SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",예,"두 쿼리는 동일한 조건을 사용하여 `bank_nm`별로 `acct_bal_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 동일하게 설정되어 있습니다. 단지 변환된 SQL에서 변수 바인딩을 사용하고 있을 뿐, 쿼리의 논리적 구조는 동일합니다."
"SELECT bank_nm, curr_cd, SUM(acct_bal_amt) AS total_acct_bal_amt, SUM(real_amt) AS total_real_amt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20241202' GROUP BY bank_nm, curr_cd  ","{
    ""select"": [
        ""bank_nm"",
        ""curr_cd"",
        {
            ""func"": ""sum"",
            ""column"": ""acct_bal_amt"",
            ""label"": ""total_acct_bal_amt""
        },
        {
            ""func"": ""sum"",
            ""column"": ""real_amt"",
            ""label"": ""total_real_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241202""
        }
    ],
    ""group_by"": [
        ""bank_nm"",
        ""curr_cd""
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.curr_cd, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt, sum(aicfo_get_all_amt.real_amt) AS total_real_amt 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.curr_cd",예,"두 쿼리는 동일한 조건과 집계 함수를 사용하고 있으며, GROUP BY 절도 동일하게 구성되어 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, SUM(acct_bal_amt) AS total_acct_bal_amt FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20241223' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""sum"",
            ""column"": ""acct_bal_amt"",
            ""label"": ""total_acct_bal_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241223""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}","SELECT aicfo_get_all_amt.bank_nm, sum(aicfo_get_all_amt.acct_bal_amt) AS total_acct_bal_amt 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 GROUP BY aicfo_get_all_amt.bank_nm",예,"두 쿼리는 동일한 조건을 사용하여 `bank_nm`별로 `acct_bal_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240123'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240123""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('예적금', 'KRW', '20240123')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND reg_dt = '20250112' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""acct_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""기업은행""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250112""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}",Error: Column '*' not found in AccountAmount,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용하려고 했지만, SQLAlchemy에서 '*'를 사용할 수 없다는 오류가 발생했습니다. 이는 원본 SQL 쿼리와 변환된 쿼리가 동일한 동작을 하지 않음을 나타냅니다."
"SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND bank_nm = '신한은행' AND reg_dt = '20250113' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""acct_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""신한은행""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250113""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}",Error: Column '*' not found in AccountAmount,아니오,"변환된 SQL에서 `COUNT(*)`를 사용하려고 했지만, `Column '*' not found in AccountAmount`라는 오류가 발생하여 쿼리가 제대로 변환되지 않았습니다. 원본 SQL의 동작을 수행하지 못하고 있습니다."
"SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND bank_nm = '하나은행' AND reg_dt = '20240723' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""acct_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""하나은행""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240723""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}",Error: Column '*' not found in AccountAmount,아니오,"변환된 SQL에서 `COUNT(*)`를 사용하려고 했지만, SQLAlchemy에서 `*`를 사용할 수 없어서 오류가 발생했습니다. 원본 SQL의 의도와 다르게 동작하고 있습니다."
"SELECT bank_nm, COUNT(*) AS acct_cnt FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND bank_nm = '삼성증권' AND reg_dt = '20241012' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""acct_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성증권""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241012""
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}",Error: Column '*' not found in AccountAmount,아니오,"변환된 SQL에서 COUNT(*)를 사용하려고 했지만, '*'가 존재하지 않는 열로 인식되어 오류가 발생했습니다. 원본 SQL의 COUNT(*)와 동일한 동작을 하지 않기 때문에 두 쿼리는 일치하지 않습니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND reg_dt = '20240123'  ORDER BY acct_bal_amt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240123""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""acct_bal_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 선택하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('예적금', 'KRW', '20240123')을 대체하는 것으로, 실행 시 동일한 값을 제공하면 결과는 동일합니다."
"SELECT bank_nm, acct_dv, acct_no, acct_bal_amt, open_dt, due_dt, intr_rate, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '대출' AND curr_cd = 'KRW' AND reg_dt = '20240202'  ORDER BY acct_bal_amt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""acct_bal_amt"",
        ""open_dt"",
        ""due_dt"",
        ""intr_rate"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240202""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""acct_bal_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.open_dt, aicfo_get_all_amt.due_dt, aicfo_get_all_amt.intr_rate, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",예,"두 쿼리는 동일한 테이블(aicfo_get_all_amt)에서 동일한 조건(view_dv, curr_cd, reg_dt)으로 데이터를 조회하고 있으며, 선택된 컬럼과 정렬 기준도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_dv, acct_no, curr_cd, acct_bal_amt, real_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND reg_dt = '20240723'  ORDER BY acct_bal_amt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_dv"",
        ""acct_no"",
        ""curr_cd"",
        ""acct_bal_amt"",
        ""real_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240723""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""acct_bal_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_dv, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.curr_cd, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.real_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd != :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고, 동일한 컬럼을 선택하며, 결과를 동일한 기준으로 정렬하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, deposit_amt, total_appr_amt, acct_bal_amt, acct_bal_upd_dtm FROM aicfo_get_all_amt WHERE view_dv = '증권' AND curr_cd = 'KRW' AND reg_dt = '20240516'  ORDER BY acct_bal_amt DESC","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""deposit_amt"",
        ""total_appr_amt"",
        ""acct_bal_amt"",
        ""acct_bal_upd_dtm""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240516""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""acct_bal_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_amt.bank_nm, aicfo_get_all_amt.acct_no, aicfo_get_all_amt.deposit_amt, aicfo_get_all_amt.total_appr_amt, aicfo_get_all_amt.acct_bal_amt, aicfo_get_all_amt.acct_bal_upd_dtm 
FROM aicfo_get_all_amt 
WHERE aicfo_get_all_amt.view_dv = :view_dv_1 AND aicfo_get_all_amt.curr_cd = :curr_cd_1 AND aicfo_get_all_amt.reg_dt = :reg_dt_1 ORDER BY aicfo_get_all_amt.acct_bal_amt DESC",예,"두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, 선택된 컬럼과 정렬 기준도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240606' AND '20240706'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240606"", ""20240706""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv='예적금' and curr_cd <> 'KRW' AND trsc_dt BETWEEN '20231213' AND '20240113'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231213"", ""20240113""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240916' AND '20241016'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240916"", ""20241016""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 열도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv='대출' and curr_cd <> 'KRW' and trsc_dt BETWEEN '20231213' AND '20240113'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231213"", ""20240113""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20231213' AND '20240113'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231213"", ""20240113""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND trsc_dt BETWEEN '20241027' AND '20241127'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241027"", ""20241127""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_amt >= POWER(10,8) AND trsc_dt BETWEEN '20231223' AND '20240123'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_amt"",
            ""op"": ""ge"",
            ""value"": 100000000
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231223"", ""20240123""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 필드와 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT note1, SUM(trsc_amt) AS total_in_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20250101' AND '20250113' GROUP BY note1 ORDER BY total_in_amt DESC LIMIT 1","{
    ""select"": [
        ""note1"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_in_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20250101"", ""20250113""]
        }
    ],
    ""group_by"": [
        ""note1""
    ],
    ""order_by"": [
        {
            ""column"": ""total_in_amt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column 'total_in_amt' not found in Transaction,아니오,"변환된 SQL에서 'total_in_amt'라는 별칭을 사용하고 있지만, SQLAlchemy에서 해당 별칭이 정의되지 않아 오류가 발생했습니다. 원본 SQL 쿼리는 'total_in_amt'를 SUM(trsc_amt)로 정의하고 사용하고 있으므로, 변환된 쿼리는 원본 쿼리와 동일한 동작을 하지 않습니다."
"SELECT TO_CHAR(DATE_TRUNC('month', trsc_dt::timestamp), 'YYYYMM') AS trsc_month, SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_outgoing_amount FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241201' AND '20250113' GROUP BY trsc_month  ","{
    ""select"": [
        {
            ""func"": ""TO_CHAR"",
            ""column"": {
                ""func"": ""DATE_TRUNC"",
                ""column"": ""trsc_dt"",
                ""filter"": {
                    ""column"": ""trsc_dt"",
                    ""op"": ""eq"",
                    ""value"": ""timestamp""
                }
            },
            ""label"": ""trsc_month""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""CASE"",
                ""column"": ""in_out_dv"",
                ""filter"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241201"", ""20250113""]
        }
    ],
    ""group_by"": [
        ""trsc_month""
    ]
}","Error: attribute name must be string, not 'dict'",아니오,"변환된 SQL에서 오류가 발생하여 쿼리가 제대로 변환되지 않았습니다. 원본 SQL의 구조와 논리를 유지하지 못하고 있으며, 따라서 두 쿼리가 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND note1 LIKE '%웹케시%' AND trsc_dt BETWEEN '20240118' AND '20240218'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%웹케시%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240118"", ""20240218""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.note1 LIKE :note1_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20190412' AND '20190512'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20190412"", ""20190512""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT TO_CHAR(DATE_TRUNC('month', trsc_dt::timestamp), 'YYYYMM') AS trsc_month, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW'AND in_out_dv = '출금' AND note1 LIKE '%인건비%' AND trsc_dt BETWEEN '20180505' AND '20190505'  GROUP BY trsc_month  ","{
    ""select"": [
        {
            ""func"": ""TO_CHAR"",
            ""column"": {
                ""func"": ""DATE_TRUNC"",
                ""column"": ""trsc_dt::timestamp"",
                ""label"": ""trsc_month""
            },
            ""label"": ""trsc_month""
        },
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%인건비%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20180505"", ""20190505""]
        }
    ],
    ""group_by"": [
        ""trsc_month""
    ]
}","Error: attribute name must be string, not 'dict'",아니오,"변환된 SQL에서 오류가 발생하였으며, 이는 SQLAlchemy에서 쿼리를 작성하는 과정에서 잘못된 형식의 속성 이름이 사용되었음을 나타냅니다. 원본 SQL 쿼리는 정상적으로 작동하지만, 변환된 SQL은 실행할 수 없는 상태입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '출금'  AND trsc_amt >= POWER(10,8) AND trsc_dt BETWEEN '20241001' AND '20241101'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""10^8""
            }
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241001"", ""20241101""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240520' AND '20240620'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240520"", ""20240620""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240301' AND '20240331'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240301"", ""20240331""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240419' AND '20240519'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240419"", ""20240519""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND trsc_dt BETWEEN '20241011' AND '20241111'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""기업은행""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241011"", ""20241111""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, bank_nm, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금'  AND trsc_dt BETWEEN '20241102' AND '20241202'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241102"", ""20241202""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 동일한 컬럼을 선택하고 있으며, WHERE 절의 조건도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240212' AND '20240312'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240212"", ""20240312""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, in_out_dv, trsc_dt)으로 데이터를 조회하고 있으며, 선택된 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240120' AND '20240220'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240120"", ""20240220""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값('수시', 'KRW', '20240120', '20240220')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND trsc_dt BETWEEN '20240913' AND '20241013'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%12065128558451%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240913"", ""20241013""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_no, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240405' AND '20240505' GROUP BY bank_nm, acct_no ORDER BY in_cnt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""in_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240405"", ""20240505""]
        }
    ],
    ""group_by"": [
        ""bank_nm"",
        ""acct_no""
    ],
    ""order_by"": [
        {
            ""column"": ""in_cnt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용한 부분이 잘못 처리되어 ""Column '*' not found in Transaction"" 오류가 발생했습니다. 이는 원본 SQL의 집계 함수 사용 방식과 변환된 SQL의 구조가 일치하지 않음을 나타냅니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금'AND trsc_dt BETWEEN '20240718' AND '20240818' AND trsc_amt >= POWER(10,8)     ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240718"", ""20240818""]
        },
        {
            ""column"": ""trsc_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd <> 'KRW' AND trsc_dt BETWEEN '20241127' AND '20241227'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241127"", ""20241227""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd != :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'USD' AND trsc_dt = '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""USD""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""eq"",
            ""value"": ""20241231""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt = :trsc_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)을 사용하여 동일한 컬럼을 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 일치합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240101' AND '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240101"", ""20241231""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW ' AND note1 LIKE '%웹케시%' AND trsc_dt BETWEEN '20231231' AND '20240131'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW ""
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%웹케시%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231231"", ""20240131""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.note1 LIKE :note1_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND bank_nm = '기업은행' AND trsc_dt BETWEEN '20231220' AND '20240120'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""기업은행""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231220"", ""20240120""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240819' AND '20240919'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240819"", ""20240919""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20231213' AND '20240113'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231213"", ""20240113""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_dv LIKE '%정기적금%'  AND trsc_dt BETWEEN '20240617' AND '20240717'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_dv"",
            ""op"": ""like"",
            ""value"": ""%정기적금%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240617"", ""20240717""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%'  AND trsc_dt BETWEEN '20240530' AND '20240630'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%12065128558451%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240530"", ""20240630""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금'  AND trsc_dt BETWEEN '20240112' AND '20240212' GROUP BY curr_cd, bank_nm, acct_no ORDER BY in_cnt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""in_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240112"", ""20240212""]
        }
    ],
    ""group_by"": [
        ""curr_cd"",
        ""bank_nm"",
        ""acct_no""
    ],
    ""order_by"": [
        {
            ""column"": ""in_cnt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용한 부분이 SQLAlchemy에서 적절하게 변환되지 않아 오류가 발생했습니다. 원본 SQL 쿼리는 정상적으로 작동하지만, 변환된 쿼리는 컬럼을 찾지 못하는 오류가 발생하여 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv='예적금' and curr_cd = 'USD' AND trsc_dt BETWEEN '20241118' AND '20241218'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""USD""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241118"", ""20241218""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN ' 20241201' AND ' 20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241201"", ""20241231""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240827' AND '20240927' AND note1 LIKE '%웹케시%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240827"", ""20240927""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%웹케시%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt  AND bank_nm = '기업은행'  BETWEEN '20241119' AND '20241219'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241119"", ""20241219""]
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""기업은행""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1",아니오,"원본 SQL 쿼리에서 `trsc_dt` 조건이 잘못 작성되어 있습니다. `trsc_dt`가 `BETWEEN` 절에 포함되어야 하는데, 원본 쿼리에서는 `trsc_dt`가 단독으로 존재하고 있습니다. 이로 인해 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND acct_no LIKE '%120301230%'  AND trsc_dt BETWEEN '20240809' AND '20240909'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%120301230%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240809"", ""20240909""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT curr_cd, bank_nm, acct_no, COUNT(*) AS trsc_cnt FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240916' AND '20241016' GROUP BY curr_cd, bank_nm, acct_no ORDER BY trsc_cnt DESC ","{
    ""select"": [
        ""curr_cd"",
        ""bank_nm"",
        ""acct_no"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""trsc_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240916"", ""20241016""]
        }
    ],
    ""group_by"": [
        ""curr_cd"",
        ""bank_nm"",
        ""acct_no""
    ],
    ""order_by"": [
        {
            ""column"": ""trsc_cnt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용한 부분이 오류를 발생시키고 있으며, 이는 원본 SQL의 의도와 다릅니다. 원본 SQL은 특정 조건에 따라 그룹화된 결과를 반환하는 반면, 변환된 SQL은 올바르게 구성되지 않아 실행할 수 없습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv = '대출' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240917' AND '20241017' AND loan_trsc_amt >= POWER(10,8)   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240917"", ""20241017""]
        },
        {
            ""column"": ""loan_trsc_amt"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""8""
            }
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.loan_trsc_amt >= :loan_trsc_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, curr_cd, trsc_dt, trsc_tm, loan_trsc_amt, loan_intr_amt, trsc_bal, intr_rate FROM aicfo_get_all_trsc WHERE view_dv='대출' and curr_cd = 'USD' AND trsc_dt BETWEEN '20240821' AND '20240921'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""curr_cd"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""loan_trsc_amt"",
        ""loan_intr_amt"",
        ""trsc_bal"",
        ""intr_rate""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""대출""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""USD""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240821"", ""20240921""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.curr_cd, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.loan_trsc_amt, aicfo_get_all_trsc.loan_intr_amt, aicfo_get_all_trsc.trsc_bal, aicfo_get_all_trsc.intr_rate 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241001' AND '20241031'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241001"", ""20241031""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권'  AND curr_cd = 'KRW'AND trsc_dt BETWEEN '20240903' AND '20241003' AND note1 LIKE '%웹케시%'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240903"", ""20241003""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%웹케시%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND bank_nm = 'NH투자증권' AND trsc_dt BETWEEN '20241110' AND '20241210'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""NH투자증권""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241110"", ""20241210""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, bank_nm, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240904' AND '20241004'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240904"", ""20241004""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, in_out_dv, trsc_dt)을 사용하여 동일한 컬럼(bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt)을 선택하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241030' AND '20241130'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241030"", ""20241130""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건(view_dv, curr_cd, in_out_dv, trsc_dt)으로 데이터를 선택하고 있으며, 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_dv like '%신탁%' AND trsc_dt BETWEEN '20241009' AND '20241109'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_dv"",
            ""op"": ""like"",
            ""value"": ""%신탁%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241009"", ""20241109""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_dv LIKE :acct_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND acct_no LIKE '%12065128558451%' AND trsc_dt BETWEEN '20240923' AND '20241023'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%12065128558451%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240923"", ""20241023""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나옵니다."
"SELECT bank_nm, acct_no, COUNT(*) AS trsc_cnt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240923' AND '20241023' GROUP BY curr_cd, bank_nm, acct_no ORDER BY trsc_cnt DESC ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""trsc_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240923"", ""20241023""]
        }
    ],
    ""group_by"": [
        ""curr_cd"",
        ""bank_nm"",
        ""acct_no""
    ],
    ""order_by"": [
        {
            ""column"": ""trsc_cnt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용한 부분이 잘못 처리되어 ""Column '*' not found in Transaction"" 오류가 발생하였기 때문에 원본 SQL과 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, stock_trsc_type, stock_nm, trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '증권' AND curr_cd = 'KRW'  AND trsc_dt BETWEEN '20240815' AND '20240915' AND trsc_amt >= (2*POWER(10,8))   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""stock_trsc_type"",
        ""stock_nm"",
        ""trsc_amt""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""증권""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240815"", ""20240915""]
        },
        {
            ""column"": ""trsc_amt"",
            ""op"": ""ge"",
            ""value"": ""(2*POWER(10,8))""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.stock_trsc_type, aicfo_get_all_trsc.stock_nm, aicfo_get_all_trsc.trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.trsc_amt >= :trsc_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절에서 선택하는 컬럼도 동일합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND  bank_nm LIKE '%기업은행%' AND trsc_dt BETWEEN '20240106' AND '20240206'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""like"",
            ""value"": ""%기업은행%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240106"", ""20240206""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm LIKE :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240118' AND '20240218' AND note1 LIKE '%쿠콘%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240118"", ""20240218""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%쿠콘%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건절도 동일한 논리를 따릅니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240101' AND '20240131' AND note1 LIKE '%인건비%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240101"", ""20240131""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%인건비%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT SUM(CASE WHEN in_out_dv = '입금' THEN trsc_amt ELSE 0 END) AS total_incoming_amount, SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_outgoing_amount, SUM(CASE WHEN in_out_dv = '입금' THEN trsc_amt ELSE 0 END) - SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_net_profit FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20250101' AND '20250131'   ","{
    ""select"": [
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""입금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_incoming_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""입금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_incoming_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""입금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_incoming_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""입금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_incoming_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""입금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_incoming_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""입금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_incoming_amount""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20250101"", ""20250131""]
        }
    ]
}","Error: attribute name must be string, not 'dict'",아니오,변환된 SQL에서 오류가 발생하여 쿼리가 제대로 변환되지 않았습니다. 원본 SQL의 논리와 구조가 유지되지 않았기 때문에 두 쿼리가 동일한 동작을 하지 않습니다.
"SELECT note1, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20250101' AND '20250113' GROUP BY note1 ORDER BY in_cnt DESC LIMIT 1","{
    ""select"": [
        ""note1"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""in_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20250101"", ""20250113""]
        }
    ],
    ""group_by"": [
        ""note1""
    ],
    ""order_by"": [
        {
            ""column"": ""in_cnt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""Column '*' not found in Transaction"" 오류가 발생하여 쿼리가 정상적으로 실행되지 않으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
"SELECT SUM(trsc_amt) AS total_trsc_amt, SUM(CASE WHEN note1 LIKE '%연구비%' THEN trsc_amt ELSE 0 END) AS note_amt, (SUM(CASE WHEN note1 LIKE '%연구비%' THEN trsc_amt ELSE 0 END) / SUM(trsc_amt))*100 as note_ratio FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20250101' AND '20250113'   ","{
    ""select"": [
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        },
        {
            ""func"": ""sum"",
            ""filter"": {
                ""column"": ""note1"",
                ""op"": ""like"",
                ""value"": ""%연구비%""
            },
            ""column"": ""trsc_amt"",
            ""label"": ""note_amt""
        },
        {
            ""func"": ""sum"",
            ""filter"": {
                ""column"": ""note1"",
                ""op"": ""like"",
                ""value"": ""%연구비%""
            },
            ""column"": ""trsc_amt"",
            ""label"": ""note_amt""
        },
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt""
        },
        ""note_ratio""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20250101"", ""20250113""]
        }
    ]
}",Error: Column 'note_ratio' not found in Transaction,아니오,"변환된 SQL에서 'note_ratio' 컬럼이 정의되지 않았거나 참조되지 않아 오류가 발생했습니다. 원본 SQL에서는 'note_ratio'가 SUM 함수의 결과를 기반으로 계산되지만, 변환된 SQL에서는 이를 제대로 처리하지 못하고 있습니다."
"SELECT SUM(CASE WHEN in_out_dv = '입금' THEN trsc_amt ELSE 0 END) AS total_incoming, SUM(CASE WHEN in_out_dv = '출금' THEN trsc_amt ELSE 0 END) AS total_outgoing_amount FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241201' AND '20241231'   ","{
    ""select"": [
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""입금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_incoming""
        },
        {
            ""func"": ""sum"",
            ""column"": {
                ""func"": ""case"",
                ""when"": {
                    ""column"": ""in_out_dv"",
                    ""op"": ""eq"",
                    ""value"": ""출금""
                },
                ""then"": ""trsc_amt"",
                ""else"": 0
            },
            ""label"": ""total_outgoing_amount""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241201"", ""20241231""]
        }
    ]
}","Error: attribute name must be string, not 'dict'",아니오,"변환된 SQL에서 오류가 발생하여 쿼리가 제대로 실행되지 않으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20241102' AND '20241202' AND note1 LIKE '%웹케시%'    ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241102"", ""20241202""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%웹케시%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, COUNT(*) AS in_cnt FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240715' AND '20250115' GROUP BY curr_cd, bank_nm, acct_no ORDER BY in_cnt DESC LIMIT 1","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""in_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240715"", ""20250115""]
        }
    ],
    ""group_by"": [
        ""curr_cd"",
        ""bank_nm"",
        ""acct_no""
    ],
    ""order_by"": [
        {
            ""column"": ""in_cnt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""Column '*' not found in Transaction"" 오류가 발생하여 쿼리가 실행되지 않으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240107' AND '20250107' AND note1 LIKE '%쿠콘%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240107"", ""20250107""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%쿠콘%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '농협' AND acct_no LIKE '%329912%' AND trsc_dt BETWEEN '20241225' AND '20241231'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""농협""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%329912%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241225"", ""20241231""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 조회하고 있으며, SQLAlchemy에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20250109' AND '20250115'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20250109"", ""20250115""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값('수시', 'KRW', '20250109', '20250115')을 대체하는 것으로, 쿼리의 논리적 동작은 동일합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240125' AND '20240131'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240125"", ""20240131""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 컬럼을 선택하고, 동일한 조건(view_dv, curr_cd, trsc_dt)으로 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:view_dv_1, :curr_cd_1, :trsc_dt_1, :trsc_dt_2)는 원본 SQL의 상수 값('수시', 'KRW', '20240125', '20240131')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241201' AND '20241218'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241201"", ""20241218""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND bank_nm = '농협' AND trsc_dt BETWEEN '20200101' AND '20200131' GROUP BY bank_nm  ","{
    ""select"": [
        ""bank_nm"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""농협""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20200101"", ""20200131""]
        }
    ],
    ""group_by"": [
        ""bank_nm""
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.bank_nm",예,"두 쿼리는 동일한 조건을 사용하여 `bank_nm`을 기준으로 `trsc_amt`의 합계를 계산하고 있으며, WHERE 절의 조건과 GROUP BY 절이 동일하게 유지되고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT acct_no, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND acct_no LIKE '%329912%' AND trsc_dt BETWEEN '20231216' AND '20231223' GROUP BY acct_no, in_out_dv  ","{
    ""select"": [
        ""acct_no"",
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""acct_no"",
            ""op"": ""like"",
            ""value"": ""%329912%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231216"", ""20231223""]
        }
    ],
    ""group_by"": [
        ""acct_no"",
        ""in_out_dv""
    ]
}","SELECT aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.in_out_dv, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.acct_no LIKE :acct_no_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.in_out_dv",예,"두 쿼리는 동일한 테이블과 조건을 사용하고 있으며, GROUP BY 절과 SUM 함수의 사용도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20180416' AND '20180516' GROUP BY in_out_dv  ","{
    ""select"": [
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20180416"", ""20180516""]
        }
    ],
    ""group_by"": [
        ""in_out_dv""
    ]
}","SELECT aicfo_get_all_trsc.in_out_dv, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.in_out_dv",예,"두 쿼리는 동일한 조건을 사용하여 `in_out_dv`로 그룹화하고 `trsc_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20250111'AND '20250211' GROUP BY in_out_dv  ","{
    ""select"": [
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20250111"", ""20250211""]
        }
    ],
    ""group_by"": [
        ""in_out_dv""
    ]
}","SELECT aicfo_get_all_trsc.in_out_dv, sum(aicfo_get_all_trsc.trsc_amt) AS total_trsc_amt 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 GROUP BY aicfo_get_all_trsc.in_out_dv",예,"두 쿼리는 동일한 조건을 사용하여 `in_out_dv`로 그룹화하고 `trsc_amt`의 합계를 계산합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240126' AND '20240226' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240126"", ""20240226""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""total_trsc_amt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column 'total_trsc_amt' not found in Transaction,아니오,"변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의되지 않았기 때문에 해당 컬럼을 찾을 수 없다는 오류가 발생합니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 있지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
"SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240218' AND '20240318' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240218"", ""20240318""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""total_trsc_amt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column 'total_trsc_amt' not found in Transaction,아니오,"변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
"SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20240317' AND '20240417' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240317"", ""20240417""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""total_trsc_amt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column 'total_trsc_amt' not found in Transaction,아니오,"변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
"SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20241122' AND '20241222' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241122"", ""20241222""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""total_trsc_amt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column 'total_trsc_amt' not found in Transaction,아니오,"변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이를 제대로 반영하지 못하고 있습니다."
"SELECT note1, in_out_dv, SUM(trsc_amt) AS total_trsc_amt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240915' AND '20241015' GROUP BY note1, in_out_dv ORDER BY total_trsc_amt DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""sum"",
            ""column"": ""trsc_amt"",
            ""label"": ""total_trsc_amt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240915"", ""20241015""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""total_trsc_amt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column 'total_trsc_amt' not found in Transaction,아니오,"변환된 SQL에서 'total_trsc_amt'라는 별칭이 정의된 후에 사용되지 않아 오류가 발생했습니다. 원본 SQL에서는 'total_trsc_amt'가 SUM(trsc_amt)로 정의되어 사용되지만, 변환된 SQL에서는 이 별칭을 찾을 수 없기 때문에 쿼리가 일치하지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240403' AND '20240503' AND trsc_amt = 1000000   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240403"", ""20240503""]
        },
        {
            ""column"": ""trsc_amt"",
            ""op"": ""eq"",
            ""value"": 1000000
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.trsc_amt = :trsc_amt_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SQLAlchemy에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241124' AND '20241224' AND note1 LIKE '%세금%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241124"", ""20241224""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%세금%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건절도 동일한 논리를 따릅니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240301' AND '20240303' AND note1 LIKE '%법인세%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240301"", ""20240303""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%법인세%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240201' AND '20240229' AND note1 LIKE '%부가세%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240201"", ""20240229""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%부가세%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240216' AND '20240316' AND note1 LIKE '%급여%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240216"", ""20240316""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%급여%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240301' AND '20240321' AND note1 LIKE '%4대보험%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240301"", ""20240321""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%4대보험%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240302' AND '20240402' AND note1 LIKE '%퇴직금%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240302"", ""20240402""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%퇴직금%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240401' AND '20240417' AND note1 LIKE '%성과급%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240401"", ""20240417""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%성과급%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240501' AND '20240504' AND note1 LIKE '%임대료%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240501"", ""20240504""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%임대료%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240701' AND '20240713' AND note1 LIKE '%IT서비스%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240701"", ""20240713""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%IT서비스%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 조회하고 있으며, 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 갖기 때문에 결과가 일치합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240801' AND '20240808' AND note1 LIKE '%외주용역비%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240801"", ""20240808""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%외주용역비%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_trsc` 테이블에서 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241001' AND '20241027' AND note1 LIKE '%삼성SDS%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241001"", ""20241027""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%삼성SDS%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건문도 동일하게 설정되어 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT note1, COUNT(*) AS out_cnt FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240224' AND '20240524' GROUP BY note1 ORDER BY out_cnt DESC LIMIT 1","{
    ""select"": [
        ""note1"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""out_cnt""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240224"", ""20240524""]
        }
    ],
    ""group_by"": [
        ""note1""
    ],
    ""order_by"": [
        {
            ""column"": ""out_cnt"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용할 수 없다는 오류가 발생하였으며, 이는 원본 SQL 쿼리의 동작을 제대로 반영하지 못하고 있음을 나타냅니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND bank_nm = '기업은행' AND trsc_dt BETWEEN '20240726' AND '20240826' AND note1 LIKE '%세금%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""bank_nm"",
            ""op"": ""eq"",
            ""value"": ""기업은행""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240726"", ""20240826""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%세금%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.bank_nm = :bank_nm_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240201' AND '20240211' AND note1 LIKE '%해외출장비%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240201"", ""20240211""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%해외출장비%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하고 있으며, 조건절도 동일한 논리를 따릅니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241128' AND '20241228' AND note1 LIKE '%직원교육비%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241128"", ""20241228""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%직원교육비%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과가 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240801' AND '20240825' AND note1 LIKE '%네이버클라우드%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240801"", ""20240825""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%네이버클라우드%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가집니다. 따라서 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240601' AND '20240630' AND note1 LIKE '%기부금%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240601"", ""20240630""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%기부금%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 리터럴 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN BETWEEN '20241009' AND '20241109' AND note1 LIKE '%보험료%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241009"", ""20241109""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%보험료%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",아니오,"변환된 SQL 쿼리에서 `BETWEEN` 키워드가 두 번 사용된 원본 SQL 쿼리의 문법 오류가 수정되지 않았습니다. 원본 SQL 쿼리에서 `BETWEEN`이 두 번 반복되어 있으며, 이는 문법적으로 잘못된 표현입니다. 이 외에도 변환된 SQL 쿼리는 바인드 변수를 사용하고 있어 원본 SQL 쿼리와는 다소 차이가 있습니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240701' AND '20240729' AND note1 LIKE '%회식%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240701"", ""20240729""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%회식%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_trsc)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20241213' AND '20250113' AND note1 LIKE '%광고%'  ORDER BY trsc_amt DESC LIMIT 1","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20241213"", ""20250113""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%광고%""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""trsc_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1 ORDER BY aicfo_get_all_trsc.trsc_amt DESC",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 정렬하며, 결과적으로 동일한 결과를 반환합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 쿼리의 동작은 일치합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND in_out_dv = '출금' AND trsc_dt BETWEEN '20240101' AND '20241231' AND note1 LIKE '%현대오토에버%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""출금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240101"", ""20241231""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%현대오토에버%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, SELECT 절의 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '예적금' AND curr_cd = 'KRW' AND in_out_dv = '입금' AND trsc_dt BETWEEN '20231201' AND '20240101' AND note1 LIKE '%이자%'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""예적금""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""in_out_dv"",
            ""op"": ""eq"",
            ""value"": ""입금""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231201"", ""20240101""]
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%이자%""
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.in_out_dv = :in_out_dv_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2 AND aicfo_get_all_trsc.note1 LIKE :note1_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT note1, in_out_dv, COUNT(*) AS transaction_count FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240101' AND '20240107' GROUP BY note1, in_out_dv ORDER BY transaction_count DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""transaction_count""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240101"", ""20240107""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""transaction_count"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용할 수 없다는 오류가 발생하였으며, 이는 원본 SQL의 집계 함수와 그룹화 기능이 제대로 구현되지 않았음을 나타냅니다. 따라서 두 쿼리는 동일한 동작을 하지 않습니다."
"SELECT note1, in_out_dv, COUNT(*) AS transaction_count FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20231214' AND '20240114' GROUP BY note1, in_out_dv ORDER BY transaction_count DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""transaction_count""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20231214"", ""20240114""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""transaction_count"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용한 부분이 ""Column '*' not found in Transaction"" 오류를 발생시키고 있어, 원본 SQL과 동일한 동작을 하지 않기 때문입니다."
"SELECT note1, in_out_dv, COUNT(*) AS transaction_count FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND trsc_dt BETWEEN '20240715' AND '20240717' GROUP BY note1, in_out_dv ORDER BY transaction_count DESC ","{
    ""select"": [
        ""note1"",
        ""in_out_dv"",
        {
            ""func"": ""count"",
            ""column"": ""*"",
            ""label"": ""transaction_count""
        }
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240715"", ""20240717""]
        }
    ],
    ""group_by"": [
        ""note1"",
        ""in_out_dv""
    ],
    ""order_by"": [
        {
            ""column"": ""transaction_count"",
            ""direction"": ""desc""
        }
    ]
}",Error: Column '*' not found in Transaction,아니오,"변환된 SQL에서 ""COUNT(*)""를 사용하려고 했지만, ""Column '*' not found in Transaction"" 오류가 발생하여 원본 SQL과 동일한 결과를 생성하지 못합니다."
"SELECT bank_nm, acct_no, trsc_dt, trsc_tm, note1, in_out_dv, trsc_amt, trsc_bal FROM aicfo_get_all_trsc WHERE view_dv = '수시' AND curr_cd = 'KRW' AND note1 LIKE '%박서정%' AND trsc_dt BETWEEN '20240405' AND '20240505'   ","{
    ""select"": [
        ""bank_nm"",
        ""acct_no"",
        ""trsc_dt"",
        ""trsc_tm"",
        ""note1"",
        ""in_out_dv"",
        ""trsc_amt"",
        ""trsc_bal""
    ],
    ""where"": [
        {
            ""column"": ""view_dv"",
            ""op"": ""eq"",
            ""value"": ""수시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""note1"",
            ""op"": ""like"",
            ""value"": ""%박서정%""
        },
        {
            ""column"": ""trsc_dt"",
            ""op"": ""between"",
            ""value"": [""20240405"", ""20240505""]
        }
    ]
}","SELECT aicfo_get_all_trsc.bank_nm, aicfo_get_all_trsc.acct_no, aicfo_get_all_trsc.trsc_dt, aicfo_get_all_trsc.trsc_tm, aicfo_get_all_trsc.note1, aicfo_get_all_trsc.in_out_dv, aicfo_get_all_trsc.trsc_amt, aicfo_get_all_trsc.trsc_bal 
FROM aicfo_get_all_trsc 
WHERE aicfo_get_all_trsc.view_dv = :view_dv_1 AND aicfo_get_all_trsc.curr_cd = :curr_cd_1 AND aicfo_get_all_trsc.note1 LIKE :note1_1 AND aicfo_get_all_trsc.trsc_dt BETWEEN :trsc_dt_1 AND :trsc_dt_2",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성전자' AND curr_cd = 'KRW' AND reg_dt = '20240516'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성전자""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240516""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('삼성전자', 'KRW', '20240516')과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'SK하이닉스' AND curr_cd = 'KRW' AND reg_dt = '20240112'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""SK하이닉스""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240112""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('SK하이닉스', 'KRW', '20240112')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG에너지솔루션' AND curr_cd = 'KRW' AND reg_dt = '20240919'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""LG에너지솔루션""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240919""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('LG에너지솔루션', 'KRW', '20240919')과 동일한 의미를 가지므로, 쿼리의 동작은 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성바이오로직스' AND curr_cd = 'KRW' AND reg_dt = '20240613'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성바이오로직스""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240613""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('삼성바이오로직스', 'KRW', '20240613')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대차' AND curr_cd = 'KRW' AND reg_dt = '20240901'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""현대차""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240901""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('현대차', 'KRW', '20240901')과 같은 역할을 하므로, 쿼리의 동작은 동일합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '기아' AND curr_cd = 'KRW' AND reg_dt = '20240411'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""기아""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240411""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서는 바인딩 변수를 사용하고 있지만, 이는 실행 시점에 값이 대입되므로 원본 SQL과 동일한 결과를 생성합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG화학' AND curr_cd = 'KRW' AND reg_dt = '20250113'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""LG화학""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250113""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 상수 값('LG화학', 'KRW', '20250113')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'NAVER' AND curr_cd = 'KRW' AND reg_dt = '20250113'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""NAVER""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250113""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('NAVER', 'KRW', '20250113')과 동일한 역할을 하므로, 두 쿼리는 같은 동작을 수행합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '카카오' AND curr_cd = 'KRW' AND reg_dt = '20250113'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""카카오""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20250113""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('카카오', 'KRW', '20250113')과 동일한 역할을 하므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '포스코홀딩스' AND curr_cd = 'KRW' AND reg_dt = '20240101'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""포스코홀딩스""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240101""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('포스코홀딩스', 'KRW', '20240101')과 동일한 역할을 하므로, 쿼리의 동작은 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '셀트리온' AND curr_cd = 'KRW' AND reg_dt = '20240131'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""셀트리온""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240131""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('셀트리온', 'KRW', '20240131')과 동일한 의미를 가지므로, 결과적으로 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'KB금융' AND curr_cd = 'KRW' AND reg_dt = '20240308'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""KB금융""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240308""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('KB금융', 'KRW', '20240308')과 같은 값을 대체할 수 있으므로, 쿼리의 동작은 동일합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '신한지주' AND curr_cd = 'KRW' AND reg_dt = '20240405'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""신한지주""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240405""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('신한지주', 'KRW', '20240405')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '한국전력' AND curr_cd = 'KRW' AND reg_dt = '20241001'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""한국전력""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241001""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('한국전력', 'KRW', '20241001')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '한화솔루션' AND curr_cd = 'KRW' AND reg_dt = '20241110'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""한화솔루션""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241110""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('한화솔루션', 'KRW', '20241110')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '두산에너빌리티' AND curr_cd = 'KRW' AND reg_dt = '20240108'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""두산에너빌리티""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240108""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 컬럼을 참조하고 있으며, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 역할을 하므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성SDI' AND curr_cd = 'KRW' AND reg_dt = '20240114'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성SDI""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240114""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('삼성SDI', 'KRW', '20240114')과 동일한 역할을 하므로, 쿼리의 동작은 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'HMM' AND curr_cd = 'KRW' AND reg_dt = '20240717'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""HMM""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240717""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서는 바인딩 변수를 사용하고 있지만, 이는 실행 시점에 값이 대입되므로 원본 SQL과 동일한 결과를 생성합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대모비스' AND curr_cd = 'KRW' AND reg_dt = '20240619'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""현대모비스""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240619""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('현대모비스', 'KRW', '20240619')과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG전자' AND curr_cd = 'KRW' AND reg_dt = '20240928'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""LG전자""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240928""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('LG전자', 'KRW', '20240928')과 같은 역할을 하므로, 결과는 동일합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_cd = 'KRW' AND reg_dt = '20240505' AND bal_qunt >= 100   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240505""
        },
        {
            ""column"": ""bal_qunt"",
            ""op"": ""ge"",
            ""value"": 100
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(curr_cd, reg_dt, bal_qunt)을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:curr_cd_1, :reg_dt_1, :bal_qunt_1)는 원본 SQL의 상수 값('KRW', '20240505', 100)과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성전자' AND curr_cd = 'KRW' AND reg_dt = '20241119' AND bal_qunt > 50   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성전자""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241119""
        },
        {
            ""column"": ""bal_qunt"",
            ""op"": ""gt"",
            ""value"": 50
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.bal_qunt > :bal_qunt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_cd = 'KRW' AND reg_dt = '20240214' AND bal_qunt >= 100   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240214""
        },
        {
            ""column"": ""bal_qunt"",
            ""op"": ""ge"",
            ""value"": 100
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(curr_cd, reg_dt, bal_qunt)을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과도 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'NAVER' AND curr_cd = 'KRW' AND bal_qunt >= 150 AND reg_dt = '20241202'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""NAVER""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""bal_qunt"",
            ""op"": ""ge"",
            ""value"": 150
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241202""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 선택된 컬럼과 WHERE 절의 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_cd = 'KRW' AND trsc_amt >= (5*POWER(10,7)) AND reg_dt = '20240303'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""trsc_amt"",
            ""op"": ""ge"",
            ""value"": ""(5*POWER(10,7))""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240303""
        }
    ]
}",Error: Column 'trsc_amt' not found in Stock,아니오,변환된 SQL에서 'trsc_amt' 컬럼이 Stock 테이블에 존재하지 않기 때문에 원본 SQL 쿼리와 동일한 동작을 하지 않습니다.
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (2*POWER(10,6)) AND curr_cd = 'KRW' AND reg_dt = '20240303'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""prchs_amt"",
            ""op"": ""ge"",
            ""value"": [2000000]
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240303""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG화학' AND curr_cd = 'KRW' AND prchs_amt > (5*POWER(10,6)) AND reg_dt = '20240316'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""LG화학""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""prchs_amt"",
            ""op"": ""gt"",
            ""value"": 5000000
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240316""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.prchs_amt > :prchs_amt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (3*POWER(10,6)) AND curr_cd = 'KRW' AND reg_dt = '20240321'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""prchs_amt"",
            ""op"": ""ge"",
            ""value"": [3000000]
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240321""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= POWER(10,7) AND curr_cd = 'KRW' AND return_rate > 10 AND reg_dt = '20240402'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""prchs_amt"",
            ""op"": ""ge"",
            ""value"": 10000000
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""return_rate"",
            ""op"": ""gt"",
            ""value"": 10
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240402""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대차' AND curr_cd = 'KRW' AND reg_dt = '20240417'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""현대차""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240417""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:stock_nm_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 하드코딩된 값('현대차', 'KRW', '20240417')과 같은 역할을 하므로, 결과적으로 두 쿼리는 동일한 동작을 수행합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate >= 5 AND curr_cd = 'KRW' AND reg_dt = '20240504'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""return_rate"",
            ""op"": ""ge"",
            ""value"": 5
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240504""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate >= 5, curr_cd = 'KRW', reg_dt = '20240504')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으며, SQLAlchemy에서 사용된 바인드 변수는 원본 쿼리의 상수 값과 동일한 의미를 가집니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성전자' AND curr_cd = 'KRW' AND return_rate >= 15 AND reg_dt = '20240713'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성전자""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""return_rate"",
            ""op"": ""ge"",
            ""value"": 15
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240713""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블과 필드를 참조하며, 동일한 조건을 사용하여 데이터를 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate <= -10 AND curr_cd = 'KRW' AND reg_dt = '20240808'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""return_rate"",
            ""op"": ""le"",
            ""value"": -10
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240808""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.return_rate <= :return_rate_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate <= -10, curr_cd = 'KRW', reg_dt = '20240808')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과는 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate >= 10 AND reg_dt = '20241027' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""return_rate"",
            ""op"": ""ge"",
            ""value"": 10
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241027""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate >= 10, reg_dt = '20241027', curr_cd = 'KRW')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과는 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate > 20 AND reg_dt = '20240524' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""return_rate"",
            ""op"": ""gt"",
            ""value"": 20
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240524""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(return_rate > 20, reg_dt = '20240524', curr_cd = 'KRW')을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로 결과는 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price >= POWER(10,7) AND reg_dt = '20240826' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""curr_price"",
            ""op"": ""ge"",
            ""value"": {
                ""func"": ""POWER"",
                ""column"": ""10"",
                ""label"": ""10^7""
            }
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240826""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(curr_price, reg_dt, curr_cd)을 사용하여 동일한 컬럼(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있습니다. 변환된 SQL에서 사용된 바인드 변수(:curr_price_1, :reg_dt_1, :curr_cd_1)는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price > (2*POWER(10,7)) AND reg_dt = '20240211' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""curr_price"",
            ""op"": ""gt"",
            ""value"": {
                ""func"": ""multiply"",
                ""args"": [
                    2,
                    {
                        ""func"": ""power"",
                        ""args"": [
                            10,
                            7
                        ]
                    }
                ]
            }
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240211""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.curr_price > :curr_price_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 열도 동일합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '삼성바이오로직스' AND curr_price >= (5*POWER(10,7)) AND reg_dt = '20241228' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""삼성바이오로직스""
        },
        {
            ""column"": ""curr_price"",
            ""op"": ""ge"",
            ""value"": 50000000
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241228""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼과 조건이 일치합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price >= (3*POWER(10,7)) AND prchs_amt <= (2*POWER(10,7)) AND reg_dt = '20240125' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""curr_price"",
            ""op"": ""ge"",
            ""value"": ""(3*POWER(10,7))""
        },
        {
            ""column"": ""prchs_amt"",
            ""op"": ""le"",
            ""value"": ""(2*POWER(10,7))""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240125""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.prchs_amt <= :prchs_amt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 조건을 사용하여 데이터를 필터링하고 있으며, 선택된 컬럼도 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 두 쿼리는 같은 동작을 합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = '현대모비스' AND reg_dt = '20240630' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""현대모비스""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240630""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 컬럼을 선택하고, 동일한 조건을 사용하여 필터링하고 있습니다. 변환된 SQL에서 사용된 바인딩 변수(:stock_nm_1, :reg_dt_1, :curr_cd_1)는 원본 SQL의 하드코딩된 값('현대모비스', '20240630', 'KRW')과 동일한 역할을 하므로, 쿼리의 동작은 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE return_rate >= 10 AND bal_qunt >= 50 AND reg_dt = '20241109' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""return_rate"",
            ""op"": ""ge"",
            ""value"": 10
        },
        {
            ""column"": ""bal_qunt"",
            ""op"": ""ge"",
            ""value"": 50
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241109""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.return_rate >= :return_rate_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (5*POWER(10,6)) AND return_rate <= -5 AND reg_dt = '20240729' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""prchs_amt"",
            ""op"": ""ge"",
            ""value"": 5000000
        },
        {
            ""column"": ""return_rate"",
            ""op"": ""le"",
            ""value"": -5
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240729""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.return_rate <= :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE curr_price >= (2*POWER(10,7)) AND return_rate > 15 AND reg_dt = '20241016' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""curr_price"",
            ""op"": ""ge"",
            ""value"": ""(2*POWER(10,7))""
        },
        {
            ""column"": ""return_rate"",
            ""op"": ""gt"",
            ""value"": 15
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241016""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.curr_price >= :curr_price_1 AND aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 선택하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나올 것입니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm = 'LG전자' AND bal_qunt >= 100 AND valu_gain_loss >= (5*POWER(10,6)) AND reg_dt = '20241016' AND curr_cd = 'KRW'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""LG전자""
        },
        {
            ""column"": ""bal_qunt"",
            ""op"": ""ge"",
            ""value"": 100
        },
        {
            ""column"": ""valu_gain_loss"",
            ""op"": ""ge"",
            ""value"": [5000000]
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241016""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.bal_qunt >= :bal_qunt_1 AND aicfo_get_all_stock.valu_gain_loss >= :valu_gain_loss_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1",예,"두 쿼리는 동일한 조건을 사용하여 `aicfo_get_all_stock` 테이블에서 데이터를 조회하고 있으며, 필드와 조건이 일치합니다. 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 상수 값과 동일한 의미를 가지므로, 결과는 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE prchs_amt >= (3*POWER(10,6)) AND return_rate > 20 AND reg_dt = '20240209' AND curr_cd = 'KRW'  ORDER BY appr_amt DESC LIMIT 1","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""prchs_amt"",
            ""op"": ""ge"",
            ""value"": [3000000]
        },
        {
            ""column"": ""return_rate"",
            ""op"": ""gt"",
            ""value"": 20
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240209""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        }
    ],
    ""order_by"": [
        {
            ""column"": ""appr_amt"",
            ""direction"": ""desc""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.prchs_amt >= :prchs_amt_1 AND aicfo_get_all_stock.return_rate > :return_rate_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 ORDER BY aicfo_get_all_stock.appr_amt DESC",아니오,"변환된 SQL 쿼리는 LIMIT 1이 누락되어 있어 결과의 개수가 다를 수 있습니다. 원본 쿼리는 조건에 맞는 결과 중에서 가장 높은 appr_amt를 가진 한 개의 결과만 반환하지만, 변환된 쿼리는 해당 조건을 만족하는 모든 결과를 반환할 수 있습니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE item_name LIKE '%주식%' AND curr_cd = 'KRW' AND reg_dt = '20241228'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""item_name"",
            ""op"": ""like"",
            ""value"": ""%주식%""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241228""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.item_name LIKE :item_name_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건을 사용하여 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수(:item_name_1, :curr_cd_1, :reg_dt_1)는 원본 SQL의 리터럴 값('%주식%', 'KRW', '20241228')과 동일한 의미를 가지므로 결과가 동일하게 나옵니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm= '웹케시' AND curr_cd = 'KRW' AND reg_dt = '20240125'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""웹케시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240125""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.stock_nm = :stock_nm_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 테이블(aicfo_get_all_stock)에서 동일한 조건(stock_nm, curr_cd, reg_dt)을 사용하여 동일한 열(item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate)을 선택하고 있으므로 같은 동작을 합니다. 변환된 SQL에서 사용된 바인딩 변수는 원본 SQL의 하드코딩된 값과 동일한 의미를 가지므로 결과는 일치합니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchs_amt, appr_amt, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE item_name LIKE '%펀드%' AND curr_cd = 'KRW' AND reg_dt = '20240630'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchs_amt"",
        ""appr_amt"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""item_name"",
            ""op"": ""like"",
            ""value"": ""%펀드%""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""eq"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20240630""
        }
    ]
}","SELECT aicfo_get_all_stock.item_name, aicfo_get_all_stock.stock_nm, aicfo_get_all_stock.bal_qunt, aicfo_get_all_stock.prchs_price, aicfo_get_all_stock.curr_price, aicfo_get_all_stock.prchs_amt, aicfo_get_all_stock.appr_amt, aicfo_get_all_stock.valu_gain_loss, aicfo_get_all_stock.return_rate 
FROM aicfo_get_all_stock 
WHERE aicfo_get_all_stock.item_name LIKE :item_name_1 AND aicfo_get_all_stock.curr_cd = :curr_cd_1 AND aicfo_get_all_stock.reg_dt = :reg_dt_1",예,"두 쿼리는 동일한 조건을 사용하여 같은 데이터를 선택하고 있으며, 변환된 SQL에서 사용된 바인드 변수는 원본 SQL의 조건과 일치하는 값을 참조하고 있습니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchase_amt_foreign, evaluation_amt_foreign, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE item_name LIKE '%주식%' AND curr_cd <> 'KRW' AND reg_dt = '20170317'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchase_amt_foreign"",
        ""evaluation_amt_foreign"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""item_name"",
            ""op"": ""like"",
            ""value"": ""%주식%""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20170317""
        }
    ]
}",Error: Column 'prchase_amt_foreign' not found in Stock,아니오,"변환된 SQL에서 'prchase_amt_foreign' 컬럼이 Stock 테이블에 존재하지 않아 오류가 발생하였으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
"SELECT item_name, stock_nm, bal_qunt, prchs_price, curr_price, prchase_amt_foreign, evaluation_amt_foreign, valu_gain_loss, return_rate FROM aicfo_get_all_stock WHERE stock_nm= '웹케시' AND curr_cd <> 'KRW' AND reg_dt = '20241007'   ","{
    ""select"": [
        ""item_name"",
        ""stock_nm"",
        ""bal_qunt"",
        ""prchs_price"",
        ""curr_price"",
        ""prchase_amt_foreign"",
        ""evaluation_amt_foreign"",
        ""valu_gain_loss"",
        ""return_rate""
    ],
    ""where"": [
        {
            ""column"": ""stock_nm"",
            ""op"": ""eq"",
            ""value"": ""웹케시""
        },
        {
            ""column"": ""curr_cd"",
            ""op"": ""ne"",
            ""value"": ""KRW""
        },
        {
            ""column"": ""reg_dt"",
            ""op"": ""eq"",
            ""value"": ""20241007""
        }
    ]
}",Error: Column 'prchase_amt_foreign' not found in Stock,아니오,"변환된 SQL에서 'prchase_amt_foreign' 컬럼이 'Stock' 테이블에 존재하지 않아 오류가 발생하였으므로, 원본 SQL과 동일한 동작을 하지 않습니다."
